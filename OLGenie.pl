#! /usr/bin/perl

# PROGRAM: SNPGenie for overlapping genes (overlapgenie; OLGenie) using sister pair 
# analysis for pNN/pSN/pNS/pSS 

#########################################################################################
# EXAMPLE CALL:
#########################################################################################
# snpgenie_sister_pairs.pl --fasta_file=<aligned_seqs>.fa --gtf_file=<CDS_annotations>.gtf --tree_file=<newick>.treefile --min_support=2
# snpgenie_sister_pairs.pl --fasta_file=yaaW-htgA-trimmed-S_enterica-only-sas12_rename.fasta --gtf_file=yaaW-htgA-trimmed-S_enterica-only-sas12.gtf --tree_file=yaaW-htgA-trimmed-S_enterica-only-sas12_rename.fasta.treefile --min_support=2
#########################################################################################

#########################################################################################
## LICENSE
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.
#########################################################################################

# AUTHOR: Chase W. Nelson
# Copyright (C) 2018 Chase W. Nelson
# DATE CREATED: August 13, 2018

# CONTACT1: cnelson@amnh.org
# CONTACT2: cwnelson88@gmail.com

# AFFILIATION1: Sackler Institute for Comparative Genomics, American Museum of Natural
#     History, New York, NY 10024, USA
# AFFILIATION2: Special Volunteer, Division of Cancer Epidemiology & Genetics, National
#     Cancer Institute, National Institutes of Health, Rockville, MD 20850, USA
# AFFILIATION3: BigPlant Consortium, Center for Genomics and Systems Biology, New York 
#     University, New York, NY 10003, USA

# CITATION1: SNPGenie, https://github.com/chasewnelson/snpgenie
# CITATION2: Nelson CW, Moncla LH, Hughes AL (2015) SNPGenie: estimating evolutionary 
#	parameters to detect natural selection using pooled next-generation sequencing data. 
#	Bioinformatics 31(22):3709-11, doi: 10.1093/bioinformatics/btv449.

use strict;
use Data::Dumper;
use List::Util qw(max);
use Parallel::ForkManager;
use Getopt::Long;

# Get the time
my $time1 = time;
my $local_time1 = localtime;

STDOUT->autoflush(1);

my @nucleotides = qw/A C G T/;

#########################################################################################
# INITIALIZE (OPTIONAL) INPUT VARIABLES
my $fasta_file;
my $tree_file;
my $phase;
my $prune_polytomies;
my $min_support;

# Get user input, if given. If a Boolean argument is passed, its value is 1; else undef
GetOptions( "fasta_file=s" => \$fasta_file,
			"tree_file=s" => \$tree_file,
			"phase=s" => \$phase,
			"prune_polytomies" => \$prune_polytomies, # boolean
			"min_support=i" => \$min_support)
			
			or die "\n\n################################################################################\n" .
				"### OLGenie for analysis of selection in overlapping genes using sister pairs.\n" .
				"################################################################################\n\n" .
				"THE FOLLOWING ARGUMENTS MUST BE PROVIDED:\n" .
				"--fasta_file: a FASTA file containing multiple aligned sequences of one coding sequence.\n" .
					"\tThe entire coding sequence must be an overlapping gene (OLG), with no non-overlapping codons.\n" .
					"\tThe frame must be the frame of the reference gene (ORF1). (See the --phase option.)\n\n" .
				"--tree_file: a text file containing one Newick tree using the exact sequence names (headers) as the FASTA.\n" .
					"\tIf multiple trees are present, only the first will be used.\n\n" .
				"--phase: the phase of the overlapping gene (OLG) relationship: ss12, ss13, sas11, sas12, or sas13:\n" .
					"\tSENSE-SENSE:\n" .
					"\t\tss12:\n\t\t\tORF1: 1-2-3-1-2-3-1\n\t\t\tORF2: 2-3-1-2-3-1-2\n" .
					"\t\tss13:\n\t\t\tORF1: 1-2-3-1-2-3-1\n\t\t\tORF2: 3-1-2-3-1-2-3\n\n ".
					"\tSENSE-ANTISENSE:\n" .
					"\t\tsas11:\n\t\t\tORF1: 1-2-3-1-2-3-1\n\t\t\tORF2: 1-3-2-1-3-2-1\n" .
					"\t\tsas12:\n\t\t\tORF1: 1-2-3-1-2-3-1\n\t\t\tORF2: 2-1-3-2-1-3-2\n" .
					"\t\tsas13:\n\t\t\tORF1: 1-2-3-1-2-3-1\n\t\t\tORF2: 3-2-1-3-2-1-3\n\n\n" .
				"--prune_polytomies: flag that indicates that polytomies should be reduced to the two sequences with most data (fewest gaps).\n\n" .
				"--min_support: minimum bootstrap support (0-100) required for a sister pair to be included in the analysis.\n\n" .
				"EXAMPLE:\n\n> OLGenie.pl --fasta_file=<name>.fasta --tree_file=<name>.treefile --phase=sas12 --prune_polytomies --min_support=50\n\n" .
				"################################################################################\n\n";
			# If an argument is called as a flag, its value is 0; if not called, it's null

unless(-f "$fasta_file" && -f "$tree_file" && 
	($phase eq 'ss12' || $phase eq 'ss13' || $phase eq 'sas11' || $phase eq 'sas12' || $phase eq 'sas13')) {
	
	die "\n\n################################################################################\n" .
		"### OLGenie for analysis of selection in overlapping genes using sister pairs.\n" .
		"################################################################################\n\n" .
		"THE FOLLOWING ARGUMENTS MUST BE PROVIDED:\n" .
		"--fasta_file: a FASTA file containing multiple aligned sequences of one coding sequence.\n" .
			"\tThe entire coding sequence must be an overlapping gene (OLG), with no non-overlapping codons.\n" .
			"\tThe frame must be the frame of the reference gene (ORF1). (See the --phase option.)\n\n" .
		"--tree_file: a text file containing one Newick tree using the exact sequence names (headers) as the FASTA.\n" .
			"\tIf multiple trees are present, only the first will be used.\n\n" .
		"--phase: the phase of the overlapping gene (OLG) relationship: ss12, ss13, sas11, sas12, or sas13:\n" .
			"\tSENSE-SENSE:\n" .
			"\t\tss12:\n\t\t\tORF1: 1-2-3-1-2-3-1\n\t\t\tORF2: 2-3-1-2-3-1-2\n" .
			"\t\tss13:\n\t\t\tORF1: 1-2-3-1-2-3-1\n\t\t\tORF2: 3-1-2-3-1-2-3\n\n ".
			"\tSENSE-ANTISENSE:\n" .
			"\t\tsas11:\n\t\t\tORF1: 1-2-3-1-2-3-1\n\t\t\tORF2: 1-3-2-1-3-2-1\n" .
			"\t\tsas12:\n\t\t\tORF1: 1-2-3-1-2-3-1\n\t\t\tORF2: 2-1-3-2-1-3-2\n" .
			"\t\tsas13:\n\t\t\tORF1: 1-2-3-1-2-3-1\n\t\t\tORF2: 3-2-1-3-2-1-3\n\n\n" .
		"--prune_polytomies: flag that indicates that polytomies should be reduced to the two sequences with most data (fewest gaps).\n\n" .
		"--min_support: minimum bootstrap support (0-100) required for a sister pair to be included in the analysis.\n\n" .
		"EXAMPLE:\n\n> OLGenie.pl --fasta_file=<name>.fasta --tree_file=<name>.treefile --phase=sas12 --prune_polytomies --min_support=50\n\n" .
		"################################################################################\n\n";
}

my $fasta_file_short = $fasta_file;
$fasta_file_short =~ s/(.*\/)?(.+\.\w+)/$2/;

my $tree_file_short = $tree_file;
$tree_file_short =~ s/(.*\/)?(.+\.\w+)/$2/;

#unless($phase eq 'ss12' || $phase eq 'ss13' || $phase eq 'sas11' || $phase eq 'sas12' || $phase eq 'sas13') {
#	die "\n### WARNING: A valid --phase option must be provided (ss12, ss13, sas11, sas12, or sas13):\n###\n".
#		"### SENSE-SENSE:\n".
#		"###  ss12:\n###    ORF1: 1-2-3-1-2-3-1\n###    ORF2: 2-3-1-2-3-1-2\n".
#		"###  ss13:\n###    ORF1: 1-2-3-1-2-3-1\n###    ORF2: 3-1-2-3-1-2-3\n###\n".
#		"### SENSE-ANTISENSE:\n".
#		"###  sas11:\n###    ORF1: 1-2-3-1-2-3-1\n###    ORF2: 1-3-2-1-3-2-1\n".
#		"###  sas12:\n###    ORF1: 1-2-3-1-2-3-1\n###    ORF2: 2-1-3-2-1-3-2\n".
#		"###  sas13:\n###    ORF1: 1-2-3-1-2-3-1\n###    ORF2: 3-2-1-3-2-1-3\n###\n".
#		"### OLGenie terminated.\n\n";
#}

if(! $min_support) {
	if($min_support != 0) { # Called as a flag, but given no value
		$min_support = 0;
	}
} elsif($min_support < 0) {
	die "\n### WARNING: The --min_support option must be an integer â‰¥0\n".
		"### OLGenie terminated.\n\n";
}

print "\n################################################################################".
	"\n##                                                                            ##".
	"\n##                       Sister-Pairs OLGenie Initiated!                      ##".
	"\n##                                                                            ##".
	"\n################################################################################\n";


print "\nOLGenie initiated at local time $local_time1\n";

# Read in the group of sequences from the fasta file
my %header2sequence;
my $seq = '';
#my @seqs_arr;
my $header = '';
#my @headers_arr;
my $seq_num = 0;
my $last_seq_length;

open(IN_FASTA, "$fasta_file") or die "Could not open file $fasta_file\n";

print "\n################################################################################";
print "\nRecording coding sequence data for $fasta_file...\n";

while(<IN_FASTA>) {
	chomp;
	if(/>/) {
		if($seq_num == 0) {
			$header = $_;
			$header =~ s/^>//;
			
			$seq_num ++;
		} else {
			$seq = uc($seq);
			$seq =~ tr/U/T/;
			
			if($header =~ /[^\w]/) {
				die "\n### TAXA NAMES CONTAIN NON-WORD CHARACTERS IN FASTA FILE: $header.\n" .
					"### Only alphanumeric characters (a-z, A-Z, 0-9) and underscores (_) may be used. SCRIPT TERMINATED.\n\n";
			}
			
			$header2sequence{$header} = $seq;
#			push(@seqs_arr, $seq);
#			push(@headers_arr, $header);
			
			$header = $_;
			$header =~ s/^>//;
			
			$seq_num ++;
			
			my $this_seq_length = length($seq);
			
			unless($this_seq_length % 3 == 0) {
				die "\n\n### DIE: Sequences must be a complete set of codons, i.e., the nucleotide length".
					"### must be evenly divisible by 3. Instead, the length is $this_seq_length\. TERMINATED.\n\n";
			}
			
			#print "\nseq $seq_num is of length $this_seq_length\n";
			#print "\nseq: $seq\n";
			
			if($last_seq_length && ($last_seq_length != $this_seq_length)) {
				die "\n\n### DIE: The sequences must be aligned, i.e., must be the same length. TERMINATED.\n\n";
			} else {
				$last_seq_length = $this_seq_length;
				$seq = '';
			}
		}
	} else {
		$seq .= $_;
	}
}

close IN_FASTA;

$seq = uc($seq);
$seq =~ tr/U/T/;

if($header =~ /[^\w]/) {
	die "\n### TAXA NAMES CONTAIN NON-WORD CHARACTERS IN FASTA FILE: $header.\n" .
		"### Only alphanumeric characters (a-z, A-Z, 0-9) and underscores (_) may be used. SCRIPT TERMINATED.\n\n";
}
$header2sequence{$header} = $seq;

#push(@seqs_arr, $seq);
#push(@headers_arr, $header);


##########################################################################################
# Store the sequence index of each FASTA header
#my %header_to_index;
my %header_to_def_len;
foreach my $curr_header (keys %header2sequence) {
	
	# Get seq
	my $seq = $header2sequence{$curr_header};
	
	# Count undefined length
	my $num_N = $seq =~ s/N//g;
	my $num_gap = $seq =~ s/-//g;
	
	my $defined_length = $last_seq_length - $num_N - $num_gap;
	
	$header_to_def_len{$curr_header} = $defined_length;
	
	#print "seq $header has a defined length of $defined_length\n";
}


##########################################################################################
# Store the pairs to be compared from the tree

#my $tree = '(IRC204023:0.0005165081,(((((((((((((((IRC204025:0.0006485203,((((IRC200063:0.0000013108,PAP163250:0.0000013108)80:0.0000013108,IRC200842:0.0000013108)80:0.0000026230,IRC202284:0.0001273621)98:0.0002586223,(PAP134146:0.0000028186,(PAP189395:0.0001339185,PAP238528:0.0008490354)61:0.0001316211)61:0.0001269344)57:0.0001287446)4:0.0000028411,((((((((((((((IRC201967:0.0012381605,PAP181428:0.0019499309)89:0.0005370419,SCD2926:0.0004202313)93:0.0013894512,PAP134894:0.0019289096)51:0.0012333647,SCD2578:0.0002518646)46:0.0008567490,(SCD2692:0.0015164973,SCD2653:0.0001499120)47:0.0001404255)47:0.0002721863,IRC202361:0.0014011387)60:0.0001144080,PAP2488:0.0001379602)61:0.0001317830,(IRC201549:0.0000013108,IRC201622:0.0001314023)100:0.0003944866)11:0.0000025960,((((((PAP1234:0.0000013108,PAP155453:0.0001420554)64:0.0000020698,PAP273408:0.0001426968)64:0.0002312669,PAP246158:0.0001559671)45:0.0000286450,PAP2107:0.0001348882)40:0.0001296150,(PAP154135:0.0012264300,(PAP273508:0.0008829074,SCD1228:0.0001613393)86:0.0000020322)57:0.0002948380)10:0.0000021945,PAP205069:0.0001348767)5:0.0000013108)18:0.0000013108,(((IRC200254:0.0006455599,IRC200329:0.0002688584)74:0.0000028334,IRC200284:0.0000025715)73:0.0002556030,SCD5777:0.0001278500)14:0.0000028075)5:0.0000013108,(((((((IRC200683:0.0001361695,(((((((IRC203856:0.0001272273,PAP246719:0.0000029107)64:0.0001269950,(PAP0723:0.0000013108,SCD4144:0.0001347000)60:0.0000029101)49:0.0000994046,PAP219145:0.0000013108)2:0.0000037874,PAP0401:0.0000013108)5:0.0000012020,PAP196708:0.0000013108)6:0.0000065281,PAP2760:0.0004188622)8:0.0000021767,SBX2318:0.0000013108)28:0.0000015152)15:0.0000021626,IRC201491:0.0000013108)12:0.0000018682,SBX2030:0.0000013108)27:0.0000011330,IRC200230:0.0002644616)11:0.0000021873,PAP182704:0.0002580197)14:0.0000024201,((PAP160308:0.0001332499,PAP271908:0.0000013108)71:0.0000023799,PAP233816:0.0005483553)55:0.0001323408)17:0.0000020998,((((IRC201552:0.0004161074,PAP248004:0.0001309819)52:0.0000013108,PAP189483:0.0000013108)55:0.0000013108,PAP287805:0.0003820200)53:0.0000020102,((PAP203683:0.0004166922,(PAP177247:0.0001630219,PAP116511:0.0000013108)96:0.0000025468)95:0.0000022033,PAP176895:0.0004043487)93:0.0002685871)10:0.0001259205)15:0.0000027177)10:0.0000023550,((PAP3353:0.0000024861,(PAP2198:0.0000020203,PAP245324:0.0005355699)75:0.0001303384)60:0.0001271377,((PAP134154:0.0001351088,SCD4183:0.0001375294)77:0.0001312852,PAP168545:0.0002938666)54:0.0000021580)48:0.0001274625)54:0.0001300652,((((((((IRC201192:0.0001620415,PAP3016:0.0000023576)82:0.0002640640,PAP3075:0.0004111039)56:0.0001325252,(PAP2478:0.0001365768,PAP3595:0.0005784945)51:0.0000022468)43:0.0001329898,((PAP0209:0.0000013108,(PAP2767:0.0004295640,(PAP2362:0.0005283640,PAP188743:0.0005656995)88:0.0001337294)81:0.0000028641)73:0.0001283298,PAP278076:0.0002633736)61:0.0001270719)12:0.0000027005,(((((PAP2564:0.0002581714,(PAP0899:0.0002837187,SCD5642:0.0002696971)50:0.0000010343)48:0.0000013108,PAP1643:0.0001331809)48:0.0000013108,PAP1876:0.0000013108)49:0.0000013108,(PAP2799:0.0002681328,PAP2616:0.0001308007)51:0.0000013108)60:0.0000027988,(PAP2438:0.0000029204,PAP2277:0.0002512094)91:0.0001258718)55:0.0001283844)2:0.0000013108,(PAP1884:0.0000013108,PAP1990:0.0000013108)39:0.0000027049)2:0.0000027792,PAP291876:0.0001318987)21:0.0000870466,IRC201378:0.0003113727)20:0.0000398234)7:0.0000013108,(IRC201517:0.0000023780,PAP195505:0.0002868106)68:0.0001272359)1:0.0000029472)1:0.0000013108,((((((((((IRC201314:0.0033486757,IRC200624:0.0011914704)98:0.0017235279,(IRC201961:0.0015243067,IRC201969:0.0011654046)75:0.0009867534)71:0.0016795779,((((((IRC203782:0.0006642971,IRC201364:0.0007280261)61:0.0002772350,IRC201867:0.0016560865)65:0.0006403561,SCD1576:0.0005965662)46:0.0001600871,IRC201427:0.0013323668)49:0.0011694137,IRC203702:0.0006641122)48:0.0011591756,((((IRC200306:0.0013788627,IRC200189:0.0000025857)100:0.0035987340,IRC203710:0.0007913649)95:0.0009554255,IRC200963:0.0028980987)93:0.0013801719,IRC200960:0.0003644238)72:0.0005793446)30:0.0003092925)58:0.0008761012,IRC200608:0.0058344243)59:0.0000020451,PAP234080:0.0002619337)61:0.0007876942,PAP210036:0.0001337881)12:0.0000020523,(((IRC203670:0.0002859828,IRC200518:0.0001507368)100:0.0038834127,PAP214878:0.0013699030)69:0.0004225773,(IRC201548:0.0011753618,PAP239171:0.0000020460)46:0.0001388314)28:0.0001356113)28:0.0001309011,(((PAP149979:0.0005275095,PAP224432:0.0001285867)88:0.0001348231,PAP241573:0.0000013108)68:0.0000021642,(((((PAP2210:0.0001388421,PAP230759:0.0002689339)79:0.0000021717,PAP292313:0.0000013108)82:0.0001341587,(PAP3565:0.0001440145,PAP3380:0.0000024219)80:0.0001277762)6:0.0000026582,PAP150508:0.0001346028)58:0.0000020038,PAP126754:0.0000013108)69:0.0000020379)65:0.0001285143)23:0.0000028576,((IRC201520:0.0001452597,IRC201518:0.0000026798)100:0.0001277930,PAP203078:0.0005453771)76:0.0001270254)8:0.0000027846,(((((((IRC201934:0.0000029102,PAP188882:0.0000013108)82:0.0000021870,PAP144642:0.0004341009)78:0.0001344450,((IRC202312:0.0000013108,(((IRC201498:0.0001308258,((((PAP280264:0.0001373196,(PAP1194:0.0001946491,PAP228377:0.0001395510)74:0.0000800088)54:0.0000027021,(PAP192295:0.0000028286,PAP209018:0.0007002205)93:0.0001304631)66:0.0001292250,PAP262246:0.0001385251)60:0.0001286681,SCD1676:0.0000013108)60:0.0000019503)12:0.0000010901,PAP101145:0.0001310646)7:0.0000016607,(PAP201689:0.0000021676,PAP0697:0.0002871171)62:0.0002709530)6:0.0000010066)3:0.0000011010,IRC201377:0.0000013108)1:0.0000013239)0:0.0000015661,IRC201001:0.0000013108)3:0.0000012084,PAP211880:0.0000013108)19:0.0002452923,(PAP0474:0.0000020933,(((SCD4229:0.0000026675,(SCD3220:0.0005646160,SCD2675:0.0014303617)99:0.0012555532)59:0.0001299814,(SCD3578:0.0000013108,SCD3651:0.0000013108)52:0.0000025827)57:0.0002654653,SCD1435:0.0000020160)43:0.0002592615)45:0.0001306003)50:0.0000014937,(((((((IRC201889:0.0000027560,IRC201922:0.0001282928)99:0.0002527557,IRC201891:0.0003821887)33:0.0000022764,(PAP233849:0.0000013108,PAP127128:0.0000013108)37:0.0000013108)79:0.0000026379,PAP209541:0.0003884634)49:0.0000021181,PAP2824:0.0001431696)25:0.0000028840,PAP290644:0.0000013108)50:0.0001210745,(((PAP2437:0.0000026483,PAP2442:0.0000027699)96:0.0003584992,PAP288527:0.0001407593)58:0.0001720660,SCD5716:0.0002599975)54:0.0000022723)81:0.0002566720)18:0.0000012690)8:0.0000009974)1:0.0000013108,((((((IRC201930:0.0001390938,(PAP297159:0.0000028991,PAP198322:0.0001336173)77:0.0001289925)60:0.0000027225,IRC201929:0.0002559214)9:0.0000028946,(((PAP2434:0.0000013108,PAP1493:0.0001305817)94:0.0000013108,PAP2542:0.0001259495)93:0.0001266274,PAP119786:0.0002563512)21:0.0000029372)8:0.0000027895,(IRC201606:0.0003973980,(IRC201526:0.0001267056,IRC203708:0.0003840188)70:0.0000024982)78:0.0001268798)53:0.0001273948,IRC200049:0.0000013108)3:0.0000029357,((((((((IRC200074:0.0003968081,PAP286040:0.0000013108)44:0.0000013108,IRC201391:0.0000013108)43:0.0000019774,(PAP2541:0.0000013108,PAP207267:0.0000013108)49:0.0000013108)27:0.0000013108,(PAP197013:0.0004097994,PAP175231:0.0001319004)19:0.0000027336)54:0.0000013108,IRC201893:0.0005118682)51:0.0000028311,PAP124146:0.0022134901)6:0.0001283489,(PAP232456:0.0007095048,PAP120477:0.0001298861)92:0.0003850903)52:0.0000019805,(PAP200787:0.0003886041,(PAP198260:0.0001334592,PAP197077:0.0001315842)80:0.0000020544)97:0.0002559378)25:0.0000028414)2:0.0000029268)3:0.0000013108,(((((((((((IRC204029:0.0000013108,(IRC201550:0.0000027387,PAP246384:0.0011107397)11:0.0000028632)8:0.0000300128,IRC203884:0.0000013108)8:0.0000080185,IRC203885:0.0002087094)18:0.0002257477,IRC201521:0.0002569673)23:0.0001271876,(((IRC201935:0.0006609701,IRC200361:0.0002666831)29:0.0000034781,PAP165727:0.0006926380)29:0.0000023143,IRC201492:0.0000013108)29:0.0000013108)1:0.0000026974,((((((((IRC200025:0.0050030978,IRC200936:0.0002788797)6:0.0001356578,(((((IRC201196:0.0007468622,IRC200919:0.0008620076)80:0.0004184215,(IRC200811:0.0001911692,IRC200809:0.0001497566)82:0.0001515776)71:0.0001359039,SCD2783:0.0019941242)45:0.0000020282,(IRC201383:0.0003355339,IRC200051:0.0006871797)45:0.0000028881)47:0.0000013108,IRC200910:0.0000013108)47:0.0000020260)9:0.0001338367,((((IRC201302:0.0003638987,IRC200628:0.0008432632)87:0.0000013108,SCD1087:0.0015169945)69:0.0000025362,(IRC202265:0.0013828034,PAP1053:0.0000028868)56:0.0001304609)46:0.0005154532,(PAP2856:0.0009358907,PAP212580:0.0012920099)92:0.0004067131)41:0.0000024320)38:0.0002537911,(IRC201932:0.0001376909,IRC203701:0.0002630897)94:0.0001339629)42:0.0002553101,IRC200377:0.0005213417)43:0.0001219515,(((((((IRC201447:0.0027805934,IRC201417:0.0043426486)90:0.0014072660,(SCD5347:0.0045658789,SCD5776:0.0006560819)83:0.0021461839)59:0.0000024511,SCD4304:0.0004310203)59:0.0005194394,PAP169029:0.0016522267)55:0.0000362154,((IRC201188:0.0029645444,PAP279600:0.0000019803)65:0.0002343269,PAP158442:0.0001757950)60:0.0001696577)58:0.0004480776,SCD5306:0.0004114634)24:0.0001342098,((((IRC201546:0.0003526863,PAP1748:0.0000013108)75:0.0000021047,IRC200001:0.0000013108)65:0.0002595614,SCD4346:0.0001840009)1:0.0000025289,(((IRC201527:0.0000021387,PAP139245:0.0000013108)25:0.0000011520,PAP119271:0.0003435047)14:0.0001342957,((((PAP3328:0.0011666803,SCD4093:0.0006859344)21:0.0000020815,SCD4246:0.0001261595)21:0.0000029662,SCD5819:0.0005117456)21:0.0001262987,SCD1827:0.0002570744)36:0.0002535550)1:0.0000024002)21:0.0001289414)30:0.0000029501)44:0.0000020324,(IRC200501:0.0002884699,IRC200537:0.0002627971)70:0.0002676752)42:0.0001253514,SCD1440:0.0002571492)16:0.0000029312)1:0.0000012997,IRC201547:0.0002562298)11:0.0001275403,((((((((((((IRC204038:0.0010924221,IRC201455:0.0011885548)88:0.0004959759,IRC200185:0.0005204496)64:0.0002999625,PAP2849:0.0008078015)53:0.0001363351,((IRC203868:0.0026999080,(IRC200035:0.0021124125,PAP276352:0.0001583358)100:0.0009563455)60:0.0005489756,(PAP249579:0.0000027302,((PAP224139:0.0010523261,PAP275690:0.0005730943)80:0.0000024409,PAP273531:0.0000022443)80:0.0001799231)61:0.0002203906)49:0.0002038175)44:0.0000025422,PAP3486:0.0001393764)50:0.0003921865,PAP151493:0.0000013108)44:0.0001271468,((IRC201184:0.0000013108,((IRC201170:0.0000013108,(PAP189744:0.0001368995,PAP136289:0.0003786228)73:0.0001785114)50:0.0000022518,PAP202064:0.0005663927)54:0.0001305950)13:0.0000018255,(((IRC201525:0.0002834409,(SCD2827:0.0008164833,SCD1143:0.0006146584)75:0.0004039810)67:0.0000021898,IRC201179:0.0011077888)54:0.0001519696,PAP217163:0.0006686653)62:0.0004628579)11:0.0000029334)20:0.0001215738,IRC204008:0.0000013108)18:0.0000028854,((IRC201195:0.0000020075,PAP3481:0.0005381452)65:0.0001593364,IRC203893:0.0000024255)62:0.0001270673)14:0.0000028261,((PAP215554:0.0003969881,SCD4446:0.0006619366)32:0.0000022454,SBX1726:0.0005332649)42:0.0000025913)20:0.0001271196,(((((((IRC203865:0.0051355659,IRC201186:0.0003368125)67:0.0012161308,(IRC200861:0.0020284420,(IRC201514:0.0030807575,(IRC200151:0.0047337424,SCD2303:0.0010312005)46:0.0007751475)45:0.0005692264)80:0.0006999501)61:0.0002869163,IRC200876:0.0020556356)60:0.0009892377,(((((IRC202332:0.0010342814,IRC203876:0.0019409556)65:0.0005190116,SBX1759:0.0003179377)65:0.0003675794,(IRC203864:0.0007661275,IRC200252:0.0004341112)60:0.0002901591)51:0.0001322071,SCD5136:0.0014955508)60:0.0002840008,(IRC203709:0.0010897302,PAP130494:0.0005481414)71:0.0005398829)60:0.0000659339)12:0.0001508983,((PAP253823:0.0006709239,PAP166161:0.0000013108)67:0.0001319202,PAP1446:0.0005593865)59:0.0002636760)4:0.0000023383,(PAP192604:0.0002681840,PAP240064:0.0000019850)91:0.0002678541)7:0.0000020152,(PAP243206:0.0000020793,PAP156077:0.0000019749)97:0.0002650232)17:0.0000028093)2:0.0000025678,(PAP274737:0.0003918639,PAP0517:0.0001315220)4:0.0000029151)1:0.0000028743)23:0.0000021459,IRC200999:0.0000013108)25:0.0001021933,PAP176071:0.0001626899)36:0.0000226598,IRC200387:0.0006588962)10:0.0000020319)15:0.0000026136,((((((((((IRC204033:0.0004107588,(IRC201551:0.0005772423,SCD4083:0.0009015874)90:0.0005657058)84:0.0003989902,PAP271689:0.0003525430)38:0.0000020738,(IRC200619:0.0002780195,PAP170627:0.0002807821)38:0.0000013108)45:0.0000023797,IRC201409:0.0000022604)56:0.0001254758,IRC201399:0.0000020436)5:0.0000021705,(((((IRC201310:0.0001619507,((IRC201400:0.0002547461,SCD1592:0.0003977019)57:0.0000029284,IRC201515:0.0002543459)63:0.0000973086)25:0.0000262805,IRC200003:0.0002875697)10:0.0000023648,PAP251818:0.0000013108)9:0.0000023531,((IRC201519:0.0002666464,PAP239709:0.0001303262)17:0.0000013108,PAP279346:0.0001377063)13:0.0000024475)8:0.0000025213,IRC201321:0.0000013108)9:0.0000027889)6:0.0000019834,PAP136513:0.0005628237)35:0.0001283082,((IRC200150:0.0001396627,PAP225229:0.0001323123)56:0.0001274406,(PAP2250:0.0000024147,(PAP2709:0.0001412080,PAP3478:0.0004124116)74:0.0000013108)59:0.0000021287)39:0.0001273566)14:0.0000029460,(((((((((IRC200327:0.0000013108,IRC200157:0.0005445489)89:0.0000013108,IRC200206:0.0000013108)89:0.0001228265,IRC203871:0.0000013108)93:0.0000104909,IRC200314:0.0001323611)79:0.0000013108,IRC200198:0.0000013108)79:0.0000013108,IRC200199:0.0001307139)79:0.0000023581,(IRC201939:0.0000013108,IRC200592:0.0000013108)81:0.0000028638)83:0.0001275923,PAP103282:0.0001297857)6:0.0000028876,((((((IRC201809:0.0004072886,(((IRC200263:0.0009576829,((IRC200187:0.0008267988,IRC200179:0.0009956926)98:0.0004051907,IRC200173:0.0000029538)94:0.0001361311)62:0.0000029083,IRC200593:0.0000013108)73:0.0001366976,(PAP200377:0.0001409286,PAP263452:0.0000020184)100:0.0002702790)60:0.0000026780)63:0.0001378900,PAP112408:0.0004122264)59:0.0000020433,IRC200274:0.0002670274)55:0.0000020387,SCD5926:0.0001321747)57:0.0000013108,PAP124083:0.0001307725)56:0.0000013108,(PAP234883:0.0001371490,PAP251406:0.0000027682)100:0.0001282003)34:0.0000028082)7:0.0000028303)22:0.0000027786,SBX1821:0.0002587460)57:0.0001280360)42:0.0001277293,(IRC201439:0.0001286116,(((PAP2887:0.0000013108,PAP2033:0.0000013108)78:0.0000013108,PAP1675:0.0000013108)53:0.0000027118,PAP171724:0.0006603084)62:0.0001268811)18:0.0000029158)8:0.0000013108,IRC201180:0.0000013108)6:0.0000028082,((((IRC204037:0.0000013108,PAP209498:0.0001338210)40:0.0000013108,IRC201163:0.0000013108)37:0.0000013108,(((((IRC201472:0.0009965348,SCD5827:0.0002826068)61:0.0002780805,((IRC202032:0.0005664232,PAP1122:0.0001431946)97:0.0002808244,((IRC201719:0.0000013108,PAP170297:0.0008165216)88:0.0000019777,PAP197677:0.0005961749)49:0.0002597345)24:0.0000013108)19:0.0000013108,SCD4478:0.0001484293)23:0.0000013108,IRC201185:0.0002700499)13:0.0000013108,IRC201205:0.0001353670)25:0.0000013108)24:0.0000019841,((((IRC200788:0.0001521892,IRC200839:0.0002886154)74:0.0000013108,IRC200784:0.0000013108)67:0.0000028433,(IRC200769:0.0002794067,IRC200750:0.0001376982)88:0.0001328638)73:0.0001286671,((IRC200302:0.0000020034,IRC200149:0.0002573736)75:0.0001283550,IRC201194:0.0001312549)64:0.0000019949)60:0.0001303954)23:0.0000027435)11:0.0000013108,IRC201202:0.0001274706)52:0.0002568246,(IRC201151:0.0002773582,PAP0734:0.0000013108)64:0.0000028109)24:0.0000020145,(((IRC204031:0.0001336550,SBX1967:0.0001311214)26:0.0000013108,(IRC204007:0.0002894504,SCD2518:0.0004000169)5:0.0000019869)18:0.0000029288,IRC204039:0.0000013108)18:0.0000028360)51:0.0001275958,(IRC202304:0.0005369762,(PAP297748:0.0000013108,((SCD1931:0.0000013108,SCD1135:0.0001344097)100:0.0001333033,(SBX1919:0.0005348470,SBX1307:0.0005694952)74:0.0000013108)58:0.0000024884)59:0.0000027847)64:0.0000021126)28:0.0000028269,SCD1183:0.0000013108)31:0.0000025889,((PAP225211:0.0002797465,SCD4710:0.0001332421)68:0.0001267597,SCD6041:0.0002579711)65:0.0001295055)59:0.0001272902,(((((IRC201438:0.0001808501,IRC201933:0.0001428954)100:0.0004300348,PAP0473:0.0001521171)21:0.0000022677,PAP244175:0.0000013108)20:0.0000013108,IRC200330:0.0005469984)17:0.0000013108,PAP3609:0.0000013108)60:0.0000029357);';
#my $tree2 = '(IRC202182_data_A1,IRC201928_data_A1,IRC200618_data_A1,PAP187342_data_A1,IRC200557_data_A1,IRC200561_data_A1,PAP2331_data_A1,PAP194129_data_A1,PAP274894_data_A1,PAP2312_data_A1,PAP3421_data_A1,IRC200732_data_A1,PAP216556_data_A1,PAP2082_data_A1,SCD1828_data_A1,PAP237154_data_A1,IRC201660_data_A1,PAP164511_data_A1,SBX1718_data_A1,PAP175524_data_A1,PAP100889_data_A1,IRC202245_data_A1,IRC204009_data_A1,PAP183098_data_A1,PAP2925_data_A1,PAP179671_data_A1,IRC202257_data_A1,SCD5948_data_A1,SCD5902_data_A1,PAP196783_data_A1,PAP271109_data_A1,SBX1796_data_A1,PAP266429_data_A1,IRC201017_data_A1,SBX1898_data_A1,SCD3621_data_A1,SCD3408_data_A1,PAP2142_data_A1,PAP127360_data_A1,IRC203742_data_A1,PAP109646_data_A1,PAP3586_data_A1,PAP288968_data_A1,PAP265254_data_A1,PAP193865_data_A1,SBX1773_data_A1,PAP3294_data_A1,IRC201768_data_A1,IRC200927_data_A1,IRC201238_data_A1,PAP100343_data_A1,IRC200990_data_A1,IRC201228_data_A1,PAP234542_data_A1,PAP178953_data_A1,IRC200937_data_A1,IRC201096_data_A1,IRC201030_data_A1,PAP248692_data_A1,IRC200797_data_A1,PAP193609_data_A1,PAP208152_data_A1,PAP267714_data_A1,PAP233467_data_A1,IRC200710_data_A1,SCD5537_data_A1,IRC201026_data_A1,IRC202393_data_A1,IRC201668_data_A1,SCD5527_data_A1,PAP242505_data_A1,PAP242801_data_A1,PAP210576_data_A1,PAP244659_data_A1,PAP154263_data_A1,IRC201221_data_A1,IRC201274_data_A1,PAP242284_data_A1,PAP2929_data_A1,PAP222963_data_A1,SCD4074_data_A1,PAP105583_data_A1,PAP278860_data_A1,PAP198347_data_A1,IRC200499_data_A1,PAP257216_data_A1,IRC201862_data_A1,IRC201033_data_A1,IRC201475_data_A1,IRC201273_data_A1,IRC202334_data_A1,IRC201230_data_A1,PAP237734_data_A1,PAP259948_data_A1,PAP270165_data_A1,PAP216820_data_A1,IRC202340_data_A1,IRC201365_data_A1,IRC202329_data_A1,IRC202336_data_A1,PAP0287_data_A1,IRC203747_data_A1,PAP189915_data_A1,PAP100309_data_A1,PAP159893_data_A1,PAP0792_data_A1,IRC201130_data_A1,IRC203688_data_A1,IRC201245_data_A1,SCD1445_data_A1,SCD1206_data_A1,PAP245109_data_A1,PAP159777_data_A1,SCD1900_data_A1,IRC202384_data_A1,IRC200009_data_A1,SCD1203_data_A1,IRC201629_data_A1,IRC201078_data_A1,IRC200891_data_A1,IRC201048_data_A1,SCD2724_data_A1,IRC203727_data_A1,SCD1835_data_A1,SCD3000_data_A1,PAP165038_data_A1,SCD4356_data_A1,IRC200830_data_A1,PAP278137_data_A1,IRC201144_data_A1,IRC201448_data_A1,IRC201426_data_A1,PAP144319_data_A1,IRC201290_data_A1,PAP272311_data_A1,IRC200955_data_A1,IRC201959_data_A1,IRC200991_data_A1,SCD5217_data_A1,IRC203719_data_A1,PAP279764_data_A1,IRC201041_data_A1,IRC200939_data_A1,IRC201055_data_A1,SCD1149_data_A1,PAP289437_data_A1,SCD2934_data_A1,SCD2720_data_A1,IRC201034_data_A1,IRC200803_data_A1,PAP112931_data_A1,PAP294149_data_A1,SCD2296_data_A1,PAP144539_data_A1,PAP123034_data_A1,SCD1041_data_A1,PAP124151_data_A1,PAP2863_data_A1,PAP163337_data_A1,PAP0825_data_A1,PAP257737_data_A1,PAP153535_data_A1,PAP172364_data_A1,SCD1052_data_A1,PAP288947_data_A1,IRC202234_data_A1,PAP113484_data_A1,IRC202345_data_A1,PAP257268_data_A1,PAP184633_data_A1,PAP279413_data_A1,SCD5725_data_A1,IRC201682_data_A1,PAP150023_data_A1,PAP105906_data_A1,SCD5770_data_A1,PAP169234_data_A1,IRC202320_data_A1,IRC202341_data_A1,SCD1056_data_A1,IRC200138_data_A1,PAP241515_data_A1,PAP180920_data_A1,IRC203721_data_A1,PAP289613_data_A1,PAP604547_data_A1,PAP215097_data_A1,PAP120836_data_A1,IRC203723_data_A1,PAP152728_data_A1,PAP174791_data_A1,PAP229378_data_A1,PAP2204_data_A1,PAP1166_data_A1,PAP148748_data_A1,PAP2268_data_A1,PAP184455_data_A1,PAP119879_data_A1,PAP258009_data_A1,SCD5384_data_A1,PAP180976_data_A1,PAP143872_data_A1,SBX1959_data_A1,SCD2408_data_A1,PAP167532_data_A1,PAP295657_data_A1,PAP124311_data_A1,SCD3577_data_A1,PAP271107_data_A1,PAP2136_data_A1,PAP168060_data_A1,SBX1157_data_A1,SCD4224_data_A1,PAP257999_data_A1,PAP2106_data_A1,PAP132158_data_A1,PAP260174_data_A1,PAP221500_data_A1,PAP272152_data_A1,PAP263008_data_A1,PAP278715_data_A1,PAP2305_data_A1,PAP2326_data_A1,PAP188486_data_A1,PAP191514_data_A1,PAP216560_data_A1,PAP214630_data_A1,PAP0768_data_A1,IRC203781_data_A1,PAP2459_data_A1,SCD4017_data_A1,PAP189881_data_A1,PAP101168_data_A1,PAP271390_data_A1,PAP187027_data_A1,PAP226829_data_A1,PAP158189_data_A1,PAP253103_data_A1,PAP3090_data_A1,PAP3423_data_A1,IRC203711_data_A1,IRC202216_data_A1,SCD2860_data_A1,PAP2566_data_A1,PAP204982_data_A1,PAP198020_data_A1,PAP157565_data_A1,PAP278052_data_A1,PAP268331_data_A1,PAP172056_data_A1,PAP296690_data_A1,PAP228835_data_A1,IRC200668_data_A1,IRC203816_data_A1,PAP250504_data_A1,SCD3211_data_A1,SBX1938_data_A1,SCD5649_data_A1,SCD1791_data_A1,PAP284250_data_A1,IRC200355_data_A1,PAP0177_data_A1,IRC200691_data_A1,PAP2508_data_A1,IRC201317_data_A1,PAP283136_data_A1,PAP274550_data_A1,PAP217307_data_A1,PAP121535_data_A1,PAP220463_data_A1,IRC202232_data_A1,PAP202608_data_A1,PAP273575_data_A1,PAP241489_data_A1,PAP2881_data_A1,IRC201721_data_A1,PAP173143_data_A1,PAP152492_data_A1,SCD2241_data_A1,SCD1936_data_A1,PAP0965_data_A1,PAP223529_data_A1,SCD4749_data_A1,SCD5305_data_A1,PAP3341_data_A1,PAP3572_data_A1,PAP108199_data_A1,PAP1086_data_A1,PAP1049_data_A1,PAP3469_data_A1,IRC201336_data_A1,PAP197357_data_A1,PAP268354_data_A1,PAP250723_data_A1,SCD4122_data_A1,PAP167598_data_A1,PAP109894_data_A1,PAP135846_data_A1,IRC201704_data_A1,PAP195777_data_A1,PAP2389_data_A1,SCD5442_data_A1,PAP2763_data_A1,PAP121504_data_A1,PAP279692_data_A1,PAP181718_data_A1,IRC201451_data_A1,PAP116649_data_A1,PAP2889_data_A1,SBX1975_data_A1,IRC203813_data_A1,SCD1369_data_A1,SCD5431_data_A1,PAP168093_data_A1,PAP227299_data_A1,PAP100209_data_A1,PAP150569_data_A1,SCD1131_data_A1,PAP3300_data_A1,IRC200506_data_A1,PAP106958_data_A1,PAP193457_data_A1,PAP3368_data_A1,IRC200862_data_A1,IRC202346_data_A1,IRC201012_data_A1,IRC202348_data_A1,PAP147486_data_A1,IRC201662_data_A1,IRC201882_data_A1,IRC201218_data_A1,PAP185909_data_A1,IRC201459_data_A1,IRC200669_data_A1,IRC200753_data_A1,PAP160974_data_A1,PAP603828_data_A1,IRC200835_data_A1,IRC200931_data_A1,PAP1230_data_A1,IRC200902_data_A1,IRC201244_data_A1,SCD4325_data_A1,IRC202326_data_A1,IRC202328_data_A1,IRC200923_data_A1,IRC200906_data_A1,PAP251388_data_A1,IRC201088_data_A1,PAP194109_data_A1,PAP206715_data_A1,PAP114025_data_A1,PAP2900_data_A1,PAP258949_data_A1,PAP287182_data_A1,PAP3062_data_A1,IRC200868_data_A1,IRC200102_data_A1,IRC200896_data_A1,IRC201227_data_A1,IRC201225_data_A1,PAP148419_data_A1,IRC201304_data_A1,PAP1648_data_A1,PAP2652_data_A1,IRC200589_data_A1,PAP3393_data_A1,SCD5833_data_A1,IRC202210_data_A1,PAP2685_data_A1,IRC200635_data_A1,PAP2229_data_A1,IRC201047_data_A1,PAP114497_data_A1,SCD1612_data_A1,PAP2610_data_A1,PAP3372_data_A1,PAP180866_data_A1,PAP180927_data_A1,PAP143607_data_A1,PAP193335_data_A1,PAP3080_data_A1,PAP215751_data_A1,PAP108034_data_A1,PAP153086_data_A1,PAP156673_data_A1,PAP193971_data_A1,PAP2939_data_A1,PAP136387_data_A1,PAP237980_data_A1,PAP2614_data_A1,PAP119202_data_A1,PAP2834_data_A1,PAP3216_data_A1,PAP288090_data_A1,SCD2838_data_A1,PAP3365_data_A1,PAP295157_data_A1,PAP249978_data_A1,PAP140490_data_A1,PAP188349_data_A1,PAP250711_data_A1,PAP269309_data_A1,PAP191574_data_A1,PAP0712_data_A1,PAP224779_data_A1,PAP0690_data_A1,PAP283982_data_A1,PAP215719_data_A1,SCD4759_data_A1,PAP2202_data_A1,SBX1803_data_A1,PAP3489_data_A1,PAP2061_data_A1,PAP248185_data_A1,PAP264779_data_A1,PAP3474_data_A1,PAP102722_data_A1,PAP199179_data_A1,PAP270665_data_A1,PAP162033_data_A1,PAP155026_data_A1,SCD1042_data_A1,PAP144022_data_A1,PAP290962_data_A1,SCD4439_data_A1,PAP220958_data_A1,PAP278087_data_A1,SCD4156_data_A1,SBX1751_data_A1,PAP195999_data_A1,PAP158638_data_A1,PAP111139_data_A1,PAP207342_data_A1,PAP277238_data_A1,PAP159327_data_A1,PAP109139_data_A1,PAP187250_data_A1,PAP155992_data_A1,PAP214363_data_A1,PAP294665_data_A1,IRC200700_data_A1,PAP129083_data_A1,PAP106905_data_A1,PAP121108_data_A1,PAP139944_data_A1,PAP244642_data_A1,PAP223477_data_A1,PAP234593_data_A1,SCD3201_data_A1,SCD5296_data_A1,PAP116565_data_A1,PAP210328_data_A1,PAP290439_data_A1,PAP226135_data_A1,IRC200765_data_A1,IRC201069_data_A1,IRC200915_data_A1,PAP3077_data_A1,PAP140743_data_A1,SCD3242_data_A1,SCD5943_data_A1,PAP2651_data_A1,PAP102474_data_A1,SCD3663_data_A1,PAP230824_data_A1,PAP3452_data_A1,PAP209872_data_A1,IRC201217_data_A1,IRC200941_data_A1,PAP250298_data_A1,IRC201265_data_A1,IRC200798_data_A1,IRC201051_data_A1,SBX1343_data_A1,SCD3123_data_A1,PAP234625_data_A1,PAP206689_data_A1,SBX1775_data_A1,SBX1234_data_A1,SBX1970_data_A1,IRC201019_data_A1,PAP109845_data_A1,PAP227183_data_A1,IRC201079_data_A1,IRC201052_data_A1,PAP137341_data_A1,PAP126732_data_A1,PAP209948_data_A1,PAP2138_data_A1,PAP215085_data_A1,PAP280920_data_A1,PAP290723_data_A1,PAP224425_data_A1,IRC201239_data_A1,PAP179101_data_A1,IRC201909_data_A1,IRC202343_data_A1,IRC202349_data_A1,IRC202347_data_A1,IRC200867_data_A1,PAP241241_data_A1,IRC200912_data_A1,IRC202374_data_A1,IRC202350_data_A1,PAP156479_data_A1,IRC200037_data_A1,IRC200090_data_A1,PAP226226_data_A1,PAP142843_data_A1,SCD5588_data_A1,IRC203791_data_A1,IRC203833_data_A1,PAP122453_data_A1,SCD4546_data_A1,IRC203795_data_A1,IRC202247_data_A1,PAP115074_data_A1,PAP294796_data_A1,IRC203690_data_A1,IRC204028_data_A1,IRC204018_data_A1,SBX1860_data_A1,IRC200718_data_A1,PAP107540_data_A1,IRC201429_data_A1,IRC200606_data_A1,PAP112989_data_A1,PAP245899_data_A1,PAP172634_data_A1,IRC201816_data_A1,PAP215543_data_A1,IRC202162_data_A1,SBX1155_data_A1,PAP2626_data_A1,IRC200519_data_A1,PAP230696_data_A1,PAP229906_data_A1,IRC200511_data_A1,PAP128294_data_A1,PAP205259_data_A1,SCD3189_data_A1,PAP120541_data_A1,IRC201343_data_A1,IRC201434_data_A1,IRC201659_data_A1,IRC200785_data_A1,SCD4453_data_A1,PAP191972_data_A1,PAP139966_data_A1,IRC203673_data_A1,PAP3541_data_A1,SCD2844_data_A1,PAP105930_data_A1,SCD5705_data_A1,PAP170305_data_A1,PAP291410_data_A1,PAP119184_data_A1,PAP0305_data_A1,PAP188043_data_A1,PAP282765_data_A1,PAP2145_data_A1,IRC201465_data_A1,SCD2797_data_A1,PAP258408_data_A1,PAP188426_data_A1,IRC202324_data_A1,SCD3016_data_A1,SCD3018_data_A1,PAP174544_data_A1,IRC201307_data_A1,PAP212383_data_A1,PAP109926_data_A1,PAP230635_data_A1,PAP247810_data_A1,PAP157950_data_A1,IRC201794_data_A1,PAP143652_data_A1,SBX1132_data_A1,SBX1146_data_A1,SBX2255_data_A1,SCD2523_data_A1,PAP280572_data_A1,SCD3629_data_A1,SCD1031_data_A1,IRC203788_data_A1,IRC203828_data_A1,PAP1356_data_A1,PAP2399_data_A1,PAP1254_data_A1,PAP2806_data_A1,PAP184245_data_A1,PAP232840_data_A1,PAP138583_data_A1,PAP134796_data_A1,PAP219722_data_A1,PAP103889_data_A1,PAP149213_data_A1,PAP258084_data_A1,IRC202206_data_A1,SCD3103_data_A1,PAP115002_data_A1,PAP181487_data_A1,SBX1263_data_A1,SBX1842_data_A1,PAP2231_data_A1,PAP164449_data_A1,PAP2091_data_A1,PAP189761_data_A1,SCD5619_data_A1,IRC203817_data_A1,PAP215923_data_A1,PAP1760_data_A1,PAP276225_data_A1,PAP3270_data_A1,IRC201688_data_A1,SCD5805_data_A1,PAP214747_data_A1,SCD5236_data_A1,PAP0897_data_A1,PAP221280_data_A1,PAP277724_data_A1,PAP223549_data_A1,PAP198679_data_A1,SCD4416_data_A1,IRC200775_data_A1,SBX1848_data_A1,IRC203870_data_A1,PAP3530_data_A1,PAP140410_data_A1,PAP2840_data_A1,PAP208104_data_A1,PAP3376_data_A1,PAP249122_data_A1,PAP2896_data_A1,IRC203783_data_A1,PAP256526_data_A1,PAP177936_data_A1,SCD3716_data_A1,SCD5428_data_A1,SCD4619_data_A1,SCD5135_data_A1,PAP235744_data_A1,PAP2221_data_A1,SCD2999_data_A1,PAP160925_data_A1,PAP276331_data_A1,SCD1410_data_A1,PAP263402_data_A1,SCD1233_data_A1,IRC203745_data_A1,PAP191577_data_A1,PAP234771_data_A1,PAP3414_data_A1,SCD2323_data_A1,SCD2000_data_A1,SCD3243_data_A1,PAP113644_data_A1,IRC203812_data_A1,IRC201209_data_A1,IRC200007_data_A1,PAP266467_data_A1,PAP3494_data_A1,PAP106208_data_A1,SCD2320_data_A1,SBX1022_data_A1,PAP102109_data_A1,PAP3361_data_A1,PAP2339_data_A1,IRC203825_data_A1,IRC203698_data_A1,IRC203855_data_A1,PAP252910_data_A1,PAP251250_data_A1,PAP163229_data_A1,PAP246537_data_A1,PAP2766_data_A1,SBX1106_data_A1,IRC203780_data_A1,PAP1589_data_A1,IRC202317_data_A1,IRC201910_data_A1,IRC201601_data_A1,IRC201903_data_A1,SCD1367_data_A1,IRC201661_data_A1,PAP274424_data_A1,PAP245550_data_A1,PAP2104_data_A1,SCD5761_data_A1,IRC202389_data_A1,IRC201691_data_A1,PAP124330_data_A1,PAP166597_data_A1,PAP253673_data_A1,PAP2311_data_A1,IRC202171_data_A1,PAP138554_data_A1,IRC201675_data_A1,PAP144034_data_A1,PAP1539_data_A1,PAP2805_data_A1,IRC202352_data_A1,IRC202178_data_A1,IRC201916_data_A1,PAP2223_data_A1,PAP0188_data_A1,SCD5874_data_A1,PAP225825_data_A1,SCD4096_data_A1,IRC200060_data_A1,PAP2918_data_A1,SBX2264_data_A1,PAP273665_data_A1,PAP268431_data_A1,PAP2989_data_A1,PAP159524_data_A1,IRC201380_data_A1,IRC202253_data_A1,PAP172822_data_A1,PAP2858_data_A1,PAP144431_data_A1,IRC200514_data_A1,PAP254349_data_A1,IRC202155_data_A1,PAP120552_data_A1,SBX1374_data_A1,PAP1836_data_A1,IRC202243_data_A1,PAP212933_data_A1,PAP264537_data_A1,PAP3344_data_A1,IRC202139_data_A1,PAP188095_data_A1,IRC201703_data_A1,IRC202236_data_A1,IRC201485_data_A1,PAP1221_data_A1,SCD3778_data_A1,IRC202044_data_A1,PAP196477_data_A1,IRC201645_data_A1,PAP174390_data_A1,PAP164259_data_A1,PAP172311_data_A1,PAP2449_data_A1,SCD2923_data_A1,IRC202183_data_A1,PAP271365_data_A1,IRC201700_data_A1,SBX1873_data_A1,IRC201690_data_A1,IRC202173_data_A1,SCD1372_data_A1,IRC200369_data_A1,IRC200404_data_A1,PAP2949_data_A1,IRC201481_data_A1,SCD1188_data_A1,SCD5097_data_A1,IRC201963_data_A1,PAP2942_data_A1,SCD5257_data_A1,PAP141123_data_A1,IRC200978_data_A1,IRC200087_data_A1,IRC200994_data_A1,IRC202278_data_A1,IRC200948_data_A1,PAP125559_data_A1,PAP106425_data_A1,PAP0363_data_A1,PAP1014_data_A1,PAP3330_data_A1,PAP214868_data_A1,IRC200897_data_A1,IRC201358_data_A1,PAP158704_data_A1,IRC200874_data_A1,IRC203867_data_A1,IRC200393_data_A1,IRC200754_data_A1,IRC200986_data_A1,IRC200954_data_A1,IRC200917_data_A1,IRC200799_data_A1,IRC202362_data_A1,IRC200767_data_A1,IRC200795_data_A1,IRC202391_data_A1,IRC200976_data_A1,PAP2291_data_A1,IRC201443_data_A1,IRC201633_data_A1,SCD2433_data_A1,IRC201951_data_A1,IRC200870_data_A1,IRC201962_data_A1,IRC202203_data_A1,SBX1038_data_A1,IRC201711_data_A1,SCD3736_data_A1,IRC200772_data_A1,IRC201098_data_A1,IRC200780_data_A1,PAP262967_data_A1,PAP136323_data_A1,IRC200829_data_A1,PAP255873_data_A1,IRC201216_data_A1,IRC202111_data_A1,IRC201726_data_A1,PAP2930_data_A1,IRC202397_data_A1,IRC200382_data_A1,IRC200389_data_A1,SCD2969_data_A1,IRC202327_data_A1,IRC202380_data_A1,IRC202392_data_A1,IRC202322_data_A1,IRC202385_data_A1,IRC202300_data_A1,IRC202379_data_A1,IRC202303_data_A1,IRC200357_data_A1,PAP109325_data_A1,IRC202287_data_A1,IRC202295_data_A1,PAP2379_data_A1,IRC200985_data_A1,PAP286478_data_A1,IRC201095_data_A1,PAP220157_data_A1,IRC202388_data_A1,IRC200943_data_A1,PAP166332_data_A1,IRC200768_data_A1,IRC200810_data_A1,PAP234314_data_A1,IRC201022_data_A1,IRC200879_data_A1,PAP126180_data_A1,PAP112776_data_A1,PAP277279_data_A1,PAP269671_data_A1,PAP241653_data_A1,IRC200844_data_A1,SBX1812_data_A1,IRC201237_data_A1,PAP253333_data_A1,PAP283076_data_A1,IRC200886_data_A1,SCD4116_data_A1,IRC202394_data_A1,IRC200838_data_A1,IRC201129_data_A1,IRC200813_data_A1,IRC200742_data_A1,IRC201128_data_A1,SCD2814_data_A1,IRC201099_data_A1,IRC200949_data_A1,IRC201006_data_A1,IRC201722_data_A1,IRC201839_data_A1,PAP208403_data_A1,IRC200898_data_A1,IRC201138_data_A1,IRC200953_data_A1,PAP1056_data_A1,PAP248343_data_A1,PAP105763_data_A1,IRC200905_data_A1,IRC201597_data_A1,IRC201077_data_A1,IRC203707_data_A1,IRC203714_data_A1,IRC203794_data_A1,IRC200676_data_A1,IRC200843_data_A1,PAP175456_data_A1,IRC200027_data_A1,PAP144602_data_A1,IRC200824_data_A1,IRC201049_data_A1,SCD1177_data_A1,IRC200819_data_A1,PAP169885_data_A1,PAP126543_data_A1,IRC203854_data_A1,IRC200826_data_A1,IRC200935_data_A1,IRC200856_data_A1,IRC202381_data_A1,PAP235228_data_A1,IRC202401_data_A1,IRC201899_data_A1,IRC202395_data_A1,SCD3832_data_A1,SCD4491_data_A1,IRC202344_data_A1,IRC202311_data_A1,IRC202370_data_A1,SCD4294_data_A1,SCD4712_data_A1,PAP215481_data_A1,PAP273624_data_A1,SCD1179_data_A1,IRC202365_data_A1,PAP125306_data_A1,IRC202338_data_A1,IRC202382_data_A1,IRC202369_data_A1,IRC201116_data_A1,PAP172629_data_A1,SCD1094_data_A1,IRC200482_data_A1,SCD4153_data_A1,PAP280044_data_A1,PAP220984_data_A1,SCD2334_data_A1,SCD4175_data_A1,IRC202363_data_A1,PAP205492_data_A1,PAP3463_data_A1,PAP2947_data_A1,SCD2696_data_A1,SCD2938_data_A1,IRC202080_data_A1,PAP135649_data_A1,SCD6054_data_A1,PAP262443_data_A1,PAP176353_data_A1,SBX1891_data_A1,SCD1104_data_A1,PAP3082_data_A1,PAP187394_data_A1,IRC200415_data_A1,PAP114992_data_A1,PAP181314_data_A1,IRC201706_data_A1,PAP226702_data_A1,PAP130801_data_A1,PAP260273_data_A1,IRC200403_data_A1,PAP2679_data_A1,PAP150772_data_A1,SCD5899_data_A1,IRC201780_data_A1,PAP109766_data_A1,PAP245984_data_A1,PAP175068_data_A1,PAP127435_data_A1,PAP154098_data_A1,PAP213652_data_A1,PAP104112_data_A1,PAP272606_data_A1,PAP135631_data_A1,PAP3460_data_A1,PAP226097_data_A1,PAP167900_data_A1,PAP206423_data_A1,SCD1805_data_A1,SCD1489_data_A1,IRC201788_data_A1,SCD1850_data_A1,PAP201527_data_A1,SCD1892_data_A1,PAP132791_data_A1,PAP197055_data_A1,PAP165100_data_A1,PAP298145_data_A1,PAP126815_data_A1,SCD5565_data_A1,PAP113796_data_A1,PAP2372_data_A1,SBX1896_data_A1,PAP146851_data_A1,PAP137961_data_A1,SCD4169_data_A1,PAP184833_data_A1,PAP245537_data_A1,IRC200758_data_A1,PAP116651_data_A1,PAP2417_data_A1,PAP1803_data_A1,PAP232818_data_A1,PAP153940_data_A1,SCD3135_data_A1,PAP188089_data_A1,SCD5546_data_A1,PAP232351_data_A1,PAP203440_data_A1,SCD5122_data_A1,PAP198995_data_A1,PAP178164_data_A1,PAP288433_data_A1,PAP167692_data_A1,IRC201748_data_A1,PAP203364_data_A1,IRC200716_data_A1,PAP159036_data_A1,PAP123129_data_A1,PAP133078_data_A1,SCD4244_data_A1,PAP232070_data_A1,PAP167608_data_A1,SCD1624_data_A1,PAP112760_data_A1,PAP273209_data_A1,SCD1254_data_A1,SCD2681_data_A1,PAP231504_data_A1,SCD5628_data_A1,SCD1276_data_A1,IRC203746_data_A1,SCD1377_data_A1,PAP3386_data_A1,IRC200504_data_A1,PAP2275_data_A1,PAP235169_data_A1,IRC200354_data_A1,PAP167040_data_A1,PAP2905_data_A1,PAP235993_data_A1,PAP231183_data_A1,PAP140085_data_A1,PAP145873_data_A1,PAP293019_data_A1,PAP183651_data_A1,SCD3065_data_A1,SBX1551_data_A1,SBX1339_data_A1,PAP267541_data_A1,SCD2669_data_A1,SCD2645_data_A1,PAP222742_data_A1,PAP207614_data_A1,IRC202201_data_A1,SCD2386_data_A1,SBX1956_data_A1,SCD1424_data_A1,SCD4085_data_A1,PAP180132_data_A1,PAP298680_data_A1,PAP298709_data_A1,PAP2689_data_A1,IRC201604_data_A1,SCD2251_data_A1,PAP116280_data_A1,PAP3048_data_A1,SBX2310_data_A1,IRC200650_data_A1,PAP236878_data_A1,PAP1686_data_A1,PAP161825_data_A1,PAP178249_data_A1,PAP195083_data_A1,IRC200807_data_A1,SCD1030_data_A1,PAP282507_data_A1,PAP201590_data_A1,PAP200626_data_A1,PAP205830_data_A1,PAP222030_data_A1,PAP130623_data_A1,PAP2547_data_A1,PAP127285_data_A1,PAP2115_data_A1,PAP213795_data_A1,PAP199000_data_A1,PAP169705_data_A1,PAP241490_data_A1,PAP123927_data_A1,IRC200614_data_A1,IRC203661_data_A1,SCD1268_data_A1,SCD1198_data_A1,SCD3048_data_A1,SCD3544_data_A1,IRC201303_data_A1,PAP190102_data_A1,IRC201250_data_A1,PAP114578_data_A1,PAP196636_data_A1,PAP192070_data_A1,PAP141034_data_A1,SCD3623_data_A1,IRC200621_data_A1,PAP144671_data_A1,PAP207707_data_A1,PAP182349_data_A1,IRC203866_data_A1,PAP125987_data_A1,PAP3589_data_A1,SCD1647_data_A1,SCD3685_data_A1,SCD4436_data_A1,PAP214162_data_A1,PAP131540_data_A1,PAP161835_data_A1,PAP0128_data_A1,SCD1542_data_A1,SCD3182_data_A1,SCD4049_data_A1,SCD5114_data_A1,IRC203722_data_A1,PAP252513_data_A1,SCD6026_data_A1,PAP111293_data_A1,PAP227800_data_A1,SCD1966_data_A1,PAP218886_data_A1,PAP226842_data_A1,PAP261654_data_A1,PAP267243_data_A1,PAP1943_data_A1,PAP135059_data_A1,PAP211704_data_A1,PAP285472_data_A1,PAP108043_data_A1,PAP137276_data_A1,PAP244721_data_A1,PAP128329_data_A1,SCD4016_data_A1,PAP192848_data_A1,PAP239244_data_A1,PAP243826_data_A1,PAP231133_data_A1,PAP148670_data_A1,PAP267386_data_A1,SCD1343_data_A1,PAP151179_data_A1,PAP151636_data_A1,PAP2548_data_A1,SCD5624_data_A1,PAP183989_data_A1,SBX2336_data_A1,PAP295991_data_A1,SCD1533_data_A1,PAP206449_data_A1,PAP206726_data_A1,SCD5866_data_A1,SBX1923_data_A1,PAP276031_data_A1,IRC201021_data_A1,SBX1320_data_A1,PAP0983_data_A1,PAP184274_data_A1,PAP182284_data_A1,PAP1149_data_A1,PAP2984_data_A1,SCD1481_data_A1,IRC201372_data_A1,PAP2832_data_A1,PAP238329_data_A1,SCD1854_data_A1,SCD1497_data_A1,PAP3286_data_A1,PAP163226_data_A1,SCD3860_data_A1,PAP296387_data_A1,PAP160506_data_A1,IRC203692_data_A1,PAP218052_data_A1,PAP3553_data_A1,SCD4278_data_A1,SCD5608_data_A1,IRC202103_data_A1,IRC202354_data_A1,PAP221879_data_A1,PAP160597_data_A1,SCD4627_data_A1,PAP274413_data_A1,PAP2011_data_A1,PAP2822_data_A1,PAP2504_data_A1,PAP148624_data_A1,PAP242869_data_A1,PAP258876_data_A1,SCD6010_data_A1,SCD4604_data_A1,SCD4231_data_A1,PAP201562_data_A1,PAP236481_data_A1,PAP227459_data_A1,PAP113885_data_A1,PAP2117_data_A1,PAP0693_data_A1,SCD3497_data_A1,SBX2035_data_A1,PAP135438_data_A1,PAP147134_data_A1,SBX1826_data_A1,PAP138518_data_A1,PAP269188_data_A1,SCD4058_data_A1,PAP0818_data_A1,PAP244821_data_A1,PAP232879_data_A1,PAP102227_data_A1,SBX1108_data_A1,SBX1139_data_A1,PAP2371_data_A1,SCD1586_data_A1,PAP172669_data_A1,PAP121889_data_A1,PAP2891_data_A1,PAP293854_data_A1,SBX1914_data_A1,PAP256145_data_A1,SCD2250_data_A1,SBX1350_data_A1,PAP240014_data_A1,IRC203675_data_A1,PAP106318_data_A1,SBX1868_data_A1,PAP223044_data_A1,SBX1901_data_A1,PAP190645_data_A1,PAP253959_data_A1,PAP147856_data_A1,SCD5998_data_A1,SCD5731_data_A1,PAP173122_data_A1,PAP124532_data_A1,PAP273676_data_A1,PAP107787_data_A1,PAP261261_data_A1,PAP292586_data_A1,SCD4303_data_A1,PAP125033_data_A1,PAP255921_data_A1,SCD3045_data_A1,PAP127430_data_A1,PAP127842_data_A1,SCD1820_data_A1,SCD1589_data_A1,PAP243546_data_A1,PAP124040_data_A1,PAP100016_data_A1,PAP203848_data_A1,SCD3827_data_A1,PAP258593_data_A1,PAP205459_data_A1,PAP121320_data_A1,PAP143776_data_A1,PAP190872_data_A1,PAP261676_data_A1,PAP218410_data_A1,PAP141524_data_A1,PAP224663_data_A1,PAP269067_data_A1,PAP187844_data_A1,SCD1787_data_A1,PAP215402_data_A1,PAP232828_data_A1,PAP3109_data_A1,PAP150300_data_A1,PAP251209_data_A1,PAP193983_data_A1,IRC201375_data_A1,PAP1689_data_A1,PAP182802_data_A1,PAP2666_data_A1,PAP188054_data_A1,SBX1807_data_A1,PAP233353_data_A1,SCD3412_data_A1,PAP228360_data_A1,PAP186734_data_A1,SCD1864_data_A1,PAP292837_data_A1,PAP230984_data_A1,PAP244933_data_A1,PAP222078_data_A1,PAP2337_data_A1,PAP295553_data_A1,PAP134928_data_A1,SCD1529_data_A1,PAP117561_data_A1,PAP245603_data_A1,IRC201292_data_A1,SCD4318_data_A1,PAP292884_data_A1,PAP264975_data_A1,PAP123559_data_A1,IRC202000_data_A1,PAP2384_data_A1,PAP237743_data_A1,PAP175349_data_A1,PAP287779_data_A1,PAP207796_data_A1,PAP181659_data_A1,PAP223687_data_A1,SCD4480_data_A1,PAP2780_data_A1,PAP283665_data_A1,SCD1855_data_A1,PAP2183_data_A1,PAP0941_data_A1,SBX1195_data_A1,PAP3482_data_A1,PAP263901_data_A1,PAP230907_data_A1,PAP140310_data_A1,SBX1335_data_A1,PAP220455_data_A1,SCD3727_data_A1,SCD3032_data_A1,SCD5134_data_A1,SCD3088_data_A1,SCD2725_data_A1,PAP255526_data_A1,PAP120388_data_A1,PAP232872_data_A1,PAP250755_data_A1,SCD1345_data_A1,PAP178089_data_A1,SCD3140_data_A1,PAP196379_data_A1,PAP198771_data_A1,PAP281032_data_A1,IRC200114_data_A1,PAP219606_data_A1,PAP228663_data_A1,PAP188720_data_A1,PAP212210_data_A1,SCD4273_data_A1,PAP237581_data_A1,PAP144700_data_A1,PAP3043_data_A1,SCD1232_data_A1,SCD3212_data_A1,SCD1469_data_A1,SCD5324_data_A1,SCD1241_data_A1,SCD4613_data_A1,SCD3519_data_A1,PAP204158_data_A1,SCD1965_data_A1,SCD6155_data_A1,SCD5636_data_A1,SCD1692_data_A1,SCD1995_data_A1,PAP115697_data_A1,PAP0994_data_A1,PAP1084_data_A1,PAP3351_data_A1,SCD1987_data_A1,PAP2445_data_A1,SBX1144_data_A1,PAP224830_data_A1,PAP0153_data_A1,PAP243318_data_A1,PAP2345_data_A1,SBX1094_data_A1,SCD5928_data_A1,SCD2031_data_A1,PAP196560_data_A1,PAP177663_data_A1,PAP220180_data_A1,PAP191136_data_A1,PAP264789_data_A1,PAP293597_data_A1,PAP276603_data_A1,PAP212646_data_A1,PAP238978_data_A1,PAP143598_data_A1,SBX1065_data_A1,PAP282249_data_A1,PAP210245_data_A1,PAP2507_data_A1,PAP143154_data_A1,PAP125278_data_A1,PAP148652_data_A1,PAP3354_data_A1,PAP119449_data_A1,PAP280668_data_A1,PAP2757_data_A1,PAP294712_data_A1,PAP143966_data_A1,SCD1651_data_A1,PAP177141_data_A1,PAP116351_data_A1,PAP201355_data_A1,PAP154920_data_A1,SBX1769_data_A1,PAP239833_data_A1,PAP126752_data_A1,SBX1961_data_A1,PAP173583_data_A1,PAP260863_data_A1,SBX1297_data_A1,PAP116047_data_A1,PAP138166_data_A1,PAP229238_data_A1,PAP100573_data_A1,PAP132426_data_A1,PAP231876_data_A1,PAP183564_data_A1,PAP161882_data_A1,PAP1559_data_A1,PAP292049_data_A1,PAP135925_data_A1,PAP179408_data_A1,SCD1405_data_A1,PAP249458_data_A1,PAP190909_data_A1,PAP107486_data_A1,PAP159435_data_A1,PAP284973_data_A1,PAP291105_data_A1,PAP286382_data_A1,PAP151807_data_A1,IRC200745_data_A1,PAP216051_data_A1,PAP2706_data_A1,PAP256678_data_A1,PAP267761_data_A1,PAP253739_data_A1,PAP3151_data_A1,PAP3509_data_A1,PAP159401_data_A1,PAP219512_data_A1,PAP250212_data_A1,PAP266931_data_A1,IRC202277_data_A1,PAP169223_data_A1,PAP243679_data_A1,PAP245834_data_A1,PAP139864_data_A1,SCD1286_data_A1,PAP242886_data_A1,PAP115811_data_A1,PAP223339_data_A1,SCD4417_data_A1,PAP2893_data_A1,PAP207701_data_A1,PAP288276_data_A1,PAP109680_data_A1,PAP293195_data_A1,PAP151926_data_A1,PAP189092_data_A1,PAP217792_data_A1,SCD1876_data_A1,PAP178627_data_A1,SCD1760_data_A1,SCD2803_data_A1,SBX1830_data_A1,SCD3198_data_A1,PAP108564_data_A1,PAP164278_data_A1,PAP131943_data_A1,PAP242370_data_A1,PAP119907_data_A1,PAP192402_data_A1,PAP236239_data_A1,PAP170755_data_A1,SCD4059_data_A1,PAP3396_data_A1,SCD2557_data_A1,IRC200695_data_A1,PAP0297_data_A1,PAP217585_data_A1,SCD2418_data_A1,SCD2045_data_A1,SCD3153_data_A1,PAP112396_data_A1,PAP185554_data_A1,PAP189408_data_A1,PAP157312_data_A1,IRC201007_data_A1,PAP142253_data_A1,PAP254376_data_A1,SCD1084_data_A1,PAP242274_data_A1,SCD2758_data_A1,PAP217213_data_A1,PAP219063_data_A1,PAP139958_data_A1,SCD2799_data_A1,SCD1561_data_A1,SCD1773_data_A1,PAP245942_data_A1,PAP292494_data_A1,SCD2817_data_A1,PAP224015_data_A1,SCD1878_data_A1,SCD3083_data_A1,PAP265138_data_A1,SCD1072_data_A1,SCD1735_data_A1,IRC201393_data_A1,PAP298825_data_A1,PAP217866_data_A1,PAP247653_data_A1,SCD1359_data_A1,SCD3230_data_A1,IRC201671_data_A1,PAP139804_data_A1,PAP130878_data_A1,PAP195964_data_A1,PAP286446_data_A1,PAP148676_data_A1,SCD2256_data_A1,PAP2657_data_A1,PAP245781_data_A1,PAP2246_data_A1,PAP189430_data_A1,PAP190991_data_A1,PAP193339_data_A1,PAP164921_data_A1,PAP203073_data_A1,PAP3495_data_A1,PAP192526_data_A1,PAP163851_data_A1,SCD1306_data_A1,PAP233307_data_A1,PAP0944_data_A1,PAP2423_data_A1,PAP2913_data_A1,PAP3487_data_A1,PAP2467_data_A1,PAP3297_data_A1,PAP0362_data_A1,PAP1294_data_A1,PAP2157_data_A1,PAP0141_data_A1,PAP2741_data_A1,PAP256757_data_A1,PAP134624_data_A1,PAP257738_data_A1,PAP295996_data_A1,SCD1059_data_A1,PAP111722_data_A1,PAP262623_data_A1,PAP163870_data_A1,SCD5121_data_A1,SBX1169_data_A1,PAP2206_data_A1,PAP117468_data_A1,SCD5090_data_A1,PAP2703_data_A1,IRC200118_data_A1,SCD5516_data_A1,PAP208587_data_A1,PAP171896_data_A1,PAP170625_data_A1,PAP3456_data_A1,PAP2788_data_A1,PAP113061_data_A1,PAP238592_data_A1,PAP181577_data_A1,IRC201083_data_A1,PAP195923_data_A1,SCD1699_data_A1,PAP2227_data_A1,PAP213409_data_A1,PAP278895_data_A1,PAP0436_data_A1,PAP243277_data_A1,PAP175396_data_A1,PAP3532_data_A1,PAP2374_data_A1,PAP177193_data_A1,PAP179476_data_A1,PAP158245_data_A1,PAP280590_data_A1,PAP2621_data_A1,PAP186669_data_A1,PAP279723_data_A1,PAP211466_data_A1,SCD5176_data_A1,SCD5432_data_A1,PAP0828_data_A1,PAP238681_data_A1,PAP182733_data_A1,SBX1904_data_A1,PAP1651_data_A1,PAP2844_data_A1,SCD2637_data_A1,SCD3567_data_A1,SCD2835_data_A1,SCD3171_data_A1,SCD1719_data_A1,SCD1061_data_A1,PAP101379_data_A1,IRC200120_data_A1,SCD3601_data_A1,SCD2883_data_A1,SCD1454_data_A1,SCD6043_data_A1,PAP0037_data_A1,PAP298929_data_A1,PAP0138_data_A1,SCD3141_data_A1,PAP217534_data_A1,PAP0406_data_A1,PAP0593_data_A1,PAP2658_data_A1,PAP2920_data_A1,PAP124707_data_A1,PAP108220_data_A1,SCD2391_data_A1,SCD3391_data_A1,PAP117543_data_A1,PAP249071_data_A1,PAP282961_data_A1,SCD1662_data_A1,PAP272611_data_A1,PAP236180_data_A1,PAP2544_data_A1,PAP162079_data_A1,PAP180125_data_A1,PAP253691_data_A1,PAP250791_data_A1,PAP296045_data_A1,PAP109677_data_A1,IRC201783_data_A1,PAP100780_data_A1,PAP157862_data_A1,PAP255933_data_A1,PAP254203_data_A1,SCD2897_data_A1,PAP218011_data_A1,IRC200215_data_A1,IRC203799_data_A1,PAP293021_data_A1,IRC203715_data_A1,IRC201947_data_A1,IRC203672_data_A1,IRC203660_data_A1,PAP249945_data_A1,PAP199885_data_A1,IRC200015_data_A1,PAP213663_data_A1,IRC201187_data_A1,IRC200632_data_A1,PAP228917_data_A1,IRC203802_data_A1,IRC203677_data_A1,PAP138961_data_A1,IRC201436_data_A1,SBX1021_data_A1,IRC202318_data_A1,IRC201952_data_A1,IRC201416_data_A1,IRC203847_data_A1,IRC201680_data_A1,SCD4391_data_A1,PAP131830_data_A1,SCD5221_data_A1,SCD3733_data_A1,SCD4462_data_A1,SCD5522_data_A1,SBX1020_data_A1,SCD3573_data_A1,SCD5722_data_A1,PAP268533_data_A1,SCD3516_data_A1,IRC203716_data_A1,PAP1647_data_A1,PAP2230_data_A1,SCD5262_data_A1,SCD2220_data_A1,IRC201696_data_A1,PAP295322_data_A1,PAP267914_data_A1,PAP100925_data_A1,PAP281776_data_A1,PAP227153_data_A1,PAP279857_data_A1,SCD4123_data_A1,PAP279511_data_A1,PAP275632_data_A1,PAP287069_data_A1,IRC200672_data_A1,IRC201968_data_A1,PAP0328_data_A1,PAP204040_data_A1,PAP239941_data_A1,PAP2959_data_A1,PAP298410_data_A1,SCD5346_data_A1,SCD1394_data_A1,PAP247327_data_A1,SCD4530_data_A1,PAP3390_data_A1,SBX1168_data_A1,PAP190644_data_A1,PAP0193_data_A1,PAP0979_data_A1,PAP0510_data_A1,PAP251051_data_A1,SBX1717_data_A1,PAP189571_data_A1,PAP263780_data_A1,PAP243878_data_A1,PAP185181_data_A1,SCD4149_data_A1,PAP110416_data_A1,IRC203743_data_A1,IRC201695_data_A1,IRC203730_data_A1,SCD3496_data_A1,SCD4449_data_A1,IRC201923_data_A1,SCD1314_data_A1,SCD4654_data_A1,PAP152662_data_A1,IRC200682_data_A1,SCD2001_data_A1,PAP153998_data_A1,PAP169154_data_A1,PAP3150_data_A1,PAP160267_data_A1,PAP194745_data_A1,PAP2963_data_A1,PAP182738_data_A1,PAP170154_data_A1,PAP2122_data_A1,PAP1271_data_A1,PAP3602_data_A1,PAP282860_data_A1,PAP224462_data_A1,PAP275577_data_A1,PAP201146_data_A1,PAP141106_data_A1,PAP280573_data_A1,PAP153718_data_A1,PAP164874_data_A1,SBX1958_data_A1,PAP244468_data_A1,PAP246917_data_A1,PAP102192_data_A1,SCD1801_data_A1,SCD1689_data_A1,PAP221864_data_A1,PAP151193_data_A1,SCD2771_data_A1,PAP2592_data_A1,PAP0869_data_A1,SBX1315_data_A1,SCD2403_data_A1,SBX1076_data_A1,SCD1187_data_A1,SCD4212_data_A1,SCD4115_data_A1,PAP2934_data_A1,PAP264391_data_A1,PAP171835_data_A1,PAP0217_data_A1,PAP239742_data_A1,PAP109029_data_A1,PAP155110_data_A1,SCD1720_data_A1,PAP131821_data_A1,PAP286441_data_A1,PAP104696_data_A1,PAP232207_data_A1,PAP241648_data_A1,PAP1800_data_A1,PAP271631_data_A1,PAP117776_data_A1,PAP233576_data_A1,PAP152487_data_A1,PAP105390_data_A1,SCD3411_data_A1,PAP187155_data_A1,PAP105729_data_A1,PAP130553_data_A1,PAP279831_data_A1,PAP126947_data_A1,PAP241520_data_A1,PAP218910_data_A1,PAP238138_data_A1,SCD2424_data_A1,PAP0329_data_A1,PAP200466_data_A1,PAP244992_data_A1,PAP187030_data_A1,PAP3604_data_A1,PAP135139_data_A1,PAP219520_data_A1,PAP110577_data_A1,SCD1846_data_A1,IRC201883_data_A1,PAP2985_data_A1,PAP2255_data_A1,SBX1004_data_A1,IRC201291_data_A1,PAP3059_data_A1,PAP253922_data_A1,IRC203774_data_A1,PAP188118_data_A1,PAP176235_data_A1,PAP215690_data_A1,PAP1472_data_A1,SCD5105_data_A1,PAP222685_data_A1,PAP249547_data_A1,IRC202314_data_A1,PAP2647_data_A1,IRC200448_data_A1,PAP176406_data_A1,IRC201835_data_A1,IRC200707_data_A1,PAP2784_data_A1,PAP1797_data_A1,PAP3392_data_A1,PAP182868_data_A1,PAP102690_data_A1,PAP226552_data_A1,SBX1774_data_A1,SBX1737_data_A1,PAP172474_data_A1,SBX1256_data_A1,PAP1625_data_A1,SCD2370_data_A1,PAP296006_data_A1,IRC200646_data_A1,IRC204041_data_A1,PAP256605_data_A1,PAP237802_data_A1,IRC203800_data_A1,IRC202096_data_A1,IRC200673_data_A1,PAP130274_data_A1,IRC201681_data_A1,PAP276237_data_A1,SBX1926_data_A1,PAP295341_data_A1,PAP1894_data_A1,PAP172120_data_A1,SCD5730_data_A1,PAP277102_data_A1,PAP125790_data_A1,PAP212861_data_A1,PAP2583_data_A1,PAP0521_data_A1,SCD1614_data_A1,IRC203831_data_A1,PAP252050_data_A1,IRC201663_data_A1,PAP2004_data_A1,PAP2446_data_A1,IRC202048_data_A1,PAP175596_data_A1,PAP194517_data_A1,PAP209133_data_A1,PAP157423_data_A1,PAP1264_data_A1,SBX1373_data_A1,PAP182575_data_A1,SBX2034_data_A1,IRC201774_data_A1,PAP160289_data_A1,PAP279759_data_A1,PAP164218_data_A1,IRC202246_data_A1,PAP206743_data_A1,PAP240751_data_A1,SCD1709_data_A1,IRC203836_data_A1,SCD4321_data_A1,PAP220541_data_A1,PAP111146_data_A1,SCD5523_data_A1,SCD5244_data_A1,SCD5193_data_A1,SCD5533_data_A1,SCD4092_data_A1,SCD3638_data_A1,SCD3782_data_A1,SCD5194_data_A1,IRC202165_data_A1,IRC200989_data_A1,IRC200019_data_A1,IRC200973_data_A1,PAP162222_data_A1,PAP185852_data_A1,PAP226012_data_A1,IRC200607_data_A1,PAP210360_data_A1,PAP199488_data_A1,PAP232891_data_A1,PAP113171_data_A1,PAP232012_data_A1,PAP157800_data_A1,PAP199641_data_A1,PAP252014_data_A1,IRC201653_data_A1,IRC202167_data_A1,IRC200551_data_A1,PAP256833_data_A1,PAP0476_data_A1,IRC203724_data_A1,PAP192341_data_A1,PAP166758_data_A1,PAP231125_data_A1,PAP148209_data_A1,PAP110296_data_A1,PAP236686_data_A1,PAP201152_data_A1,PAP158530_data_A1,PAP282410_data_A1,IRC201670_data_A1,PAP280193_data_A1,SCD1458_data_A1,PAP104863_data_A1,PAP277635_data_A1,PAP186683_data_A1,PAP282361_data_A1,PAP181829_data_A1,PAP130368_data_A1,PAP157709_data_A1,PAP122467_data_A1,SCD2842_data_A1,PAP189497_data_A1,IRC202399_data_A1,PAP0936_data_A1,PAP167566_data_A1,PAP251454_data_A1,SCD2410_data_A1,PAP161195_data_A1,IRC200791_data_A1,PAP186511_data_A1,IRC200434_data_A1,IRC202286_data_A1,SCD2285_data_A1,SCD2665_data_A1,SCD4540_data_A1,IRC201445_data_A1,PAP114088_data_A1,PAP157002_data_A1,PAP266297_data_A1,PAP109157_data_A1,PAP223017_data_A1,PAP240086_data_A1,PAP185482_data_A1,SCD4112_data_A1,PAP299626_data_A1,IRC202010_data_A1,IRC202038_data_A1,PAP214680_data_A1,PAP264170_data_A1,PAP2473_data_A1,PAP248873_data_A1,PAP295854_data_A1,PAP151043_data_A1,PAP156375_data_A1,PAP189629_data_A1,PAP109643_data_A1,PAP130293_data_A1,PAP172000_data_A1,PAP109298_data_A1,SCD5622_data_A1,PAP284448_data_A1,PAP120827_data_A1,PAP160484_data_A1,SBX1549_data_A1,SCD3780_data_A1,PAP259947_data_A1,SCD4360_data_A1,PAP148643_data_A1,PAP1666_data_A1,PAP127913_data_A1,PAP0038_data_A1,PAP200386_data_A1,PAP292901_data_A1,SCD1590_data_A1,PAP2153_data_A1,PAP278489_data_A1,PAP130235_data_A1,PAP145717_data_A1,PAP190241_data_A1,PAP118059_data_A1,SCD4052_data_A1,PAP241968_data_A1,SCD5467_data_A1,SCD2649_data_A1,PAP140622_data_A1,PAP257533_data_A1,PAP2951_data_A1,SCD5560_data_A1,PAP208574_data_A1,PAP263400_data_A1,SCD3589_data_A1,PAP100332_data_A1,PAP0805_data_A1,PAP170101_data_A1,PAP162756_data_A1,PAP1240_data_A1,PAP2606_data_A1,PAP150048_data_A1,PAP194970_data_A1,PAP281961_data_A1,PAP260911_data_A1,SCD3552_data_A1,SCD4717_data_A1,PAP296011_data_A1,IRC200439_data_A1,IRC200850_data_A1,IRC200094_data_A1,PAP255212_data_A1,IRC202290_data_A1,PAP193495_data_A1,IRC200425_data_A1,PAP201207_data_A1,SCD1853_data_A1,IRC203683_data_A1,IRC202158_data_A1,SCD4254_data_A1,SCD5341_data_A1,SBX1296_data_A1,IRC202297_data_A1,PAP283828_data_A1,PAP205333_data_A1,IRC202310_data_A1,SCD4411_data_A1,PAP239567_data_A1,IRC201991_data_A1,PAP244770_data_A1,IRC202083_data_A1,IRC200746_data_A1,PAP180880_data_A1,IRC202386_data_A1,PAP254087_data_A1,SCD5102_data_A1,IRC201769_data_A1,PAP245538_data_A1,PAP282555_data_A1,IRC201595_data_A1,IRC200516_data_A1,IRC200534_data_A1,PAP145035_data_A1,PAP256302_data_A1,PAP206734_data_A1,PAP101402_data_A1,IRC201442_data_A1,IRC201902_data_A1,PAP106343_data_A1,PAP121243_data_A1,PAP273927_data_A1,SCD4721_data_A1,PAP238693_data_A1,IRC202237_data_A1,PAP0542_data_A1,SBX1148_data_A1,IRC203779_data_A1,PAP119257_data_A1,IRC202396_data_A1,IRC201708_data_A1,SCD3494_data_A1,IRC202106_data_A1,IRC201978_data_A1,PAP2148_data_A1,IRC203843_data_A1,PAP199597_data_A1,SBX1852_data_A1,SCD1830_data_A1,IRC201424_data_A1,PAP243592_data_A1,IRC200498_data_A1,SBX2269_data_A1,IRC201781_data_A1,PAP102582_data_A1,PAP3103_data_A1,PAP3157_data_A1,IRC200399_data_A1,IRC203695_data_A1,PAP3343_data_A1,PAP239717_data_A1,PAP194033_data_A1,PAP2692_data_A1,SCD5583_data_A1,PAP156452_data_A1,SBX2259_data_A1,PAP219406_data_A1,PAP160433_data_A1,PAP231566_data_A1,SCD1285_data_A1,PAP131375_data_A1,PAP102078_data_A1,PAP288554_data_A1,IRC203805_data_A1,PAP271012_data_A1,IRC203684_data_A1,IRC202079_data_A1,PAP153897_data_A1,PAP173974_data_A1,PAP259980_data_A1,SBX2276_data_A1,PAP1113_data_A1,PAP166665_data_A1,PAP292415_data_A1,PAP138528_data_A1,IRC203666_data_A1,PAP139928_data_A1,IRC200610_data_A1,SBX2278_data_A1,PAP250093_data_A1,IRC203671_data_A1,PAP2182_data_A1,SCD4561_data_A1,SCD4548_data_A1,SCD1762_data_A1,SCD3707_data_A1,SCD5455_data_A1,SCD5581_data_A1,SBX1247_data_A1,IRC201449_data_A1,IRC201441_data_A1,PAP163399_data_A1,PAP238234_data_A1,PAP200965_data_A1,PAP256709_data_A1,PAP2301_data_A1,SCD1075_data_A1,PAP249175_data_A1,SCD2197_data_A1,PAP291854_data_A1,PAP170777_data_A1,IRC203667_data_A1,PAP226703_data_A1,PAP277822_data_A1,PAP3137_data_A1,IRC202142_data_A1,PAP181091_data_A1,PAP129401_data_A1,PAP247175_data_A1,PAP283325_data_A1,PAP0719_data_A1,SCD1763_data_A1,PAP251617_data_A1,PAP297720_data_A1,PAP252105_data_A1,PAP285660_data_A1,PAP275095_data_A1,IRC203839_data_A1,PAP154260_data_A1,PAP202892_data_A1,SBX1723_data_A1,PAP239972_data_A1,SCD1189_data_A1,SCD1257_data_A1,PAP168858_data_A1,IRC202091_data_A1,PAP195584_data_A1,PAP273052_data_A1,PAP0462_data_A1,PAP2309_data_A1,IRC202355_data_A1,PAP261015_data_A1,PAP193438_data_A1,SCD1057_data_A1,PAP287054_data_A1,SCD1303_data_A1,SCD3124_data_A1,PAP0833_data_A1,SCD1307_data_A1,PAP179266_data_A1,PAP120429_data_A1,SBX1180_data_A1,PAP0794_data_A1,PAP294536_data_A1,PAP222038_data_A1,PAP164040_data_A1,PAP241179_data_A1,IRC203803_data_A1,PAP122575_data_A1,SCD5648_data_A1,SCD5370_data_A1,SCD1109_data_A1,PAP277589_data_A1,IRC200366_data_A1,IRC204035_data_A1,PAP112312_data_A1,PAP141330_data_A1,PAP263926_data_A1,PAP118687_data_A1,PAP270981_data_A1,PAP0942_data_A1,SCD5422_data_A1,PAP212988_data_A1,PAP201961_data_A1,PAP270109_data_A1,PAP230301_data_A1,PAP213508_data_A1,PAP150424_data_A1,PAP237407_data_A1,IRC201759_data_A1,SBX1839_data_A1,SCD2904_data_A1,IRC201457_data_A1,IRC200521_data_A1,IRC200069_data_A1,PAP281002_data_A1,PAP116837_data_A1,IRC201673_data_A1,PAP106674_data_A1,IRC200630_data_A1,PAP137188_data_A1,PAP288582_data_A1,PAP149356_data_A1,IRC202356_data_A1,PAP2728_data_A1,SCD4597_data_A1,SCD5427_data_A1,SCD4760_data_A1,PAP242169_data_A1,PAP1229_data_A1,PAP104213_data_A1,PAP245977_data_A1,PAP117527_data_A1,IRC201591_data_A1,SCD1096_data_A1,IRC203726_data_A1,PAP246727_data_A1,IRC200605_data_A1,PAP293428_data_A1,SCD4719_data_A1,PAP137458_data_A1,PAP168635_data_A1,IRC203668_data_A1,PAP210472_data_A1,PAP271375_data_A1,PAP2353_data_A1,SCD1488_data_A1,SCD3592_data_A1,PAP177092_data_A1,PAP156312_data_A1,PAP2436_data_A1,IRC201431_data_A1,IRC201342_data_A1,PAP277149_data_A1,PAP199326_data_A1,PAP197905_data_A1,PAP1951_data_A1,SCD2415_data_A1,SCD4363_data_A1,SBX2290_data_A1,PAP173705_data_A1,PAP213543_data_A1,PAP2854_data_A1,SBX2008_data_A1,IRC203824_data_A1,IRC203734_data_A1,SCD4071_data_A1,PAP213695_data_A1,PAP240326_data_A1,SCD1905_data_A1,IRC201488_data_A1,SCD1942_data_A1,PAP2520_data_A1,SCD2020_data_A1,PAP256898_data_A1,PAP2567_data_A1,PAP261985_data_A1,PAP186953_data_A1,PAP116575_data_A1,SCD1584_data_A1,SCD5342_data_A1,IRC201396_data_A1,SCD5367_data_A1,PAP130690_data_A1,SCD2214_data_A1,PAP228962_data_A1,PAP157935_data_A1,PAP117639_data_A1,SBX2302_data_A1,PAP132936_data_A1,SCD6016_data_A1,SCD5627_data_A1,IRC200524_data_A1,PAP299330_data_A1,PAP211376_data_A1,PAP261157_data_A1,PAP255505_data_A1,PAP271895_data_A1,PAP267668_data_A1,PAP214372_data_A1,PAP147010_data_A1,PAP214484_data_A1,PAP157901_data_A1,PAP215300_data_A1,PAP146817_data_A1,PAP214196_data_A1,SBX1239_data_A1,SCD1639_data_A1,IRC203837_data_A1,IRC201322_data_A1,IRC201152_data_A1,PAP109491_data_A1,PAP159872_data_A1,PAP209814_data_A1,IRC200021_data_A1,PAP0579_data_A1,PAP185776_data_A1,PAP293924_data_A1,PAP221528_data_A1,PAP176263_data_A1,PAP241643_data_A1,PAP243309_data_A1,PAP2738_data_A1,PAP203625_data_A1,IRC203713_data_A1,PAP188411_data_A1,PAP209503_data_A1,PAP235785_data_A1,PAP124167_data_A1,PAP163466_data_A1,PAP210751_data_A1,PAP145517_data_A1,SBX1762_data_A1,PAP185847_data_A1,IRC204030_data_A1,SCD6192_data_A1,IRC202270_data_A1,IRC200934_data_A1,IRC202308_data_A1,IRC200417_data_A1,IRC200802_data_A1,IRC202275_data_A1,IRC202288_data_A1,IRC200760_data_A1,IRC200831_data_A1,IRC201299_data_A1,IRC200860_data_A1,IRC200210_data_A1,IRC200386_data_A1,IRC202088_data_A1,IRC200752_data_A1,SCD2892_data_A1,PAP263113_data_A1,PAP3588_data_A1,IRC201453_data_A1,IRC200914_data_A1,IRC200869_data_A1,IRC201215_data_A1,PAP150640_data_A1,IRC200445_data_A1,IRC200376_data_A1,IRC202298_data_A1,IRC200316_data_A1,IRC202294_data_A1,IRC200995_data_A1,IRC200407_data_A1,IRC200887_data_A1,IRC200924_data_A1,IRC200782_data_A1,IRC200766_data_A1,IRC200996_data_A1,IRC200926_data_A1,IRC200884_data_A1,IRC201003_data_A1,IRC200957_data_A1,IRC200972_data_A1,IRC200979_data_A1,PAP163000_data_A1,IRC200433_data_A1,PAP1335_data_A1,IRC200880_data_A1,SBX1201_data_A1,IRC200091_data_A1,IRC202293_data_A1,IRC200956_data_A1,IRC202279_data_A1,IRC202194_data_A1,IRC200977_data_A1,PAP279006_data_A1,IRC200778_data_A1,IRC200420_data_A1,IRC200848_data_A1,IRC200849_data_A1,IRC202367_data_A1,IRC200903_data_A1,IRC202371_data_A1,IRC202302_data_A1,IRC200056_data_A1,IRC200793_data_A1,IRC202276_data_A1,IRC200352_data_A1,IRC200350_data_A1,IRC202291_data_A1,IRC200054_data_A1,IRC200440_data_A1,IRC200045_data_A1,IRC200065_data_A1,IRC200042_data_A1,PAP254496_data_A1,IRC200058_data_A1,IRC200356_data_A1,IRC200419_data_A1,IRC200057_data_A1,IRC202301_data_A1,IRC200093_data_A1,IRC203700_data_A1,IRC200077_data_A1,IRC200968_data_A1,IRC200908_data_A1,IRC200866_data_A1,IRC200749_data_A1,IRC200944_data_A1,IRC200796_data_A1,IRC203919_data_A1,IRC202360_data_A1,IRC200805_data_A1,IRC200981_data_A1,IRC200988_data_A1,IRC200947_data_A1,IRC202267_data_A1,IRC200441_data_A1,PAP150837_data_A1,PAP220094_data_A1,PAP236902_data_A1,PAP281944_data_A1,PAP197150_data_A1,PAP233404_data_A1,PAP241947_data_A1,PAP227148_data_A1,PAP145237_data_A1,PAP130164_data_A1,PAP130114_data_A1,PAP179872_data_A1,PAP241323_data_A1,PAP212769_data_A1,PAP243570_data_A1,PAP111311_data_A1,IRC200478_data_A1,SBX1207_data_A1,IRC202259_data_A1,SCD1114_data_A1,IRC200080_data_A1,IRC200922_data_A1,IRC200411_data_A1,IRC200964_data_A1,PAP173162_data_A1,IRC202372_data_A1,PAP154957_data_A1,SCD3729_data_A1,PAP173145_data_A1,PAP138339_data_A1,PAP209493_data_A1,PAP288159_data_A1,SCD1201_data_A1,PAP100004_data_A1,SCD1270_data_A1,SCD4570_data_A1,IRC203718_data_A1,IRC200481_data_A1,IRC200428_data_A1,IRC200427_data_A1,SCD3169_data_A1,SCD5187_data_A1,PAP255201_data_A1,IRC201656_data_A1,PAP291182_data_A1,PAP256477_data_A1,PAP181216_data_A1,IRC200873_data_A1,IRC202056_data_A1,PAP258326_data_A1,SCD3754_data_A1,SCD1430_data_A1,IRC200776_data_A1,PAP206745_data_A1,PAP134077_data_A1,SCD3067_data_A1,SCD5261_data_A1,PAP232159_data_A1,IRC200380_data_A1,SCD5702_data_A1,PAP290460_data_A1,SCD3188_data_A1,PAP0126_data_A1,IRC200412_data_A1,IRC202244_data_A1,IRC202285_data_A1,IRC202164_data_A1,IRC200421_data_A1,IRC200800_data_A1,PAP1754_data_A1,IRC201220_data_A1,IRC201243_data_A1,IRC201132_data_A1,SCD3002_data_A1,IRC202186_data_A1,IRC200871_data_A1,PAP222898_data_A1,PAP249295_data_A1,PAP148146_data_A1,PAP201768_data_A1,IRC201376_data_A1,SCD2927_data_A1,SCD2813_data_A1,IRC200363_data_A1,IRC201913_data_A1,IRC203750_data_A1,IRC203749_data_A1,IRC201654_data_A1,IRC200616_data_A1,PAP1290_data_A1,SCD1838_data_A1,PAP2441_data_A1,PAP0986_data_A1,PAP273337_data_A1,PAP222413_data_A1,IRC202316_data_A1,PAP214384_data_A1,PAP125623_data_A1,PAP3220_data_A1,IRC201646_data_A1,IRC202378_data_A1,IRC200792_data_A1,IRC200983_data_A1,IRC200970_data_A1,PAP187158_data_A1,IRC200681_data_A1,IRC200370_data_A1,PAP188434_data_A1,PAP1299_data_A1,PAP2184_data_A1,PAP228240_data_A1,IRC200436_data_A1,IRC201644_data_A1,IRC203693_data_A1,PAP152668_data_A1,SCD3109_data_A1,SCD2985_data_A1,PAP272113_data_A1,PAP202607_data_A1,PAP237033_data_A1,SCD5719_data_A1,IRC203689_data_A1,PAP2254_data_A1,PAP188066_data_A1,PAP2265_data_A1,PAP262432_data_A1,PAP260370_data_A1,PAP170454_data_A1,PAP250508_data_A1,IRC200089_data_A1,SCD4503_data_A1,IRC200400_data_A1,PAP132498_data_A1,PAP228214_data_A1,PAP226009_data_A1,SCD3507_data_A1,PAP135179_data_A1,PAP103031_data_A1,IRC201369_data_A1,PAP226198_data_A1,PAP155596_data_A1,IRC200836_data_A1,IRC203918_data_A1,SBX1813_data_A1,IRC200429_data_A1,PAP287019_data_A1,IRC200383_data_A1,IRC200550_data_A1,IRC200041_data_A1,IRC202309_data_A1,IRC202280_data_A1,PAP170623_data_A1,PAP247032_data_A1,IRC201275_data_A1,IRC200804_data_A1,IRC202120_data_A1,PAP3398_data_A1,IRC200446_data_A1,SCD5277_data_A1,IRC200987_data_A1,PAP258344_data_A1,PAP2450_data_A1,IRC200044_data_A1,IRC200081_data_A1,IRC200068_data_A1,IRC200070_data_A1,IRC201702_data_A1,SCD5454_data_A1,IRC200984_data_A1,PAP174843_data_A1,SCD4162_data_A1,IRC202248_data_A1,IRC200005_data_A1,IRC200167_data_A1,PAP112196_data_A1,IRC200075_data_A1,IRC200066_data_A1,IRC201002_data_A1,IRC200072_data_A1,IRC200053_data_A1,IRC200040_data_A1,IRC200416_data_A1,IRC200359_data_A1,IRC200064_data_A1,PAP104479_data_A1,PAP168443_data_A1,IRC200771_data_A1,PAP3070_data_A1,IRC200398_data_A1,IRC200430_data_A1,IRC200396_data_A1,PAP253976_data_A1,SBX1353_data_A1,PAP190092_data_A1,IRC200353_data_A1,IRC200751_data_A1,PAP255427_data_A1,SCD2276_data_A1,IRC200378_data_A1,IRC200076_data_A1,SBX1804_data_A1,IRC200233_data_A1,SCD1499_data_A1,PAP273766_data_A1,SCD5466_data_A1,SCD4197_data_A1,SCD3514_data_A1,SCD5222_data_A1,SCD5366_data_A1,SCD4398_data_A1,SCD4693_data_A1,SCD5120_data_A1,SCD3690_data_A1,PAP126704_data_A1,PAP189267_data_A1,IRC202333_data_A1,IRC202268_data_A1,PAP1590_data_A1,IRC201911_data_A1,IRC201904_data_A1,IRC203696_data_A1,PAP1717_data_A1,IRC201927_data_A1,IRC203954_data_A1,PAP282264_data_A1,IRC201105_data_A1,PAP3402_data_A1,IRC203857_data_A1,PAP2220_data_A1,PAP249439_data_A1,PAP265079_data_A1,PAP217153_data_A1,PAP1498_data_A1,IRC200729_data_A1,IRC203853_data_A1,PAP2173_data_A1,IRC200611_data_A1,IRC203798_data_A1,IRC201907_data_A1,IRC202339_data_A1,IRC201350_data_A1,IRC201460_data_A1,SCD4056_data_A1,SCD1439_data_A1,SBX1765_data_A1,SBX2293_data_A1,PAP226166_data_A1,SCD5192_data_A1,IRC201407_data_A1,PAP171243_data_A1,PAP2845_data_A1,PAP291893_data_A1,PAP0277_data_A1,IRC203819_data_A1,IRC201333_data_A1,PAP153734_data_A1,PAP172135_data_A1,IRC200530_data_A1,IRC201328_data_A1,IRC201590_data_A1,PAP112337_data_A1,PAP3538_data_A1,IRC201420_data_A1,SCD3401_data_A1,IRC203748_data_A1,IRC201425_data_A1,PAP224471_data_A1,PAP225670_data_A1,PAP194447_data_A1,PAP216215_data_A1,PAP134302_data_A1,PAP224878_data_A1,PAP220132_data_A1,PAP204460_data_A1,PAP268962_data_A1,PAP1037_data_A1,IRC201387_data_A1,IRC200520_data_A1,SCD3128_data_A1,SCD1338_data_A1,SCD1616_data_A1,SBX2025_data_A1,SCD3816_data_A1,SCD4047_data_A1,PAP141838_data_A1,PAP291319_data_A1,SCD2825_data_A1,IRC202323_data_A1,PAP279905_data_A1,PAP0997_data_A1,PAP144937_data_A1,PAP2447_data_A1,PAP240043_data_A1,PAP2270_data_A1,PAP2762_data_A1,PAP173953_data_A1,PAP184608_data_A1,PAP179812_data_A1,PAP125912_data_A1,PAP256247_data_A1,SCD4128_data_A1,SCD5499_data_A1,SCD3431_data_A1,PAP218216_data_A1,SBX1254_data_A1,SCD2643_data_A1,PAP180960_data_A1,SCD3054_data_A1,SCD1083_data_A1,PAP2017_data_A1,SCD4505_data_A1,SCD3389_data_A1,SCD4126_data_A1,SCD5387_data_A1,PAP217031_data_A1,PAP299532_data_A1,SCD5511_data_A1,SBX1304_data_A1,SCD3422_data_A1,PAP169203_data_A1,IRC201845_data_A1,PAP284681_data_A1,PAP2167_data_A1,SCD2394_data_A1,PAP104311_data_A1,PAP229575_data_A1,PAP212743_data_A1,PAP292363_data_A1,PAP136861_data_A1,PAP172110_data_A1,PAP164271_data_A1,PAP2627_data_A1,PAP108243_data_A1,PAP195511_data_A1,SBX1303_data_A1,PAP256236_data_A1,IRC201948_data_A1,PAP114067_data_A1,PAP232736_data_A1,PAP1191_data_A1,PAP122784_data_A1,PAP128094_data_A1,SBX1329_data_A1,PAP197025_data_A1,PAP144994_data_A1,IRC200505_data_A1,PAP170027_data_A1,PAP171912_data_A1,PAP215211_data_A1,IRC201374_data_A1,PAP2894_data_A1,PAP240021_data_A1,PAP167081_data_A1,PAP295186_data_A1,PAP3544_data_A1,PAP275380_data_A1,PAP2868_data_A1,IRC200531_data_A1,PAP173340_data_A1,IRC200139_data_A1,IRC200463_data_A1,PAP113887_data_A1,PAP162667_data_A1,PAP282172_data_A1,PAP276484_data_A1,IRC203862_data_A1,PAP132139_data_A1,PAP201819_data_A1,PAP228931_data_A1,SCD5433_data_A1,PAP170145_data_A1,PAP106131_data_A1,PAP229439_data_A1,PAP2631_data_A1,PAP219012_data_A1,SCD1739_data_A1,PAP210934_data_A1,SCD4272_data_A1,PAP223289_data_A1,PAP237770_data_A1,PAP2083_data_A1,PAP285256_data_A1,PAP242671_data_A1,PAP158877_data_A1,PAP213511_data_A1,PAP253696_data_A1,PAP285928_data_A1,PAP204080_data_A1,PAP233712_data_A1,PAP244657_data_A1,IRC203790_data_A1,SCD2670_data_A1,IRC201353_data_A1,SBX1351_data_A1,IRC203797_data_A1,IRC200523_data_A1,IRC200560_data_A1,IRC200532_data_A1,PAP178268_data_A1,PAP291429_data_A1,IRC201139_data_A1,IRC200556_data_A1,IRC201419_data_A1,PAP3178_data_A1,PAP131612_data_A1,IRC201618_data_A1,IRC201677_data_A1,PAP288322_data_A1,IRC201487_data_A1,PAP2199_data_A1,IRC200615_data_A1,PAP100951_data_A1,PAP188102_data_A1,IRC201496_data_A1,PAP2367_data_A1,PAP299580_data_A1,PAP177392_data_A1,PAP235158_data_A1,IRC203678_data_A1,IRC203697_data_A1,PAP281945_data_A1,IRC203822_data_A1,PAP245087_data_A1,PAP155203_data_A1,SCD1793_data_A1,PAP153323_data_A1,IRC201901_data_A1,PAP272764_data_A1,IRC201413_data_A1,IRC201430_data_A1,IRC201356_data_A1,PAP240125_data_A1,SCD4490_data_A1,PAP3301_data_A1,IRC201643_data_A1,PAP123498_data_A1,PAP102069_data_A1,PAP295994_data_A1,PAP292518_data_A1,IRC200609_data_A1,PAP213975_data_A1,PAP2134_data_A1,PAP3425_data_A1,IRC201666_data_A1,IRC200563_data_A1,PAP233697_data_A1,IRC200625_data_A1,PAP3140_data_A1,IRC201405_data_A1,IRC201410_data_A1,IRC201418_data_A1,SCD2235_data_A1,IRC201361_data_A1,IRC201915_data_A1,PAP130753_data_A1,IRC201414_data_A1,IRC202185_data_A1,PAP218381_data_A1,PAP1522_data_A1,PAP2253_data_A1,PAP118880_data_A1,PAP234379_data_A1,PAP118093_data_A1,IRC200513_data_A1,PAP100425_data_A1,IRC201921_data_A1,IRC200562_data_A1,PAP150736_data_A1,PAP115435_data_A1,PAP108914_data_A1,IRC200653_data_A1,IRC200655_data_A1,PAP296869_data_A1,PAP154245_data_A1,IRC201926_data_A1,PAP170762_data_A1,PAP224609_data_A1,PAP118969_data_A1,SCD6025_data_A1,PAP223377_data_A1,SBX1014_data_A1,PAP149674_data_A1,PAP154407_data_A1,PAP242888_data_A1,PAP233647_data_A1,PAP221995_data_A1,IRC203789_data_A1,IRC201354_data_A1,IRC201389_data_A1,IRC201600_data_A1,IRC201898_data_A1,IRC201946_data_A1,IRC201895_data_A1,PAP166767_data_A1,SBX1136_data_A1,IRC201603_data_A1,PAP226695_data_A1,PAP217296_data_A1,SCD5744_data_A1,PAP276846_data_A1,PAP217774_data_A1,PAP2396_data_A1,PAP106447_data_A1,PAP120423_data_A1,PAP217033_data_A1,IRC201679_data_A1,IRC202160_data_A1,IRC201650_data_A1,PAP119356_data_A1,PAP234353_data_A1,PAP2139_data_A1,IRC201045_data_A1,PAP150411_data_A1,PAP267082_data_A1,IRC202251_data_A1,PAP104465_data_A1,PAP114888_data_A1,IRC203776_data_A1,PAP142662_data_A1,PAP235497_data_A1,PAP0203_data_A1,PAP3133_data_A1,PAP2715_data_A1,PAP210168_data_A1,PAP122835_data_A1,PAP280830_data_A1,IRC200559_data_A1,IRC200552_data_A1,IRC201678_data_A1,IRC201692_data_A1,PAP102012_data_A1,PAP184992_data_A1,PAP101545_data_A1,PAP171531_data_A1,PAP241049_data_A1,PAP150437_data_A1,PAP161714_data_A1,IRC202241_data_A1,IRC201108_data_A1,PAP2722_data_A1,PAP157566_data_A1,IRC202169_data_A1,PAP192930_data_A1,IRC201638_data_A1,IRC201718_data_A1,PAP2126_data_A1,IRC200483_data_A1,PAP165918_data_A1,PAP275307_data_A1,IRC200549_data_A1,IRC201640_data_A1,PAP218253_data_A1,PAP3342_data_A1,PAP106514_data_A1,SCD1205_data_A1,PAP183935_data_A1,IRC203852_data_A1,PAP3013_data_A1,SCD2347_data_A1,PAP177337_data_A1,PAP196194_data_A1,PAP3466_data_A1,IRC202135_data_A1,PAP2267_data_A1,PAP294145_data_A1,PAP209635_data_A1,PAP137421_data_A1,PAP252286_data_A1,PAP236615_data_A1,PAP197676_data_A1,IRC202242_data_A1,PAP2244_data_A1,IRC202188_data_A1,IRC200620_data_A1,PAP117500_data_A1,IRC203738_data_A1,PAP2359_data_A1,SCD1060_data_A1,IRC201648_data_A1,SCD2750_data_A1,SCD3217_data_A1,PAP175976_data_A1,PAP297151_data_A1,PAP131962_data_A1,SCD4134_data_A1,SBX1208_data_A1,IRC200515_data_A1,IRC200525_data_A1,SCD1630_data_A1,IRC200539_data_A1,IRC203674_data_A1,PAP203332_data_A1,PAP2286_data_A1,PAP1904_data_A1,IRC202230_data_A1,IRC201452_data_A1,IRC201346_data_A1,IRC201428_data_A1,IRC201127_data_A1,PAP155788_data_A1,PAP248989_data_A1,SCD5881_data_A1,IRC201760_data_A1,IRC201462_data_A1,IRC201772_data_A1,PAP285581_data_A1,PAP1355_data_A1,PAP172054_data_A1,PAP2970_data_A1,IRC200675_data_A1,PAP233049_data_A1,SCD4095_data_A1,PAP256667_data_A1,PAP204835_data_A1,PAP127594_data_A1,IRC203860_data_A1,PAP233637_data_A1,PAP213151_data_A1,PAP189418_data_A1,PAP106860_data_A1,PAP251847_data_A1,PAP264991_data_A1,PAP267093_data_A1,PAP3132_data_A1,SCD5965_data_A1,SBX2243_data_A1,PAP139285_data_A1,SCD1032_data_A1,PAP2663_data_A1,PAP221567_data_A1,PAP2232_data_A1,PAP2102_data_A1,PAP147706_data_A1,SCD5258_data_A1,SCD1540_data_A1,PAP1527_data_A1,PAP2156_data_A1,PAP178722_data_A1,PAP3363_data_A1,PAP3153_data_A1,PAP1042_data_A1,SCD3523_data_A1,PAP142283_data_A1,PAP2555_data_A1,PAP123074_data_A1,PAP143773_data_A1,PAP173348_data_A1,PAP110398_data_A1,PAP127031_data_A1,IRC201360_data_A1,PAP180001_data_A1,IRC201367_data_A1,PAP131492_data_A1,PAP160256_data_A1,IRC202235_data_A1,IRC201339_data_A1,IRC201664_data_A1,PAP249921_data_A1,SCD2330_data_A1,IRC202261_data_A1,IRC200071_data_A1,IRC201897_data_A1,SCD5509_data_A1,PAP112885_data_A1,IRC203821_data_A1,SBX2013_data_A1,IRC203717_data_A1,SCD5073_data_A1,IRC200969_data_A1,PAP239559_data_A1,PAP121713_data_A1,IRC200909_data_A1,IRC200818_data_A1,IRC201054_data_A1,PAP194790_data_A1,IRC201687_data_A1,IRC200748_data_A1,SBX1203_data_A1,SCD3793_data_A1,IRC200029_data_A1,IRC202306_data_A1,IRC202387_data_A1,IRC202193_data_A1,IRC200423_data_A1,PAP105041_data_A1,IRC200397_data_A1,PAP238697_data_A1,IRC200490_data_A1,IRC200384_data_A1,PAP268901_data_A1,PAP250070_data_A1,SBX1713_data_A1,PAP1887_data_A1,PAP0262_data_A1,SBX1794_data_A1,PAP176682_data_A1,IRC200442_data_A1,IRC200406_data_A1,IRC200432_data_A1,PAP271424_data_A1,IRC202199_data_A1,IRC200493_data_A1,IRC200082_data_A1,IRC200368_data_A1,IRC201885_data_A1,SCD5333_data_A1,SCD5502_data_A1,SCD5310_data_A1,SCD1207_data_A1,IRC202179_data_A1,IRC200852_data_A1,PAP204425_data_A1,IRC200447_data_A1,IRC201327_data_A1,PAP154577_data_A1,IRC203820_data_A1,IRC200039_data_A1,PAP230951_data_A1,IRC201494_data_A1,SCD2689_data_A1,IRC201489_data_A1,IRC201484_data_A1,IRC201611_data_A1,PAP294956_data_A1,PAP263668_data_A1,IRC201444_data_A1,SCD4377_data_A1,PAP2209_data_A1,IRC203699_data_A1,PAP166638_data_A1,IRC203784_data_A1,IRC200503_data_A1,IRC201906_data_A1,IRC201422_data_A1,PAP275925_data_A1,PAP166381_data_A1,IRC201423_data_A1,IRC201330_data_A1,PAP193815_data_A1,PAP288354_data_A1,SCD3094_data_A1,SCD2971_data_A1,IRC201395_data_A1,SCD3227_data_A1,SCD2757_data_A1,IRC201242_data_A1,PAP166063_data_A1,IRC203753_data_A1,IRC202342_data_A1,PAP280458_data_A1,IRC202123_data_A1,PAP192131_data_A1,PAP165294_data_A1,IRC203863_data_A1,PAP222082_data_A1,IRC200916_data_A1,IRC200920_data_A1,SCD5148_data_A1,PAP190851_data_A1,IRC201042_data_A1,IRC201134_data_A1,IRC200921_data_A1,IRC201135_data_A1,IRC201117_data_A1,IRC201113_data_A1,IRC201122_data_A1,IRC200865_data_A1,IRC202272_data_A1,IRC200918_data_A1,IRC201133_data_A1,IRC202274_data_A1,PAP276940_data_A1,IRC200033_data_A1,IRC201950_data_A1,IRC200929_data_A1,IRC202143_data_A1,IRC200895_data_A1,IRC203751_data_A1,PAP140614_data_A1,IRC201300_data_A1,SBX1143_data_A1,IRC202305_data_A1,IRC200362_data_A1,PAP303577_data_A1,PAP262840_data_A1,PAP2958_data_A1,PAP213832_data_A1,SBX1883_data_A1,SCD5180_data_A1,SCD5251_data_A1,IRC201469_data_A1,PAP186022_data_A1,IRC200814_data_A1,IRC200827_data_A1,PAP1181_data_A1,IRC200096_data_A1,IRC202283_data_A1,SBX1356_data_A1,SCD1456_data_A1,PAP295881_data_A1,SCD4215_data_A1,PAP271425_data_A1,IRC200073_data_A1,PAP188290_data_A1,IRC200586_data_A1,IRC201381_data_A1,IRC201159_data_A1,IRC201908_data_A1,IRC201359_data_A1,PAP231871_data_A1,PAP185754_data_A1,IRC200391_data_A1,PAP286868_data_A1,IRC201370_data_A1,IRC200392_data_A1,IRC200613_data_A1,IRC202351_data_A1,IRC201362_data_A1,PAP171712_data_A1,IRC200038_data_A1,IRC201271_data_A1,IRC201032_data_A1,PAP249557_data_A1,IRC202269_data_A1,SCD2376_data_A1,SCD2945_data_A1,IRC200474_data_A1,IRC201754_data_A1,IRC201240_data_A1,IRC201625_data_A1,PAP137302_data_A1,IRC201251_data_A1,IRC202132_data_A1,PAP297501_data_A1,SCD2819_data_A1,IRC201626_data_A1,IRC202151_data_A1,IRC201061_data_A1,PAP231246_data_A1,IRC201693_data_A1,PAP130757_data_A1,IRC201106_data_A1,IRC201073_data_A1,PAP266565_data_A1,IRC201063_data_A1,PAP211319_data_A1,PAP290655_data_A1,PAP251564_data_A1,PAP3468_data_A1,IRC201714_data_A1,PAP292937_data_A1,IRC201046_data_A1,IRC200786_data_A1,IRC201642_data_A1,IRC200373_data_A1,IRC201672_data_A1,PAP2386_data_A1,PAP246688_data_A1,IRC203777_data_A1,PAP206100_data_A1,IRC201326_data_A1,IRC200900_data_A1,IRC201110_data_A1,PAP268297_data_A1,IRC200841_data_A1,PAP208361_data_A1,SCD5119_data_A1,PAP255791_data_A1,SCD4145_data_A1,PAP151075_data_A1,PAP141130_data_A1,PAP288394_data_A1,PAP135584_data_A1,SCD3011_data_A1,SCD3691_data_A1,SCD4539_data_A1,SCD1110_data_A1,SCD1238_data_A1,SCD4506_data_A1,IRC201366_data_A1,IRC201382_data_A1,PAP244833_data_A1,PAP193556_data_A1,PAP129559_data_A1,PAP165199_data_A1,PAP2530_data_A1,PAP281318_data_A1,PAP230792_data_A1,IRC200544_data_A1,IRC201401_data_A1,IRC202383_data_A1,PAP148013_data_A1,PAP266705_data_A1,IRC200375_data_A1,PAP138999_data_A1,SCD4514_data_A1,SCD4601_data_A1,SCD4662_data_A1,SCD1174_data_A1,PAP1018_data_A1,PAP195959_data_A1,PAP230717_data_A1,IRC200422_data_A1,IRC200644_data_A1,PAP2477_data_A1,PAP224464_data_A1,PAP105859_data_A1,PAP232062_data_A1,PAP236716_data_A1,IRC200061_data_A1,PAP606638_data_A1,IRC200367_data_A1,PAP239293_data_A1,PAP151562_data_A1,IRC200047_data_A1,PAP108151_data_A1,IRC200833_data_A1,PAP1346_data_A1,PAP254648_data_A1,PAP172690_data_A1,IRC200348_data_A1,IRC201712_data_A1,PAP224841_data_A1,PAP135445_data_A1,PAP121831_data_A1,IRC202353_data_A1,PAP3373_data_A1,IRC200907_data_A1,PAP288411_data_A1,IRC201097_data_A1,IRC201630_data_A1,SCD1074_data_A1,PAP262184_data_A1,PAP272461_data_A1,SCD1170_data_A1,SCD1097_data_A1,IRC202213_data_A1,IRC203823_data_A1,SCD1947_data_A1,PAP260166_data_A1,IRC201954_data_A1,SCD3117_data_A1,SCD2748_data_A1,PAP236743_data_A1,IRC203792_data_A1,IRC201705_data_A1,IRC201669_data_A1,PAP292105_data_A1,IRC201406_data_A1,PAP148071_data_A1,PAP274291_data_A1,IRC200855_data_A1,PAP228222_data_A1,IRC201379_data_A1,PAP251899_data_A1,IRC202134_data_A1,IRC202330_data_A1,PAP1101_data_A1,IRC201386_data_A1,PAP144721_data_A1,IRC200708_data_A1,IRC201593_data_A1,IRC200533_data_A1,PAP3338_data_A1,PAP281659_data_A1,IRC200679_data_A1,SCD1389_data_A1,IRC200536_data_A1,PAP168627_data_A1,PAP256745_data_A1,PAP256080_data_A1,PAP142488_data_A1,PAP194663_data_A1,PAP265140_data_A1,IRC203739_data_A1,IRC201697_data_A1,PAP136691_data_A1,IRC202170_data_A1,IRC202163_data_A1,IRC202238_data_A1,IRC203997_data_A1,SCD6044_data_A1,PAP0951_data_A1,PAP252931_data_A1,SCD5349_data_A1,IRC201009_data_A1,PAP2455_data_A1,IRC201758_data_A1,PAP253156_data_A1,PAP231550_data_A1,IRC202149_data_A1,IRC202180_data_A1,IRC201039_data_A1,PAP0039_data_A1,IRC202174_data_A1,SCD4648_data_A1,SCD5293_data_A1,PAP193712_data_A1,PAP101496_data_A1,SBX1309_data_A1,IRC202357_data_A1,SCD1362_data_A1,IRC202153_data_A1,PAP198035_data_A1,IRC201634_data_A1,IRC201011_data_A1,IRC201027_data_A1,PAP228709_data_A1,SCD1448_data_A1,PAP217220_data_A1,PAP176141_data_A1,IRC202126_data_A1,IRC202176_data_A1,IRC200013_data_A1,IRC200555_data_A1,PAP134042_data_A1,PAP118772_data_A1,PAP218212_data_A1,PAP248755_data_A1,PAP2146_data_A1,SCD3361_data_A1,SBX1791_data_A1,IRC200639_data_A1,PAP137707_data_A1,IRC202231_data_A1,PAP289179_data_A1,PAP147175_data_A1,PAP253265_data_A1,PAP218999_data_A1,PAP266479_data_A1,PAP105180_data_A1,PAP159411_data_A1,PAP285785_data_A1,PAP100882_data_A1,SCD1818_data_A1,PAP2827_data_A1,IRC201402_data_A1,IRC201440_data_A1,IRC201421_data_A1,PAP279593_data_A1,PAP212377_data_A1,IRC200526_data_A1,PAP265476_data_A1,IRC201912_data_A1,IRC203754_data_A1,IRC203728_data_A1,IRC203737_data_A1,IRC201756_data_A1,IRC201875_data_A1,PAP116469_data_A1,IRC203735_data_A1,SCD1215_data_A1,PAP103127_data_A1,SCD1262_data_A1,PAP170555_data_A1,PAP156465_data_A1,PAP215161_data_A1,PAP2116_data_A1,PAP289236_data_A1,IRC202177_data_A1,IRC202258_data_A1,IRC200410_data_A1,PAP174906_data_A1,IRC201084_data_A1,PAP1845_data_A1,SBX1001_data_A1,IRC200059_data_A1,IRC200413_data_A1,IRC202262_data_A1,PAP214941_data_A1,PAP159570_data_A1,PAP163403_data_A1,IRC202375_data_A1,IRC201223_data_A1,IRC200364_data_A1,IRC200358_data_A1,IRC201403_data_A1,SCD4592_data_A1,IRC201941_data_A1,IRC203662_data_A1,IRC200372_data_A1,PAP2752_data_A1,IRC200901_data_A1,IRC201357_data_A1,SCD1867_data_A1,PAP228748_data_A1,IRC200456_data_A1,IRC200925_data_A1,PAP0761_data_A1,IRC200414_data_A1,PAP0511_data_A1,IRC200815_data_A1,IRC202129_data_A1,IRC202271_data_A1,IRC200962_data_A1,PAP133399_data_A1,PAP2373_data_A1,PAP232197_data_A1,PAP2376_data_A1,IRC200097_data_A1,IRC200911_data_A1,PAP237084_data_A1,IRC200086_data_A1,IRC202181_data_A1,IRC200349_data_A1,IRC200381_data_A1,IRC200374_data_A1,PAP0205_data_A1,IRC200426_data_A1,IRC201092_data_A1,IRC201080_data_A1,IRC201015_data_A1,IRC200435_data_A1,IRC201013_data_A1,IRC201050_data_A1,IRC201016_data_A1,IRC201010_data_A1,IRC200062_data_A1,IRC200385_data_A1,PAP222669_data_A1,IRC201035_data_A1,IRC201056_data_A1,PAP274477_data_A1,PAP171873_data_A1,IRC201786_data_A1,SCD5976_data_A1,PAP231732_data_A1,SBX1030_data_A1,SCD5643_data_A1,IRC201701_data_A1,PAP112557_data_A1,IRC203840_data_A1,IRC203725_data_A1,PAP1833_data_A1,PAP188158_data_A1,PAP214669_data_A1,PAP255487_data_A1,PAP200922_data_A1,PAP1870_data_A1,PAP2314_data_A1,IRC202168_data_A1,IRC202249_data_A1,PAP163411_data_A1,IRC202175_data_A1,(PAP2280_data_A1,PAP170789_data_A1,PAP3186_data_A1,PAP2207_data_A1,PAP177421_data_A1,PAP215641_data_A1,PAP2271_data_A1,PAP182526_data_A1,SBX1221_data_A1,PAP267825_data_A1,PAP198950_data_A1,PAP2303_data_A1,PAP0407_data_A1,PAP136549_data_A1,PAP165436_data_A1,PAP138931_data_A1,PAP251881_data_A1,(PAP162465_data_A1,PAP205416_data_A1)55,(SCD2920_data_A1,SCD2808_data_A1)96)70,(((PAP198736_data_A1,IRC202359_data_A1,(PAP105386_data_A1,SCD3119_data_A1)59)52,(IRC200626_data_A1,IRC200617_data_A1)75)61,((IRC203900_data_A1,(PAP289469_data_A1,SCD2381_data_A1)84)67,(PAP189735_data_A1,PAP200323_data_A1)99)55)76,(PAP2288_data_A1,IRC201249_data_A1,(PAP2815_data_A1,IRC201214_data_A1,PAP266283_data_A1)55,(IRC200468_data_A1,IRC202131_data_A1)60,(IRC201222_data_A1,IRC201226_data_A1)54)85,(PAP2506_data_A1,(PAP141784_data_A1,(SCD1253_data_A1,PAP230813_data_A1,PAP262369_data_A1,PAP217976_data_A1,(IRC203686_data_A1,PAP263147_data_A1)76)53)54)68,(SBX1552_data_A1,PAP210464_data_A1,PAP123699_data_A1,PAP143921_data_A1,PAP285454_data_A1,(PAP205038_data_A1,PAP209999_data_A1)83)54,(PAP2790_data_A1,(IRC200759_data_A1,IRC203941_data_A1,IRC200961_data_A1,IRC202273_data_A1,IRC200913_data_A1,IRC200756_data_A1)71)66,(IRC203665_data_A1,IRC202102_data_A1,PAP169312_data_A1,IRC202104_data_A1,PAP104306_data_A1,PAP188240_data_A1,IRC202089_data_A1)59,(PAP271416_data_A1,(PAP175536_data_A1,(PAP269938_data_A1,PAP143138_data_A1)89)68,(PAP175644_data_A1,PAP266826_data_A1)55)59,(PAP269842_data_A1,IRC201076_data_A1,IRC201004_data_A1,IRC201094_data_A1,PAP261367_data_A1,IRC201104_data_A1)68,(IRC202335_data_A1,IRC201598_data_A1,IRC202337_data_A1,IRC201896_data_A1,(IRC202331_data_A1,IRC201914_data_A1)96)58,(IRC200046_data_A1,PAP133967_data_A1,IRC201301_data_A1,IRC200424_data_A1,PAP3184_data_A1,IRC200095_data_A1)74,(PAP187252_data_A1,IRC203706_data_A1,IRC203787_data_A1,IRC203705_data_A1,IRC203703_data_A1,PAP2154_data_A1)57,(IRC200952_data_A1,IRC200779_data_A1,IRC200888_data_A1,IRC202373_data_A1,(IRC200837_data_A1,IRC200928_data_A1)67)57,(PAP219641_data_A1,((PAP199183_data_A1,PAP133925_data_A1)60,(PAP244649_data_A1,PAP137717_data_A1)59)73)80,(PAP182174_data_A1,PAP157896_data_A1,(PAP254397_data_A1,(PAP234616_data_A1,PAP166544_data_A1)57)57)62,(IRC202263_data_A1,((IRC200997_data_A1,IRC201000_data_A1)94,(IRC200816_data_A1,IRC200930_data_A1)71)64)68,(PAP131315_data_A1,PAP154871_data_A1,(PAP295987_data_A1,(PAP2754_data_A1,PAP0508_data_A1)67)56)57,(IRC200223_data_A1,IRC200207_data_A1,IRC200253_data_A1,(IRC200154_data_A1,IRC200319_data_A1)69)52,(IRC202084_data_A1,(IRC202105_data_A1,(IRC202076_data_A1,(IRC202087_data_A1,IRC202098_data_A1)71)63)56)82,(IRC201925_data_A1,PAP266910_data_A1,IRC201955_data_A1,(PAP2611_data_A1,PAP2862_data_A1)53)53,(PAP273534_data_A1,PAP266875_data_A1,(PAP119311_data_A1,PAP165320_data_A1)71)62,(PAP292780_data_A1,PAP244902_data_A1,IRC200652_data_A1,IRC202078_data_A1)61,(IRC200684_data_A1,PAP215344_data_A1,PAP2278_data_A1,IRC200480_data_A1)67,(PAP234145_data_A1,SCD1566_data_A1,(SCD4125_data_A1,SBX1333_data_A1)69)51,((IRC200092_data_A1,SCD5803_data_A1)70,(IRC200863_data_A1,IRC202398_data_A1)92)61,((SCD1261_data_A1,IRC203694_data_A1)76,(PAP198286_data_A1,IRC202315_data_A1)54)52,(PAP211630_data_A1,PAP124494_data_A1,(PAP273013_data_A1,PAP229024_data_A1)62)61,(IRC201101_data_A1,(IRC201136_data_A1,(PAP137241_data_A1,PAP2194_data_A1)67)67)57,(PAP224648_data_A1,(PAP2977_data_A1,(PAP2750_data_A1,PAP100981_data_A1)55)53)55,(IRC200088_data_A1,(PAP108218_data_A1,(SCD4225_data_A1,SCD2652_data_A1)83)81)85,(IRC202239_data_A1,(IRC202240_data_A1,(IRC202219_data_A1,IRC202229_data_A1)79)79)79,(IRC200043_data_A1,(IRC200388_data_A1,(IRC201884_data_A1,IRC200346_data_A1)65)66)65,(IRC200486_data_A1,IRC202130_data_A1,(IRC200475_data_A1,IRC200465_data_A1)60)74,(IRC200942_data_A1,IRC200992_data_A1,IRC200822_data_A1,IRC200846_data_A1)57,(PAP255267_data_A1,PAP212251_data_A1,PAP185327_data_A1,PAP2497_data_A1)80,(IRC202358_data_A1,(PAP2704_data_A1,(PAP2968_data_A1,IRC201325_data_A1)75)70)65,(IRC204026_data_A1,IRC202100_data_A1,IRC202090_data_A1)70,(IRC200726_data_A1,(IRC200734_data_A1,IRC200739_data_A1)95)93,(PAP123069_data_A1,SCD1400_data_A1,PAP3337_data_A1)56,(IRC200787_data_A1,IRC200823_data_A1,IRC200971_data_A1)66,(PAP105247_data_A1,(PAP2394_data_A1,PAP259153_data_A1)60)94,(PAP257045_data_A1,(PAP255971_data_A1,PAP219378_data_A1)82)60,(PAP125291_data_A1,(PAP276369_data_A1,PAP161420_data_A1)59)62,(SCD1811_data_A1,PAP253653_data_A1,PAP112064_data_A1)56,(IRC203834_data_A1,(SBX2301_data_A1,SCD2304_data_A1)63)51,(IRC201592_data_A1,IRC203669_data_A1,IRC200527_data_A1)55,(PAP182238_data_A1,(PAP109683_data_A1,PAP259482_data_A1)54)65,(PAP0339_data_A1,(PAP278262_data_A1,PAP2470_data_A1)55)58,(PAP258691_data_A1,(PAP2885_data_A1,PAP283620_data_A1)55)64,(SBX1189_data_A1,(PAP143646_data_A1,PAP233600_data_A1)71)52,(PAP184850_data_A1,PAP2928_data_A1,PAP174708_data_A1)91,(PAP249026_data_A1,(SCD3042_data_A1,PAP202654_data_A1)62)55,(IRC201053_data_A1,(IRC201064_data_A1,IRC201124_data_A1)84)72,(PAP138459_data_A1,PAP285221_data_A1,SCD4158_data_A1)54,(PAP2050_data_A1,PAP126837_data_A1,PAP2193_data_A1)81,(PAP101083_data_A1,(PAP149243_data_A1,PAP233738_data_A1)65)60,(PAP266741_data_A1,(PAP138978_data_A1,PAP124596_data_A1)51)76,(SBX1200_data_A1,(SBX2249_data_A1,PAP293994_data_A1)56)61,(PAP140346_data_A1,SCD4327_data_A1,SCD4420_data_A1)57,(PAP0918_data_A1,(PAP1073_data_A1,PAP207791_data_A1)75)54,(PAP163287_data_A1,SBX1835_data_A1,PAP150282_data_A1)52,(PAP110129_data_A1,PAP252306_data_A1,PAP3555_data_A1)53,(PAP179601_data_A1,(PAP207354_data_A1,PAP199462_data_A1)81)79,(IRC203778_data_A1,(SCD1668_data_A1,SCD1396_data_A1)71)52,(IRC201020_data_A1,IRC201074_data_A1,IRC201086_data_A1)53,(PAP273122_data_A1,IRC203676_data_A1,PAP2505_data_A1)55,(IRC201057_data_A1,IRC201040_data_A1,IRC201018_data_A1)61,(PAP299316_data_A1,PAP2980_data_A1,PAP275681_data_A1)63,(IRC200789_data_A1,IRC200085_data_A1,IRC200443_data_A1)71,(PAP235205_data_A1,(PAP107517_data_A1,SCD5501_data_A1)53)59,(SCD2673_data_A1,(SCD4108_data_A1,SCD4161_data_A1)82)57,(IRC200402_data_A1,(IRC202138_data_A1,IRC202114_data_A1)92)76,(IRC200725_data_A1,IRC203729_data_A1,IRC203996_data_A1)64,(IRC201801_data_A1,(IRC201803_data_A1,IRC201802_data_A1)88)81,(PAP265135_data_A1,(PAP1714_data_A1,PAP236754_data_A1)83)64,(PAP191108_data_A1,(PAP2561_data_A1,PAP132193_data_A1)78)62,(PAP137600_data_A1,(PAP212307_data_A1,PAP148805_data_A1)57)52,(SBX2267_data_A1,(PAP106547_data_A1,PAP3457_data_A1)58)58,(SBX1732_data_A1,PAP237467_data_A1,PAP172983_data_A1)53,(SCD6103_data_A1,PAP150337_data_A1,PAP3031_data_A1)53,(PAP0529_data_A1,PAP116023_data_A1,PAP2742_data_A1)66,(SBX1846_data_A1,PAP2612_data_A1,IRC201331_data_A1)65,(PAP236682_data_A1,(PAP163756_data_A1,PAP0968_data_A1)58)57,(IRC201616_data_A1,(IRC201345_data_A1,IRC201351_data_A1)69)55,(IRC200347_data_A1,(PAP291638_data_A1,IRC200438_data_A1)97)55,(PAP1785_data_A1,PAP262054_data_A1,PAP201564_data_A1)65,(PAP2570_data_A1,(PAP205712_data_A1,PAP2452_data_A1)55)79,(SCD1136_data_A1,(PAP140007_data_A1,PAP221277_data_A1)72)71,(PAP256717_data_A1,(PAP0292_data_A1,PAP2256_data_A1)84)84,(IRC202192_data_A1,(IRC200078_data_A1,IRC200052_data_A1)69)66,(SCD4459_data_A1,(IRC201684_data_A1,PAP161368_data_A1)79)82,(IRC200365_data_A1,(PAP218058_data_A1,IRC200444_data_A1)54)60,(IRC200737_data_A1,IRC200705_data_A1,IRC200738_data_A1)86,(PAP227155_data_A1,PAP172254_data_A1)66,(IRC200696_data_A1,IRC200671_data_A1)84,(PAP187915_data_A1,SCD5625_data_A1)56,(PAP239913_data_A1,PAP200178_data_A1)64,(IRC200965_data_A1,PAP297844_data_A1)62,(PAP2433_data_A1,PAP174259_data_A1)93,(IRC203902_data_A1,IRC201167_data_A1)75,(IRC200431_data_A1,SCD5629_data_A1)51,(IRC200730_data_A1,IRC200731_data_A1)70,(PAP142719_data_A1,PAP113645_data_A1)94,(PAP260980_data_A1,PAP141263_data_A1)64,(SCD4038_data_A1,SCD1680_data_A1)54,(PAP2895_data_A1,PAP113270_data_A1)57,(PAP147307_data_A1,PAP254733_data_A1)61,(PAP153048_data_A1,PAP2308_data_A1)82,(PAP105303_data_A1,IRC200715_data_A1)66,(IRC200832_data_A1,IRC200998_data_A1)64,(PAP2351_data_A1,PAP164556_data_A1)73,(IRC202099_data_A1,IRC202077_data_A1)53,(PAP118125_data_A1,PAP178546_data_A1)57,(IRC201289_data_A1,IRC202086_data_A1)88,(IRC201594_data_A1,IRC201432_data_A1)61,(PAP105292_data_A1,PAP279370_data_A1)58,(PAP149600_data_A1,PAP146265_data_A1)68,(IRC201140_data_A1,IRC201335_data_A1)56,(PAP282531_data_A1,PAP257678_data_A1)59,(PAP2272_data_A1,PAP233878_data_A1)54,(SCD4100_data_A1,SCD2300_data_A1)65,(PAP108318_data_A1,PAP1243_data_A1)74,(IRC201397_data_A1,IRC201352_data_A1)59,(PAP164548_data_A1,IRC200408_data_A1)78,(PAP3265_data_A1,PAP3275_data_A1)80,(PAP3607_data_A1,SCD2453_data_A1)66,(PAP1182_data_A1,PAP213957_data_A1)62,(PAP0717_data_A1,PAP217754_data_A1)75,(PAP147054_data_A1,IRC203744_data_A1)78,(IRC203752_data_A1,SCD1714_data_A1)54,(PAP168747_data_A1,PAP136841_data_A1)52,(SCD4734_data_A1,PAP122280_data_A1)65,(PAP282352_data_A1,PAP200713_data_A1)60,(PAP200590_data_A1,PAP225219_data_A1)59,(IRC201232_data_A1,IRC201168_data_A1)53,(IRC200437_data_A1,IRC200360_data_A1)91,(PAP168454_data_A1,SBX2323_data_A1)66,(IRC201298_data_A1,IRC202292_data_A1)96,(IRC202161_data_A1,IRC202254_data_A1)66,(IRC200540_data_A1,IRC200508_data_A1)73,(IRC200409_data_A1,IRC200401_data_A1)76,(PAP217354_data_A1,PAP127478_data_A1)98,(IRC202368_data_A1,IRC200938_data_A1)55,(IRC200854_data_A1,IRC200877_data_A1)52,(PAP222773_data_A1,PAP282069_data_A1)84,(IRC200744_data_A1,IRC200747_data_A1)70,(SCD4310_data_A1,PAP145750_data_A1)61,(PAP0839_data_A1,PAP271046_data_A1)53,(IRC202400_data_A1,IRC200770_data_A1)53,(PAP2166_data_A1,PAP216703_data_A1)60,(PAP189694_data_A1,SCD5769_data_A1)58,(IRC200067_data_A1,IRC200405_data_A1)64,(IRC203786_data_A1,IRC203785_data_A1)83,(IRC201398_data_A1,IRC201435_data_A1)84,(PAP2350_data_A1,PAP206314_data_A1)67,(IRC200959_data_A1,IRC200966_data_A1)52,(IRC202144_data_A1,IRC202122_data_A1)99,(PAP210000_data_A1,PAP180312_data_A1)63,(IRC203804_data_A1,IRC200538_data_A1)70,(SCD1545_data_A1,PAP204159_data_A1)99,(IRC200821_data_A1,IRC200940_data_A1)65,(PAP101998_data_A1,SCD2528_data_A1)66,(IRC200790_data_A1,IRC202390_data_A1)62,(SCD5298_data_A1,SBX1115_data_A1)61,(IRC201905_data_A1,IRC201924_data_A1)74,(IRC200452_data_A1,IRC201283_data_A1)79,(PAP214866_data_A1,PAP123382_data_A1)53,(IRC200777_data_A1,IRC202282_data_A1)56,(PAP2940_data_A1,PAP171809_data_A1)55,(IRC201060_data_A1,IRC201059_data_A1)88,(SCD2426_data_A1,SBX1964_data_A1)62,(PAP1190_data_A1,PAP122529_data_A1)72,(PAP1377_data_A1,SCD5773_data_A1)72,(PAP176495_data_A1,PAP105044_data_A1)60,(PAP269635_data_A1,PAP143041_data_A1)65,(PAP166872_data_A1,PAP283590_data_A1)52,(IRC200084_data_A1,IRC200083_data_A1)97,(PAP123166_data_A1,PAP276038_data_A1)53,(PAP225936_data_A1,SCD6076_data_A1)61,(SCD1039_data_A1,SCD1346_data_A1)54,(SBX2287_data_A1,SCD4124_data_A1)57,(PAP130558_data_A1,PAP2721_data_A1)57,(PAP132614_data_A1,PAP2682_data_A1)79,(PAP0836_data_A1,PAP2841_data_A1)53,(PAP101053_data_A1,PAP2037_data_A1)58,(PAP1865_data_A1,SCD1422_data_A1)55,(PAP157081_data_A1,PAP242239_data_A1)58,(PAP190046_data_A1,PAP161574_data_A1)67,(SCD3569_data_A1,PAP275639_data_A1)54,(PAP128914_data_A1,PAP2525_data_A1)71,(PAP199978_data_A1,SCD3146_data_A1)61,(PAP141076_data_A1,PAP164041_data_A1)99,(PAP154594_data_A1,PAP230848_data_A1)56,(PAP114643_data_A1,PAP2410_data_A1)67,(PAP256514_data_A1,IRC200507_data_A1)58,(IRC200048_data_A1,IRC200851_data_A1)51,(PAP283862_data_A1,SCD5540_data_A1)52,(IRC202166_data_A1,IRC200564_data_A1)59,(PAP2594_data_A1,PAP116617_data_A1)61,(PAP230842_data_A1,PAP296870_data_A1)64,(IRC200958_data_A1,IRC200951_data_A1)54,(IRC201031_data_A1,IRC201014_data_A1)68,(PAP2813_data_A1,PAP192622_data_A1)84,(PAP1953_data_A1,PAP3543_data_A1)96,(PAP140497_data_A1,PAP2965_data_A1)97,(PAP284666_data_A1,PAP191399_data_A1)51,(PAP287165_data_A1,SCD1378_data_A1)52,(IRC203687_data_A1,PAP291589_data_A1)51,(PAP102296_data_A1,PAP116285_data_A1)84,(IRC201796_data_A1,IRC201798_data_A1)82,(SCD2442_data_A1,SCD2308_data_A1)60,(PAP290383_data_A1,PAP291799_data_A1)64,(IRC201384_data_A1,IRC202321_data_A1)96,(PAP241366_data_A1,SCD2284_data_A1)68,(PAP2740_data_A1,PAP101249_data_A1)86,(IRC200395_data_A1,IRC200394_data_A1)60,(PAP2228_data_A1,PAP186184_data_A1)71,(PAP261907_data_A1,PAP101663_data_A1)77,(IRC203801_data_A1,IRC203793_data_A1)59,(PAP2185_data_A1,PAP142947_data_A1)61,(PAP216767_data_A1,PAP134959_data_A1)60,(PAP131784_data_A1,PAP150568_data_A1)64,(SBX1249_data_A1,SBX1027_data_A1)72,(PAP221915_data_A1,PAP121879_data_A1)73,(PAP1288_data_A1,PAP294225_data_A1)61,(SCD6051_data_A1,IRC200806_data_A1)53,(IRC200509_data_A1,IRC204013_data_A1)57,(SCD5317_data_A1,PAP241967_data_A1)60,(PAP151576_data_A1,PAP161762_data_A1)78,(IRC201103_data_A1,PAP101867_data_A1)61,(IRC200993_data_A1,IRC200946_data_A1)62,(PAP275294_data_A1,PAP2292_data_A1)65,(SCD3503_data_A1,SCD3398_data_A1)66,(IRC200379_data_A1,IRC200390_data_A1)92,(PAP252926_data_A1,PAP108279_data_A1)59,(IRC200522_data_A1,IRC200512_data_A1)56,(PAP3131_data_A1,PAP2428_data_A1)66,(PAP3593_data_A1,PAP2671_data_A1)51,(IRC202133_data_A1,IRC202113_data_A1)99,(SCD2048_data_A1,PAP111730_data_A1)52,(PAP0962_data_A1,PAP0145_data_A1)75,(PAP1510_data_A1,IRC202252_data_A1)75,(PAP295656_data_A1,PAP189291_data_A1)54,(IRC204002_data_A1,IRC204020_data_A1)55,(PAP118497_data_A1,PAP197685_data_A1)59,(PAP276483_data_A1,PAP291864_data_A1)65,(PAP182305_data_A1,PAP141876_data_A1)55,(PAP287935_data_A1,IRC201694_data_A1)97,(PAP185324_data_A1,PAP3413_data_A1)56,(PAP2847_data_A1,PAP2304_data_A1)78,(PAP0617_data_A1,PAP603106_data_A1)62,(PAP226865_data_A1,SCD6066_data_A1)57,(PAP168773_data_A1,PAP2195_data_A1)93,(IRC203731_data_A1,SCD1432_data_A1)53,(PAP2346_data_A1,PAP202940_data_A1)69,(SCD4297_data_A1,SCD3811_data_A1)54,(SBX1888_data_A1,SBX1292_data_A1)53,(PAP194276_data_A1,PAP266425_data_A1)53,(PAP155279_data_A1,PAP105864_data_A1)68,(IRC201349_data_A1,IRC201900_data_A1)52,(PAP185970_data_A1,PAP159328_data_A1)51,(PAP251310_data_A1,PAP3507_data_A1)86,(IRC200502_data_A1,IRC201412_data_A1)59,(IRC202233_data_A1,IRC201865_data_A1)61,(PAP234107_data_A1,PAP153499_data_A1)62,(PAP247564_data_A1,PAP162725_data_A1)93,(SCD5831_data_A1,PAP1751_data_A1)67,(PAP111822_data_A1,PAP252247_data_A1)58);'

open(IN_TREE, "$tree_file") or die "Could not open file $tree_file\n";

print "\n\n################################################################################";
print "\nRecording sister pairs from $tree_file...\n";

my $tree = '';

# Store one (first) tree from file
while(<IN_TREE>) {
	chomp($_);
	my $line = $_;
#	print "line=$line\n";
	if($line =~ /^\(/) { # line starts with an opening parentheses
#		print "MATCHED1\n";
		if($line =~ /;$/) { # line ends with a semicolor
			if($tree ne '') {
				warn "\n### TREE FILE CONTAINS MULTIPLE TREES. USING ONLY THE FIRST.\n";
				last;
			} else {
				$tree = $line;
			}
		}
	}
}

close IN_TREE;

if($tree eq '') {
	die "\n### NO TREE IN TREE FILE. Must begin with '(' and end with ';'. SCRIPT TERMINATED.\n\n";
}

# Remove all branch lengths
$tree =~ s/:[\d\.]+//g;

# Reduce polytomies to the two sequences with most data (non-N, non-gap)
if($prune_polytomies) {
	print "\n\n################################################################################\n";
	print "Removing sequences from polytomies... sequences removed:\n";
	
	my $num_seqs_removed = 0;
	
	while($tree =~ /\((\w+),(\w+),(\w+)/g) {
		my $header1 = $1;
		my $header2 = $2;
		my $header3 = $3;
		
		my $seq1_def_len = $header_to_def_len{$header1};
		my $seq2_def_len = $header_to_def_len{$header2};
		my $seq3_def_len = $header_to_def_len{$header3};
		
	#	my $header_least_data;
		my $which_header_least;
		if($seq1_def_len < $seq2_def_len) { # seq1 < seq2
			if($seq1_def_len < $seq3_def_len) { # seq1 < seq3
	#			$header_least_data = $header1;
				$which_header_least = 1;
			} else { # seq3 < seq1
	#			$header_least_data = $header3;
				$which_header_least = 3;
			}
		} else { # seq2 < seq1
			if($seq2_def_len < $seq3_def_len) {  # seq2 < seq3
	#			$header_least_data = $header2;
				$which_header_least = 2;
			} else { # seq3 < seq2
	#			$header_least_data = $header3;
				$which_header_least = 3;
			}
		}
		
		# Remove header with least data
		if($which_header_least == 1) {
			#print "removing $header1 with $seq1_def_len (vs. $seq2_def_len or $seq3_def_len)\n";
			print "$header1 ";
			$tree =~ s/$header1\,//;
			$num_seqs_removed++;
		} elsif($which_header_least == 2) {
			$tree =~ s/$header2\,//;
			#print "removing $header2 with $seq2_def_len (vs. $seq1_def_len or $seq3_def_len)\n";
			print "$header2 ";
			$num_seqs_removed++;
		} else {
			$tree =~ s/\,$header3//;
			#print "removing $header3 with $seq3_def_len (vs. $seq1_def_len or $seq2_def_len)\n";
			print "$header3 ";
			$num_seqs_removed++;
		}
	}
	
	print "\n\n### $num_seqs_removed sequences were removed from polytomies.\n";
}

# Find all sister pairs
my %sister_pairs;
my %sister_pair_members;
my %sister_pair_bootstraps;
my $num_sisters = 0;

while($tree =~ /\((\w+),(\w+)\)(\d+)/g) {
	my $sister1 = $1;
	my $sister2 = $2;
	my $bootstrap = $3;
	
#	print "Sisters $1 and $2 are supported by a bootstrap of $3\n";
	
	if($bootstrap >= $min_support) {
		$num_sisters++;
		my @sisters_ordered = ($sister1, $sister2);
		@sisters_ordered = sort @sisters_ordered;
		$sister_pairs{$sisters_ordered[0]} = $sisters_ordered[1];
		$sister_pair_members{$sisters_ordered[0]} = 1;
		$sister_pair_members{$sisters_ordered[1]} = 1;
		$sister_pair_bootstraps{$sisters_ordered[0]}->{$sisters_ordered[1]} = $bootstrap;
	}
}

if($num_sisters == 0) { # then perhaps the bootstraps were in bracket notation
	while($tree =~ /\((\w+),(\w+)\)\[(\d+)\]/g) {
		my $sister1 = $1;
		my $sister2 = $2;
		my $bootstrap = $3;
		
	#	print "Sisters $1 and $2 are supported by a bootstrap of $3\n";
		
		if($bootstrap >= $min_support) {
			$num_sisters++;
			my @sisters_ordered = ($sister1, $sister2);
			@sisters_ordered = sort @sisters_ordered;
			$sister_pairs{$sisters_ordered[0]} = $sisters_ordered[1];
			$sister_pair_members{$sisters_ordered[0]} = 1;
			$sister_pair_members{$sisters_ordered[1]} = 1;
			$sister_pair_bootstraps{$sisters_ordered[0]}->{$sisters_ordered[1]} = $bootstrap;
		}
	}
}

print "\n### There were $num_sisters sisters with sufficient bootstrap support \(>=$min_support\).\n";


##########################################################################################
# Check that we have sequences with matching headers
foreach my $member (keys %sister_pair_members) {
	unless(exists $header2sequence{$member}) {
		die "\n### WARNING: no sequence with header $member, found in tree. TERMINATING.\n\n";
	}
}


##########################################################################################
# ANALYZE ALL SISTER PAIRS, PRINT CODON FILE, AND STORE SISTER TOTALS
my %sister_data_hh;
my %site_diffs_hh;
my %seq2sites;
my %seq_completed;

print "\n\n################################################################################".
	"\nANALYZING SISTER PAIRS\n";

my $pair_num = 0;

open(CODON_FILE,">>OLGenie\_codon\_results\.txt");
print CODON_FILE "fasta_file\ttree_file\tpair\tsister1\tsister2\tbootstrap\tcodon_num\t" .
				"codon_ORF1_sister1\tcodon_ORF1_sister2\t" .
				"codons_ORF2_sister1\tcodons_ORF2_sister2\t" .
				"multiple_variants\t" .
				"NN_sites\tSN_sites\tNS_sites\tSS_sites\tNN_diffs\tSN_diffs\tNS_diffs\tSS_diffs\n"; # either codon might contain N or -

my %pair2members;

foreach my $sister1 (sort keys %sister_pairs) { # FOR EACH PAIR
	my $sister2 = $sister_pairs{$sister1};
	$pair_num++;
	
	$pair2members{$pair_num}->{sister1} = $sister1;
	$pair2members{$pair_num}->{sister2} = $sister2;
	
	print "PAIR $pair_num\: $sister1 vs. $sister2...";
	
	my $pair_bootstrap = $sister_pair_bootstraps{$sister1}->{$sister2};
	
	# EXAMINE THE PROVIDED PRODUCT FOR THE CURRENT SISTER PAIR
	my $product_seq_sister1 = $header2sequence{$sister1};
	my $product_seq_sister2 = $header2sequence{$sister2};
	
	my $product_len_sister1 = length($product_seq_sister1);
	my $product_len_sister2 = length($product_seq_sister2);
	
	if(($product_len_sister1 % 3) != 0) {
		die "\n\nDIE: sequence of $sister1 is not a multiple of 3 (complete codon set). TERMINATED.\n\n";
	}
	
	if(($product_len_sister2 % 3) != 0) {
		die "\n\nDIE: sequence of in $sister2 is not a multiple of 3 (complete codon set). TERMINATED.\n\n";
	}
	
	if($product_len_sister1 != $product_len_sister2) {
		die "\n\nDIE: The length of sequence is different in $sister1 and $sister2\. TERMINATED.\n\n";
	}
	
	my $num_codons = $product_len_sister1 / 3;
	my @codons_sister1;
	my @codons_sister2;
	
	# STORE CODONS for sister1 and sister2 here; we've verified they're the same length
	for(my $codon_num = 1; $codon_num <= $num_codons; $codon_num++) { # each ORF1 codon
		my $codon_index = $codon_num - 1;
		my $site_index = 0 + (3 * $codon_index);
		
		# Extract codons for ORF1
		my $codon_sister1_ORF1 = substr($product_seq_sister1, $site_index, 3);
		my $codon_sister2_ORF1 = substr($product_seq_sister2, $site_index, 3);
		
		my $AA_sister1_ORF1 = &get_amino_acid($codon_sister1_ORF1);
		my $AA_sister2_ORF1 = &get_amino_acid($codon_sister2_ORF1);
		
		# IF UNDEFINED CODONS, NOTHING AT ALL CAN BE DETERMINED
		if($codon_sister1_ORF1 =~ /N/ || $codon_sister2_ORF1 =~ /N/ || $codon_sister1_ORF1 =~ /-/ ||$codon_sister2_ORF1 =~ /-/) {
			
			print CODON_FILE "$fasta_file_short\t$tree_file_short\t$pair_num\t$sister1\t$sister2\t" .
					"$pair_bootstrap\t$codon_num\t" .
					"$codon_sister1_ORF1\t$codon_sister2_ORF1\t" .
					"NA\t" . 
					"NA\t" .
					"NA\t" .
					"NA\tNA\tNA\tNA\tNA\tNA\tNA\tNA\n";
			
		} else {
			# Extract codons for (OVERLAPPING) ORF2
			
##########################################################################################
############# SENSE-SENSE:
#############  ss12:
#############    ORF1: 1-2-3-1-2-3-1
#############    ORF2: 2-3-1-2-3-1-2
##########################################################################################
			#seq=NC_006905_1
			#
			#CAGCATTGTAGC...AGCGGCAGC ORF1
			#--GCATTGTAG-...--CGGCAG- ORF2
			#
			#so first codon of ORF2 overlaps just first nucleotide of ORF2 codon
			#caG (Q) X Gca (A)
			#G->A = caA (Q) X Aca (T), so SN
			#G->C = caC (H) X Cca (P), so NN
			#G->T = caT (H) X Tca (S), so NN
			# Thus, this one site should probably be 1/3 SN and 2/3 NN
			#
			#seq=NZ_BCOB01000100_1
			#
			#CAGCATTGTAGC...AGCGGCAGC ORF1
			#--GCATTGTAG-...--CGGCAG- ORF2
			#
			#SAME EXACT SEQUENCE HERE!
			#
			# Thus, this one site should also be 1/3 SN and 2/3 NN, which is also the mean.
			if($phase eq 'ss12') {
				# Last 2 nt of prev codon, first 1 nt of next codon (same strand)
				my $codon_sister1_ORF2_prev = substr($product_seq_sister1, ($site_index - 1), 3);
				my $codon_sister1_ORF2_next = substr($product_seq_sister1, ($site_index + 2), 3);
				my $codon_sister2_ORF2_prev = substr($product_seq_sister2, ($site_index - 1), 3);
				my $codon_sister2_ORF2_next = substr($product_seq_sister2, ($site_index + 2), 3);
				
				my $AA_sister1_ORF2_prev = &get_amino_acid($codon_sister1_ORF2_prev);
				my $AA_sister1_ORF2_next = &get_amino_acid($codon_sister1_ORF2_next);
				my $AA_sister2_ORF2_prev = &get_amino_acid($codon_sister2_ORF2_prev);
				my $AA_sister2_ORF2_next = &get_amino_acid($codon_sister2_ORF2_next);
				
				#######################
				# GET NUMBER OF SITES
				if($codon_num == 1) {
					# ORF1 FIRST CODON: only ORF2's NEXT codon fully defined, 1 site to examine
					my $sister1_num_changes_poss = 0;
					my $sister1_num_changes_NN = 0;
					my $sister1_num_changes_SN = 0;
					my $sister1_num_changes_NS = 0;
					my $sister1_num_changes_SS = 0;
					
					my $sister2_num_changes_poss = 0;
					my $sister2_num_changes_NN = 0;
					my $sister2_num_changes_SN = 0;
					my $sister2_num_changes_NS = 0;
					my $sister2_num_changes_SS = 0;
					
					my $NN_diffs = 0;
					my $SN_diffs = 0;
					my $NS_diffs = 0;
					my $SS_diffs = 0;
					
					my $nt_sister1_WT = substr($codon_sister1_ORF1, 2, 1);
					#print "codon_sister1_ORF1=$codon_sister1_ORF1\n";
					my $nt_sister2_WT = substr($codon_sister2_ORF1, 2, 1);
					#print "codon_sister1_ORF1=$codon_sister2_ORF1\n";
					
					# What is each change to ORF1 CODON SITE 3 and ORF2 CODON SITE 1?
					foreach my $nt (@nucleotides) {
						if($nt ne $nt_sister1_WT) { # only one possibility for this site
							##########
							# SISTER1, SITE 3 ONLY
							my $sister1_STOP_caused = 0;
							
							my $codon_sister1_ORF1_MUT = $codon_sister1_ORF1;
							$codon_sister1_ORF1_MUT =~ s/([ACGT])([ACGT])[ACGT]/$1$2$nt/;
							#print "codon_sister1_ORF1_MUT=$codon_sister1_ORF1_MUT\n";
							
							my $codon_sister1_ORF2_next_MUT = $codon_sister1_ORF2_next;
							$codon_sister1_ORF2_next_MUT =~ s/[ACGT]([ACGT])([ACGT])/$nt$1$2/;
							#print "codon_sister1_ORF2_next_MUT=$codon_sister1_ORF2_next_MUT\n";
							
							my $sister1_ORF1_effect = 'S';
							if($codon_sister1_ORF1_MUT ne $codon_sister1_ORF1) { # it's a different codon
								#Sister1-ORF1
								my $AA_sister1_ORF1_MUT = &get_amino_acid($codon_sister1_ORF1_MUT);
								
								if($AA_sister1_ORF1_MUT ne $AA_sister1_ORF1) {
									$sister1_ORF1_effect = 'N';
								}
								
								if($AA_sister1_ORF1 eq '*' || $AA_sister1_ORF1_MUT eq '*') {
									$sister1_STOP_caused++;
								}
							}
							
							my $sister1_ORF2_next_effect = 'S';
							if($codon_sister1_ORF2_next_MUT ne $codon_sister1_ORF2_next) { # it's a different codon
								#Sister1-ORF2
								my $AA_sister1_ORF2_next_MUT = &get_amino_acid($codon_sister1_ORF2_next_MUT);
								
								if($AA_sister1_ORF2_next_MUT ne $AA_sister1_ORF2_next) {
									$sister1_ORF2_next_effect = 'N';
								}
								
								if($AA_sister1_ORF2_next eq '*' || $AA_sister1_ORF2_next_MUT eq '*') {
									$sister1_STOP_caused++;
								}
							}
							
							# TALLY VIABLE CHANGES, GET NUMBER OF DIFFS
							unless($sister1_STOP_caused > 0) {
								$sister1_num_changes_poss++;
								
								if($sister1_ORF1_effect eq 'N') {
									if($sister1_ORF2_next_effect eq 'N') {
										$sister1_num_changes_NN++;
										
										# ACTUAL DIFF
										if($codon_sister1_ORF1_MUT eq $codon_sister2_ORF1) {
											$NN_diffs++;
											$site_diffs_hh{$codon_num}->{3}->{NN_diffs}++;
										}
										
									} elsif($sister1_ORF2_next_effect eq 'S') {
										$sister1_num_changes_NS++;
										
										# ACTUAL DIFF
										if($codon_sister1_ORF1_MUT eq $codon_sister2_ORF1) {
											$NS_diffs++;
											$site_diffs_hh{$codon_num}->{3}->{NS_diffs}++;
										}
									}
								} elsif($sister1_ORF1_effect eq 'S') {
									if($sister1_ORF2_next_effect eq 'N') {
										$sister1_num_changes_SN++;
										
										# ACTUAL DIFF
										if($codon_sister1_ORF1_MUT eq $codon_sister2_ORF1) {
											$SN_diffs++;
											$site_diffs_hh{$codon_num}->{3}->{SN_diffs}++;
										}
									} elsif($sister1_ORF2_next_effect eq 'S') {
										$sister1_num_changes_SS++;
										
										# ACTUAL DIFF
										if($codon_sister1_ORF1_MUT eq $codon_sister2_ORF1) {
											$SS_diffs++;
											$site_diffs_hh{$codon_num}->{3}->{SS_diffs}++;
										}
									}
								}
							}
						}
						
						if($nt ne $nt_sister2_WT) { # only one possibility for this site
							
							##########
							#SISTER2
							my $sister2_STOP_caused = 0;
							
							my $codon_sister2_ORF1_MUT = $codon_sister2_ORF1;
							$codon_sister2_ORF1_MUT =~ s/([ACGT])([ACGT])[ACGT]/$1$2$nt/;
							
							my $codon_sister2_ORF2_next_MUT = $codon_sister2_ORF2_next;
							$codon_sister2_ORF2_next_MUT =~ s/[ACGT]([ACGT])([ACGT])/$nt$1$2/;
							
							my $sister2_ORF1_effect = 'S';
							if($codon_sister2_ORF1_MUT ne $codon_sister2_ORF1) { # it's a different codon
								#Sister2-ORF1
								my $AA_sister2_ORF1_MUT = &get_amino_acid($codon_sister2_ORF1_MUT);
								
								if($AA_sister2_ORF1_MUT ne $AA_sister2_ORF1) {
									$sister2_ORF1_effect = 'N';
								}
								
								if($AA_sister2_ORF1 eq '*' || $AA_sister2_ORF1_MUT eq '*') {
									$sister2_STOP_caused++;
								}
							}
							
							my $sister2_ORF2_next_effect = 'S';
							if($codon_sister2_ORF2_next_MUT ne $codon_sister2_ORF2_next) { # it's a different codon
								#Sister2-ORF2
								my $AA_sister2_ORF2_next_MUT = &get_amino_acid($codon_sister2_ORF2_next_MUT);
								
								if($AA_sister2_ORF2_next_MUT ne $AA_sister2_ORF2_next) {
									$sister2_ORF2_next_effect = 'N';
								}
								
								if($AA_sister2_ORF2_next eq '*' || $AA_sister2_ORF2_next_MUT eq '*') {
									$sister2_STOP_caused++;
								}
							}
							
							# TALLY VIABLE CHANGES, DIFFS ALREADY DETERMINED
							unless($sister2_STOP_caused > 0) {
								$sister2_num_changes_poss++;
								
								if($sister2_ORF1_effect eq 'N') {
									if($sister2_ORF2_next_effect eq 'N') {
										$sister2_num_changes_NN++;
									} elsif($sister2_ORF2_next_effect eq 'S') {
										$sister2_num_changes_NS++;
									}
								} elsif($sister2_ORF1_effect eq 'S') {
									if($sister2_ORF2_next_effect eq 'N') {
										$sister2_num_changes_SN++;
									} elsif($sister2_ORF2_next_effect eq 'S') {
										$sister2_num_changes_SS++;
									}
								}
							}
						} # wasn't the WT nucleotide	
					} # finished examining all 3 possible nucleotide changes
					
					# TALLY SITE 3 ONLY
					my $NN_sites_sister1 = 'NA';
					my $SN_sites_sister1 = 'NA';
					my $NS_sites_sister1 = 'NA';
					my $SS_sites_sister1 = 'NA';
					if($sister1_num_changes_poss > 0) {
						$NN_sites_sister1 = $sister1_num_changes_NN / $sister1_num_changes_poss;
						$SN_sites_sister1 = $sister1_num_changes_SN / $sister1_num_changes_poss;
						$NS_sites_sister1 = $sister1_num_changes_NS / $sister1_num_changes_poss;
						$SS_sites_sister1 = $sister1_num_changes_SS / $sister1_num_changes_poss;
						
						unless(exists $seq_completed{$sister1}) {
							$seq2sites{$sister1}->{NN_sites} += $NN_sites_sister1;
							$seq2sites{$sister1}->{SN_sites} += $SN_sites_sister1;
							$seq2sites{$sister1}->{NS_sites} += $NS_sites_sister1;
							$seq2sites{$sister1}->{SS_sites} += $SS_sites_sister1;
						}
					}
					
					my $NN_sites_sister2 = 'NA';
					my $SN_sites_sister2 = 'NA';
					my $NS_sites_sister2 = 'NA';
					my $SS_sites_sister2 = 'NA';
					if($sister2_num_changes_poss > 0) {
						$NN_sites_sister2 = $sister2_num_changes_NN / $sister2_num_changes_poss;
						$SN_sites_sister2 = $sister2_num_changes_SN / $sister2_num_changes_poss;
						$NS_sites_sister2 = $sister2_num_changes_NS / $sister2_num_changes_poss;
						$SS_sites_sister2 = $sister2_num_changes_SS / $sister2_num_changes_poss;
						
						unless(exists $seq_completed{$sister2}) {
							$seq2sites{$sister2}->{NN_sites} += $NN_sites_sister2;
							$seq2sites{$sister2}->{SN_sites} += $SN_sites_sister2;
							$seq2sites{$sister2}->{NS_sites} += $NS_sites_sister2;
							$seq2sites{$sister2}->{SS_sites} += $SS_sites_sister2;
						}
					}
					
					my $NN_sites = 'NA';
					my $SN_sites = 'NA';
					my $NS_sites = 'NA';
					my $SS_sites = 'NA';
					if($sister1_num_changes_poss > 0 && $sister2_num_changes_poss > 0) {
						$NN_sites = ($NN_sites_sister1 + $NN_sites_sister2) / 2;
						$SN_sites = ($SN_sites_sister1 + $SN_sites_sister2) / 2;
						$NS_sites = ($NS_sites_sister1 + $NS_sites_sister2) / 2;
						$SS_sites = ($SS_sites_sister1 + $SS_sites_sister2) / 2;
					} elsif($sister1_num_changes_poss > 0) {
						$NN_sites = $NN_sites_sister1;
						$SN_sites = $SN_sites_sister1;
						$NS_sites = $NS_sites_sister1;
						$SS_sites = $SS_sites_sister1;
					} elsif($sister2_num_changes_poss > 0) {
						$NN_sites = $NN_sites_sister2;
						$SN_sites = $SN_sites_sister2;
						$NS_sites = $NS_sites_sister2;
						$SS_sites = $SS_sites_sister2;
						
					} # else nothing defined, stay NA
					
					# Check if there are multiple variants in these overlapping codons
					my $MNV = 'FALSE';
					if(($NN_diffs + $SN_diffs + $NS_diffs + $SS_diffs) > 1) {
						$MNV = 'TRUE';
					}
					
					print CODON_FILE "$fasta_file_short\t$tree_file_short\t$pair_num\t$sister1\t$sister2\t" .
						"$pair_bootstrap\t$codon_num\t" .
						"$codon_sister1_ORF1\t$codon_sister2_ORF1\t" .
						"$codon_sister1_ORF2_next\t" . 
						"$codon_sister2_ORF2_next\t" .
						"$MNV\t" .
						"$NN_sites\t$SN_sites\t$NS_sites\t$SS_sites\t$NN_diffs\t$SN_diffs\t$NS_diffs\t$SS_diffs\n"; # either codon might contain N or -
					
					unless($MNV eq 'TRUE') { # exclude data from overlapping codons with multiple variants
						# Store sites
						$sister_data_hh{$pair_num}->{NN_sites} += $NN_sites;
						$sister_data_hh{$pair_num}->{SN_sites} += $SN_sites;
						$sister_data_hh{$pair_num}->{NS_sites} += $NS_sites;
						$sister_data_hh{$pair_num}->{SS_sites} += $SS_sites;
						
						# Store diffs
						$sister_data_hh{$pair_num}->{NN_diffs} += $NN_diffs;
						$sister_data_hh{$pair_num}->{SN_diffs} += $SN_diffs;
						$sister_data_hh{$pair_num}->{NS_diffs} += $NS_diffs;
						$sister_data_hh{$pair_num}->{SS_diffs} += $SS_diffs;
					} else {
						$site_diffs_hh{$codon_num}->{3}->{NN_diffs} = 0;
						$site_diffs_hh{$codon_num}->{3}->{SN_diffs} = 0;
						$site_diffs_hh{$codon_num}->{3}->{NS_diffs} = 0;
						$site_diffs_hh{$codon_num}->{3}->{SS_diffs} = 0;
					}
					
				} elsif($codon_num == $num_codons) { # end FIRST codon
					# ORF1 LAST CODON: only ORF2's PREV codon fully defined, 2 sites to examine
				
					my $sister1_num_changes_poss_site1 = 0;
					my $sister1_num_changes_NN_site1 = 0;
					my $sister1_num_changes_SN_site1 = 0;
					my $sister1_num_changes_NS_site1 = 0;
					my $sister1_num_changes_SS_site1 = 0;
					
					my $sister1_num_changes_poss_site2 = 0;
					my $sister1_num_changes_NN_site2 = 0;
					my $sister1_num_changes_SN_site2 = 0;
					my $sister1_num_changes_NS_site2 = 0;
					my $sister1_num_changes_SS_site2 = 0;
					
					my $sister2_num_changes_poss_site1 = 0;
					my $sister2_num_changes_NN_site1 = 0;
					my $sister2_num_changes_SN_site1 = 0;
					my $sister2_num_changes_NS_site1 = 0;
					my $sister2_num_changes_SS_site1 = 0;
					
					my $sister2_num_changes_poss_site2 = 0;
					my $sister2_num_changes_NN_site2 = 0;
					my $sister2_num_changes_SN_site2 = 0;
					my $sister2_num_changes_NS_site2 = 0;
					my $sister2_num_changes_SS_site2 = 0;
					
					my $NN_diffs = 0;
					my $SN_diffs = 0;
					my $NS_diffs = 0;
					my $SS_diffs = 0;
					
					
					my $nt1_sister1_WT = substr($codon_sister1_ORF1, 0, 1);
					my $nt2_sister1_WT = substr($codon_sister1_ORF1, 1, 1);
#					print "codon_sister1_ORF1=$codon_sister1_ORF1\n";
					my $nt1_sister2_WT = substr($codon_sister2_ORF1, 0, 1);
					my $nt2_sister2_WT = substr($codon_sister2_ORF1, 1, 1);
#					print "codon_sister1_ORF1=$codon_sister2_ORF1\n";
					
					
					
					
					
					
					foreach my $nt (@nucleotides) {
						##################################################################
						# SISTER1
						
						# SITE 1
						# What is each change to ORF1 CODON SITE 1 / ORF2 CODON SITE 2?
						if($nt ne $nt1_sister1_WT) { # only one possibility for this site
							 # only one possibility for this site
							
							my $sister1_STOP_caused = 0;
							
							my $codon_sister1_ORF1_MUT = $codon_sister1_ORF1;
							$codon_sister1_ORF1_MUT =~ s/[ACGT]([ACGT])([ACGT])/$nt$1$2/;
#							print "codon_sister1_ORF1_MUT=$codon_sister1_ORF1_MUT\n";
							
							my $codon_sister1_ORF2_prev_MUT = $codon_sister1_ORF2_prev;
							$codon_sister1_ORF2_prev_MUT =~ s/([ACGT])[ACGT]([ACGT])/$1$nt$2/;
#							print "codon_sister1_ORF2_prev_MUT=$codon_sister1_ORF2_prev_MUT\n";
							
							my $sister1_ORF1_effect = 'S';
							
							#Sister1-ORF1
							my $AA_sister1_ORF1_MUT = &get_amino_acid($codon_sister1_ORF1_MUT);
#							print "AA_sister1_ORF1_MUT=$AA_sister1_ORF1_MUT\n";
							
							if($AA_sister1_ORF1_MUT ne $AA_sister1_ORF1) {
								$sister1_ORF1_effect = 'N';
							}
							
							if($AA_sister1_ORF1 eq '*' || $AA_sister1_ORF1_MUT eq '*') {
								$sister1_STOP_caused++;
							}
							
							
							my $sister1_ORF2_prev_effect = 'S';
							
							#Sister1-ORF2
							my $AA_sister1_ORF2_prev_MUT = &get_amino_acid($codon_sister1_ORF2_prev_MUT);
#							print "AA_sister1_ORF2_prev_MUT=$AA_sister1_ORF2_prev_MUT\n";
							
							if($AA_sister1_ORF2_prev_MUT ne $AA_sister1_ORF2_prev) {
								$sister1_ORF2_prev_effect = 'N';
							}
							
							if($AA_sister1_ORF2_prev eq '*' || $AA_sister1_ORF2_prev_MUT eq '*') {
								$sister1_STOP_caused++;
							}
							
							# TALLY VIABLE CHANGES, GET NUMBER OF DIFFS
				
							unless($sister1_STOP_caused > 0) {
								$sister1_num_changes_poss_site1++;
								
								if($sister1_ORF1_effect eq 'N') {
									if($sister1_ORF2_prev_effect eq 'N') {
										$sister1_num_changes_NN_site1++;
										
										# ACTUAL DIFF
										if($nt eq $nt1_sister2_WT) {
											$NN_diffs++;
											$site_diffs_hh{$codon_num}->{1}->{NN_diffs}++;
										}
										
									} elsif($sister1_ORF2_prev_effect eq 'S') {
										$sister1_num_changes_NS_site1++;
										
										# ACTUAL DIFF
										if($nt eq $nt1_sister2_WT) {
											$NS_diffs++;
											$site_diffs_hh{$codon_num}->{1}->{NS_diffs}++;
										}
									}
								} elsif($sister1_ORF1_effect eq 'S') {
									if($sister1_ORF2_prev_effect eq 'N') {
										$sister1_num_changes_SN_site1++;
										
										# ACTUAL DIFF
										if($nt eq $nt1_sister2_WT) {
											$SN_diffs++;
											$site_diffs_hh{$codon_num}->{1}->{SN_diffs}++;
										}
									} elsif($sister1_ORF2_prev_effect eq 'S') {
										$sister1_num_changes_SS_site1++;
										
										# ACTUAL DIFF
										if($nt eq $nt1_sister2_WT) {
											$SS_diffs++;
											$site_diffs_hh{$codon_num}->{1}->{SS_diffs}++;
										}
									}
								}
							}
						} # end sister 1 site 1
						
						
						# SITE 2
						# What is each change to ORF1 CODON SITE 2 / ORF2 CODON SITE 3?
						if($nt ne $nt2_sister1_WT) { # only one possibility for this site
							
							my $sister1_STOP_caused = 0;
							
							my $codon_sister1_ORF1_MUT = $codon_sister1_ORF1;
							$codon_sister1_ORF1_MUT =~ s/([ACGT])[ACGT]([ACGT])/$1$nt$2/;
							#print "codon_sister1_ORF1_MUT=$codon_sister1_ORF1_MUT\n";
							
							my $codon_sister1_ORF2_prev_MUT = $codon_sister1_ORF2_prev;
							$codon_sister1_ORF2_prev_MUT =~ s/([ACGT])([ACGT])[ACGT]/$1$2$nt/;
							#print "codon_sister1_ORF2_prev_MUT=$codon_sister1_ORF2_prev_MUT\n";
							
							my $sister1_ORF1_effect = 'S';
							
							#Sister1-ORF1
							my $AA_sister1_ORF1_MUT = &get_amino_acid($codon_sister1_ORF1_MUT);
							
							if($AA_sister1_ORF1_MUT ne $AA_sister1_ORF1) {
								$sister1_ORF1_effect = 'N';
							}
							
							if($AA_sister1_ORF1 eq '*' || $AA_sister1_ORF1_MUT eq '*') {
								$sister1_STOP_caused++;
							}
							
							
							my $sister1_ORF2_prev_effect = 'S';
							
							#Sister1-ORF2
							my $AA_sister1_ORF2_prev_MUT = &get_amino_acid($codon_sister1_ORF2_prev_MUT);
							
							if($AA_sister1_ORF2_prev_MUT ne $AA_sister1_ORF2_prev) {
								$sister1_ORF2_prev_effect = 'N';
							}
							
							if($AA_sister1_ORF2_prev eq '*' || $AA_sister1_ORF2_prev_MUT eq '*') {
								$sister1_STOP_caused++;
							}
							
							# TALLY VIABLE CHANGES, GET NUMBER OF DIFFS
							unless($sister1_STOP_caused > 0) {
								$sister1_num_changes_poss_site2++;
								
								if($sister1_ORF1_effect eq 'N') {
									if($sister1_ORF2_prev_effect eq 'N') {
										$sister1_num_changes_NN_site2++;
										
										# ACTUAL DIFF
										if($nt eq $nt2_sister2_WT) {
											$NN_diffs++;
											$site_diffs_hh{$codon_num}->{2}->{NN_diffs}++;
										}
										
									} elsif($sister1_ORF2_prev_effect eq 'S') {
										$sister1_num_changes_NS_site2++;
										
										# ACTUAL DIFF
										if($nt eq $nt2_sister2_WT) {
											$NS_diffs++;
											$site_diffs_hh{$codon_num}->{2}->{NS_diffs}++;
										}
									}
								} elsif($sister1_ORF1_effect eq 'S') {
									if($sister1_ORF2_prev_effect eq 'N') {
										$sister1_num_changes_SN_site2++;
										
										# ACTUAL DIFF
										if($nt eq $nt2_sister2_WT) {
											$SN_diffs++;
											$site_diffs_hh{$codon_num}->{2}->{SN_diffs}++;
										}
									} elsif($sister1_ORF2_prev_effect eq 'S') {
										$sister1_num_changes_SS_site2++;
										
										# ACTUAL DIFF
										if($nt eq $nt2_sister2_WT) {
											$SS_diffs++;
											$site_diffs_hh{$codon_num}->{2}->{SS_diffs}++;
										}
									}
								}
							}
						} # end sister 1 site 2
						
						
						
						##################################################################
						# SISTER2
						
						# SITE 1
						# What is each change to ORF1 CODON SITE 1 / ORF2 CODON SITE 2?
						if($nt ne $nt1_sister2_WT) { # only one possibility for this site
							 # only one possibility for this site
							
							my $sister2_STOP_caused = 0;
							
							my $codon_sister2_ORF1_MUT = $codon_sister2_ORF1;
							$codon_sister2_ORF1_MUT =~ s/[ACGT]([ACGT])([ACGT])/$nt$1$2/;
							#print "codon_sister2_ORF1_MUT=$codon_sister2_ORF1_MUT\n";
							
							my $codon_sister2_ORF2_prev_MUT = $codon_sister2_ORF2_prev;
							$codon_sister2_ORF2_prev_MUT =~ s/([ACGT])[ACGT]([ACGT])/$1$nt$2/;
							#print "codon_sister2_ORF2_prev_MUT=$codon_sister2_ORF2_prev_MUT\n";
							
							my $sister2_ORF1_effect = 'S';
							
							#Sister1-ORF1
							my $AA_sister2_ORF1_MUT = &get_amino_acid($codon_sister2_ORF1_MUT);
							
							if($AA_sister2_ORF1_MUT ne $AA_sister2_ORF1) {
								$sister2_ORF1_effect = 'N';
							}
							
							if($AA_sister2_ORF1 eq '*' || $AA_sister2_ORF1_MUT eq '*') {
								$sister2_STOP_caused++;
							}
							
							
							my $sister2_ORF2_prev_effect = 'S';
							
							#Sister1-ORF2
							my $AA_sister2_ORF2_prev_MUT = &get_amino_acid($codon_sister2_ORF2_prev_MUT);
							
							if($AA_sister2_ORF2_prev_MUT ne $AA_sister2_ORF2_prev) {
								$sister2_ORF2_prev_effect = 'N';
							}
							
							if($AA_sister2_ORF2_prev eq '*' || $AA_sister2_ORF2_prev_MUT eq '*') {
								$sister2_STOP_caused++;
							}
							
							# TALLY VIABLE CHANGES, GET NUMBER OF DIFFS
				
							unless($sister2_STOP_caused > 0) {
								$sister2_num_changes_poss_site1++;
								
								if($sister2_ORF1_effect eq 'N') {
									if($sister2_ORF2_prev_effect eq 'N') {
										$sister2_num_changes_NN_site1++;
										
									} elsif($sister2_ORF2_prev_effect eq 'S') {
										$sister2_num_changes_NS_site1++;
										
									}
								} elsif($sister2_ORF1_effect eq 'S') {
									if($sister2_ORF2_prev_effect eq 'N') {
										$sister2_num_changes_SN_site1++;
										
									} elsif($sister2_ORF2_prev_effect eq 'S') {
										$sister2_num_changes_SS_site1++;
										
									}
								}
							}
						} # end sister 2 site 1
						
						
						
						
						
						# SITE 2
						# What is each change to ORF1 CODON SITE 2 / ORF2 CODON SITE 3?
						if($nt ne $nt2_sister2_WT) { # only one possibility for this site
							
							my $sister2_STOP_caused = 0;
							
							my $codon_sister2_ORF1_MUT = $codon_sister2_ORF1;
							$codon_sister2_ORF1_MUT =~ s/([ACGT])[ACGT]([ACGT])/$1$nt$2/;
							#print "codon_sister2_ORF1_MUT=$codon_sister2_ORF1_MUT\n";
							
							my $codon_sister2_ORF2_prev_MUT = $codon_sister2_ORF2_prev;
							$codon_sister2_ORF2_prev_MUT =~ s/([ACGT])([ACGT])[ACGT]/$1$2$nt/;
							#print "codon_sister2_ORF2_prev_MUT=$codon_sister2_ORF2_prev_MUT\n";
							
							my $sister2_ORF1_effect = 'S';
							
							#Sister1-ORF1
							my $AA_sister2_ORF1_MUT = &get_amino_acid($codon_sister2_ORF1_MUT);
							
							if($AA_sister2_ORF1_MUT ne $AA_sister2_ORF1) {
								$sister2_ORF1_effect = 'N';
							}
							
							if($AA_sister2_ORF1 eq '*' || $AA_sister2_ORF1_MUT eq '*') {
								$sister2_STOP_caused++;
							}
							
							
							my $sister2_ORF2_prev_effect = 'S';
							
							#Sister1-ORF2
							my $AA_sister2_ORF2_prev_MUT = &get_amino_acid($codon_sister2_ORF2_prev_MUT);
							
							if($AA_sister2_ORF2_prev_MUT ne $AA_sister2_ORF2_prev) {
								$sister2_ORF2_prev_effect = 'N';
							}
							
							if($AA_sister2_ORF2_prev eq '*' || $AA_sister2_ORF2_prev_MUT eq '*') {
								$sister2_STOP_caused++;
							}
							
							# TALLY VIABLE CHANGES, GET NUMBER OF DIFFS
				
							unless($sister2_STOP_caused > 0) {
								$sister2_num_changes_poss_site2++;
								
								if($sister2_ORF1_effect eq 'N') {
									if($sister2_ORF2_prev_effect eq 'N') {
										$sister2_num_changes_NN_site2++;
										
										
									} elsif($sister2_ORF2_prev_effect eq 'S') {
										$sister2_num_changes_NS_site2++;
										
									}
								} elsif($sister2_ORF1_effect eq 'S') {
									if($sister2_ORF2_prev_effect eq 'N') {
										$sister2_num_changes_SN_site2++;
										
									} elsif($sister2_ORF2_prev_effect eq 'S') {
										$sister2_num_changes_SS_site2++;
										
									}
								}
							}
						} # end sister 2 site 2
					} # end cycling all 4 nucleotides
					
					# TALLY SITE 1
					my $NN_sites_sister1_site1 = 'NA';
					my $SN_sites_sister1_site1 = 'NA';
					my $NS_sites_sister1_site1 = 'NA';
					my $SS_sites_sister1_site1 = 'NA';
					if($sister1_num_changes_poss_site1 > 0) {
#						print "sister1_num_changes_poss_site1=$sister1_num_changes_poss_site1\n";
						$NN_sites_sister1_site1 = $sister1_num_changes_NN_site1 / $sister1_num_changes_poss_site1;
						$SN_sites_sister1_site1 = $sister1_num_changes_SN_site1 / $sister1_num_changes_poss_site1;
						$NS_sites_sister1_site1 = $sister1_num_changes_NS_site1 / $sister1_num_changes_poss_site1;
						$SS_sites_sister1_site1 = $sister1_num_changes_SS_site1 / $sister1_num_changes_poss_site1;
						
						unless(exists $seq_completed{$sister1}) {
							$seq2sites{$sister1}->{NN_sites} += $NN_sites_sister1_site1;
							$seq2sites{$sister1}->{SN_sites} += $SN_sites_sister1_site1;
							$seq2sites{$sister1}->{NS_sites} += $NS_sites_sister1_site1;
							$seq2sites{$sister1}->{SS_sites} += $SS_sites_sister1_site1;
						}
					}
					
					my $NN_sites_sister2_site1 = 'NA';
					my $SN_sites_sister2_site1 = 'NA';
					my $NS_sites_sister2_site1 = 'NA';
					my $SS_sites_sister2_site1 = 'NA';
					if($sister2_num_changes_poss_site1 > 0) {
						$NN_sites_sister2_site1 = $sister2_num_changes_NN_site1 / $sister2_num_changes_poss_site1;
						$SN_sites_sister2_site1 = $sister2_num_changes_SN_site1 / $sister2_num_changes_poss_site1;
						$NS_sites_sister2_site1 = $sister2_num_changes_NS_site1 / $sister2_num_changes_poss_site1;
						$SS_sites_sister2_site1 = $sister2_num_changes_SS_site1 / $sister2_num_changes_poss_site1;
						
						unless(exists $seq_completed{$sister2}) {
							$seq2sites{$sister2}->{NN_sites} += $NN_sites_sister2_site1;
							$seq2sites{$sister2}->{SN_sites} += $SN_sites_sister2_site1;
							$seq2sites{$sister2}->{NS_sites} += $NS_sites_sister2_site1;
							$seq2sites{$sister2}->{SS_sites} += $SS_sites_sister2_site1;
						}
					}
					
					my $NN_sites_site1 = 'NA';
					my $SN_sites_site1 = 'NA';
					my $NS_sites_site1 = 'NA';
					my $SS_sites_site1 = 'NA';
					if($sister1_num_changes_poss_site1 > 0 && $sister2_num_changes_poss_site1 > 0) {
						$NN_sites_site1 = ($NN_sites_sister1_site1 + $NN_sites_sister2_site1) / 2;
						$SN_sites_site1 = ($SN_sites_sister1_site1 + $SN_sites_sister2_site1) / 2;
						$NS_sites_site1 = ($NS_sites_sister1_site1 + $NS_sites_sister2_site1) / 2;
						$SS_sites_site1 = ($SS_sites_sister1_site1 + $SS_sites_sister2_site1) / 2;
					} elsif($sister1_num_changes_poss_site1 > 0) {
						$NN_sites_site1 = $NN_sites_sister1_site1;
						$SN_sites_site1 = $SN_sites_sister1_site1;
						$NS_sites_site1 = $NS_sites_sister1_site1;
						$SS_sites_site1 = $SS_sites_sister1_site1;
					} elsif($sister2_num_changes_poss_site1 > 0) {
						$NN_sites_site1 = $NN_sites_sister2_site1;
						$SN_sites_site1 = $SN_sites_sister2_site1;
						$NS_sites_site1 = $NS_sites_sister2_site1;
						$SS_sites_site1 = $SS_sites_sister2_site1;
						
					} # else nothing defined, stay NA
					
					# TALLY SITE 2
					my $NN_sites_sister1_site2 = 'NA';
					my $SN_sites_sister1_site2 = 'NA';
					my $NS_sites_sister1_site2 = 'NA';
					my $SS_sites_sister1_site2 = 'NA';
					if($sister1_num_changes_poss_site2 > 0) {
#						print "sister1_num_changes_poss_site2=$sister1_num_changes_poss_site2\n";
						$NN_sites_sister1_site2 = $sister1_num_changes_NN_site2 / $sister1_num_changes_poss_site2;
						$SN_sites_sister1_site2 = $sister1_num_changes_SN_site2 / $sister1_num_changes_poss_site2;
						$NS_sites_sister1_site2 = $sister1_num_changes_NS_site2 / $sister1_num_changes_poss_site2;
						$SS_sites_sister1_site2 = $sister1_num_changes_SS_site2 / $sister1_num_changes_poss_site2;
						
						unless(exists $seq_completed{$sister1}) {
							$seq2sites{$sister1}->{NN_sites} += $NN_sites_sister1_site2;
							$seq2sites{$sister1}->{SN_sites} += $SN_sites_sister1_site2;
							$seq2sites{$sister1}->{NS_sites} += $NS_sites_sister1_site2;
							$seq2sites{$sister1}->{SS_sites} += $SS_sites_sister1_site2;
						}
					}
					
					my $NN_sites_sister2_site2 = 'NA';
					my $SN_sites_sister2_site2 = 'NA';
					my $NS_sites_sister2_site2 = 'NA';
					my $SS_sites_sister2_site2 = 'NA';
					if($sister2_num_changes_poss_site2 > 0) {
						$NN_sites_sister2_site2 = $sister2_num_changes_NN_site2 / $sister2_num_changes_poss_site2;
						$SN_sites_sister2_site2 = $sister2_num_changes_SN_site2 / $sister2_num_changes_poss_site2;
						$NS_sites_sister2_site2 = $sister2_num_changes_NS_site2 / $sister2_num_changes_poss_site2;
						$SS_sites_sister2_site2 = $sister2_num_changes_SS_site2 / $sister2_num_changes_poss_site2;
						
						unless(exists $seq_completed{$sister2}) {
							$seq2sites{$sister2}->{NN_sites} += $NN_sites_sister2_site2;
							$seq2sites{$sister2}->{SN_sites} += $SN_sites_sister2_site2;
							$seq2sites{$sister2}->{NS_sites} += $NS_sites_sister2_site2;
							$seq2sites{$sister2}->{SS_sites} += $SS_sites_sister2_site2;
						}
					}
					
					my $NN_sites_site2 = 'NA';
					my $SN_sites_site2 = 'NA';
					my $NS_sites_site2 = 'NA';
					my $SS_sites_site2 = 'NA';
					if($sister1_num_changes_poss_site2 > 0 && $sister2_num_changes_poss_site2 > 0) {
						$NN_sites_site2 = ($NN_sites_sister1_site2 + $NN_sites_sister2_site2) / 2;
						$SN_sites_site2 = ($SN_sites_sister1_site2 + $SN_sites_sister2_site2) / 2;
						$NS_sites_site2 = ($NS_sites_sister1_site2 + $NS_sites_sister2_site2) / 2;
						$SS_sites_site2 = ($SS_sites_sister1_site2 + $SS_sites_sister2_site2) / 2;
					} elsif($sister1_num_changes_poss_site2 > 0) {
						$NN_sites_site2 = $NN_sites_sister1_site2;
						$SN_sites_site2 = $SN_sites_sister1_site2;
						$NS_sites_site2 = $NS_sites_sister1_site2;
						$SS_sites_site2 = $SS_sites_sister1_site2;
					} elsif($sister2_num_changes_poss_site2 > 0) {
						$NN_sites_site2 = $NN_sites_sister2_site2;
						$SN_sites_site2 = $SN_sites_sister2_site2;
						$NS_sites_site2 = $NS_sites_sister2_site2;
						$SS_sites_site2 = $SS_sites_sister2_site2;
						
					} # else nothing defined, stay NA
					
					# SUM THE TWO SITES
					my $NN_sites = $NN_sites_site1 + $NN_sites_site2;
					my $SN_sites = $SN_sites_site1 + $SN_sites_site2;
					my $NS_sites = $NS_sites_site1 + $NS_sites_site2;
					my $SS_sites = $SS_sites_site1 + $SS_sites_site2;
					
					# Check if there are multiple variants in these overlapping codons
					my $MNV = 'FALSE';
					if(($NN_diffs + $SN_diffs + $NS_diffs + $SS_diffs) > 1) {
						$MNV = 'TRUE';
					}
					
					print CODON_FILE "$fasta_file_short\t$tree_file_short\t$pair_num\t$sister1\t$sister2\t" .
						"$pair_bootstrap\t$codon_num\t" .
						"$codon_sister1_ORF1\t$codon_sister2_ORF1\t" .
						"$codon_sister1_ORF2_prev\t" . 
						"$codon_sister2_ORF2_prev\t" .
						"$MNV\t" .
						"$NN_sites\t$SN_sites\t$NS_sites\t$SS_sites\t$NN_diffs\t$SN_diffs\t$NS_diffs\t$SS_diffs\n"; # either codon might contain N or -
					
					unless($MNV eq 'TRUE') { # exclude data from overlapping codons with multiple variants
						# Store sites
						$sister_data_hh{$pair_num}->{NN_sites} += $NN_sites;
						$sister_data_hh{$pair_num}->{SN_sites} += $SN_sites;
						$sister_data_hh{$pair_num}->{NS_sites} += $NS_sites;
						$sister_data_hh{$pair_num}->{SS_sites} += $SS_sites;
						
						# Store diffs
						$sister_data_hh{$pair_num}->{NN_diffs} += $NN_diffs;
						$sister_data_hh{$pair_num}->{SN_diffs} += $SN_diffs;
						$sister_data_hh{$pair_num}->{NS_diffs} += $NS_diffs;
						$sister_data_hh{$pair_num}->{SS_diffs} += $SS_diffs;
					} else {
						$site_diffs_hh{$codon_num}->{1}->{NN_diffs} = 0;
						$site_diffs_hh{$codon_num}->{1}->{SN_diffs} = 0;
						$site_diffs_hh{$codon_num}->{1}->{NS_diffs} = 0;
						$site_diffs_hh{$codon_num}->{1}->{SS_diffs} = 0;
						
						$site_diffs_hh{$codon_num}->{2}->{NN_diffs} = 0;
						$site_diffs_hh{$codon_num}->{2}->{SN_diffs} = 0;
						$site_diffs_hh{$codon_num}->{2}->{NS_diffs} = 0;
						$site_diffs_hh{$codon_num}->{2}->{SS_diffs} = 0;
					}
					
				} else { # end LAST codon
					# both ORF2's PREV and NEXT codons fully defined, 3 sites to examine
					
					my $sister1_num_changes_poss_site1 = 0;
					my $sister1_num_changes_NN_site1 = 0;
					my $sister1_num_changes_SN_site1 = 0;
					my $sister1_num_changes_NS_site1 = 0;
					my $sister1_num_changes_SS_site1 = 0;
					
					my $sister1_num_changes_poss_site2 = 0;
					my $sister1_num_changes_NN_site2 = 0;
					my $sister1_num_changes_SN_site2 = 0;
					my $sister1_num_changes_NS_site2 = 0;
					my $sister1_num_changes_SS_site2 = 0;
					
					my $sister1_num_changes_poss_site3 = 0;
					my $sister1_num_changes_NN_site3 = 0;
					my $sister1_num_changes_SN_site3 = 0;
					my $sister1_num_changes_NS_site3 = 0;
					my $sister1_num_changes_SS_site3 = 0;
					
					my $sister2_num_changes_poss_site1 = 0;
					my $sister2_num_changes_NN_site1 = 0;
					my $sister2_num_changes_SN_site1 = 0;
					my $sister2_num_changes_NS_site1 = 0;
					my $sister2_num_changes_SS_site1 = 0;
					
					my $sister2_num_changes_poss_site2 = 0;
					my $sister2_num_changes_NN_site2 = 0;
					my $sister2_num_changes_SN_site2 = 0;
					my $sister2_num_changes_NS_site2 = 0;
					my $sister2_num_changes_SS_site2 = 0;
					
					my $sister2_num_changes_poss_site3 = 0;
					my $sister2_num_changes_NN_site3 = 0;
					my $sister2_num_changes_SN_site3 = 0;
					my $sister2_num_changes_NS_site3 = 0;
					my $sister2_num_changes_SS_site3 = 0;
					
					my $NN_diffs = 0;
					my $SN_diffs = 0;
					my $NS_diffs = 0;
					my $SS_diffs = 0;
					
					# Just ORF1 (reference)
					my $nt1_sister1_WT = substr($codon_sister1_ORF1, 0, 1);
					my $nt2_sister1_WT = substr($codon_sister1_ORF1, 1, 1);
					my $nt3_sister1_WT = substr($codon_sister1_ORF1, 2, 1);
#					print "codon_sister1_ORF1=$codon_sister1_ORF1\n";
					my $nt1_sister2_WT = substr($codon_sister2_ORF1, 0, 1);
					my $nt2_sister2_WT = substr($codon_sister2_ORF1, 1, 1);
					my $nt3_sister2_WT = substr($codon_sister2_ORF1, 2, 1);
#					print "codon_sister1_ORF1=$codon_sister2_ORF1\n";
					
					
					
					
					
					
					foreach my $nt (@nucleotides) {
						##################################################################
						# SISTER1
						
						# SITE 1
						# What is each change to ORF1 CODON SITE 1 / ORF2 CODON SITE 2?
						if($nt ne $nt1_sister1_WT) { # only one possibility for this site
							 # only one possibility for this site
							
							my $sister1_STOP_caused = 0;
							
							my $codon_sister1_ORF1_MUT = $codon_sister1_ORF1;
							$codon_sister1_ORF1_MUT =~ s/[ACGT]([ACGT])([ACGT])/$nt$1$2/;
#							print "codon_sister1_ORF1_MUT=$codon_sister1_ORF1_MUT\n";
							
							my $codon_sister1_ORF2_prev_MUT = $codon_sister1_ORF2_prev;
							$codon_sister1_ORF2_prev_MUT =~ s/([ACGT])[ACGT]([ACGT])/$1$nt$2/;
#							print "codon_sister1_ORF2_prev_MUT=$codon_sister1_ORF2_prev_MUT\n";
							
							my $sister1_ORF1_effect = 'S';
							
							#Sister1-ORF1
							my $AA_sister1_ORF1_MUT = &get_amino_acid($codon_sister1_ORF1_MUT);
#							print "AA_sister1_ORF1_MUT=$AA_sister1_ORF1_MUT\n";
							
							if($AA_sister1_ORF1_MUT ne $AA_sister1_ORF1) {
								$sister1_ORF1_effect = 'N';
							}
							
							if($AA_sister1_ORF1 eq '*' || $AA_sister1_ORF1_MUT eq '*') {
								$sister1_STOP_caused++;
							}
							
							
							my $sister1_ORF2_prev_effect = 'S';
							
							#Sister1-ORF2
							my $AA_sister1_ORF2_prev_MUT = &get_amino_acid($codon_sister1_ORF2_prev_MUT);
#							print "AA_sister1_ORF2_prev_MUT=$AA_sister1_ORF2_prev_MUT\n";
							
							if($AA_sister1_ORF2_prev_MUT ne $AA_sister1_ORF2_prev) {
								$sister1_ORF2_prev_effect = 'N';
							}
							
							if($AA_sister1_ORF2_prev eq '*' || $AA_sister1_ORF2_prev_MUT eq '*') {
								$sister1_STOP_caused++;
							}
							
							# TALLY VIABLE CHANGES, GET NUMBER OF DIFFS
				
							unless($sister1_STOP_caused > 0) {
								$sister1_num_changes_poss_site1++;
								
								if($sister1_ORF1_effect eq 'N') {
									if($sister1_ORF2_prev_effect eq 'N') {
										$sister1_num_changes_NN_site1++;
										
										# ACTUAL DIFF
										if($nt eq $nt1_sister2_WT) {
											$NN_diffs++;
											$site_diffs_hh{$codon_num}->{1}->{NN_diffs}++;
										}
										
									} elsif($sister1_ORF2_prev_effect eq 'S') {
										$sister1_num_changes_NS_site1++;
										
										# ACTUAL DIFF
										if($nt eq $nt1_sister2_WT) {
											$NS_diffs++;
											$site_diffs_hh{$codon_num}->{1}->{NS_diffs}++;
										}
									}
								} elsif($sister1_ORF1_effect eq 'S') {
									if($sister1_ORF2_prev_effect eq 'N') {
										$sister1_num_changes_SN_site1++;
										
										# ACTUAL DIFF
										if($nt eq $nt1_sister2_WT) {
											$SN_diffs++;
											$site_diffs_hh{$codon_num}->{1}->{SN_diffs}++;
										}
									} elsif($sister1_ORF2_prev_effect eq 'S') {
										$sister1_num_changes_SS_site1++;
										
										# ACTUAL DIFF
										if($nt eq $nt1_sister2_WT) {
											$SS_diffs++;
											$site_diffs_hh{$codon_num}->{1}->{SS_diffs}++;
										}
									}
								}
							}
						} # end sister 1 site 1
						
						
						# SITE 2
						# What is each change to ORF1 CODON SITE 2 / ORF2 CODON SITE 3?
						if($nt ne $nt2_sister1_WT) { # only one possibility for this site
							
							my $sister1_STOP_caused = 0;
							
							my $codon_sister1_ORF1_MUT = $codon_sister1_ORF1;
							$codon_sister1_ORF1_MUT =~ s/([ACGT])[ACGT]([ACGT])/$1$nt$2/;
							#print "codon_sister1_ORF1_MUT=$codon_sister1_ORF1_MUT\n";
							
							my $codon_sister1_ORF2_prev_MUT = $codon_sister1_ORF2_prev;
							$codon_sister1_ORF2_prev_MUT =~ s/([ACGT])([ACGT])[ACGT]/$1$2$nt/;
							#print "codon_sister1_ORF2_prev_MUT=$codon_sister1_ORF2_prev_MUT\n";
							
							my $sister1_ORF1_effect = 'S';
							
							#Sister1-ORF1
							my $AA_sister1_ORF1_MUT = &get_amino_acid($codon_sister1_ORF1_MUT);
							
							if($AA_sister1_ORF1_MUT ne $AA_sister1_ORF1) {
								$sister1_ORF1_effect = 'N';
							}
							
							if($AA_sister1_ORF1 eq '*' || $AA_sister1_ORF1_MUT eq '*') {
								$sister1_STOP_caused++;
							}
							
							
							my $sister1_ORF2_prev_effect = 'S';
							
							#Sister1-ORF2
							my $AA_sister1_ORF2_prev_MUT = &get_amino_acid($codon_sister1_ORF2_prev_MUT);
							
							if($AA_sister1_ORF2_prev_MUT ne $AA_sister1_ORF2_prev) {
								$sister1_ORF2_prev_effect = 'N';
							}
							
							if($AA_sister1_ORF2_prev eq '*' || $AA_sister1_ORF2_prev_MUT eq '*') {
								$sister1_STOP_caused++;
							}
							
							# TALLY VIABLE CHANGES, GET NUMBER OF DIFFS
				
							unless($sister1_STOP_caused > 0) {
								$sister1_num_changes_poss_site2++;
								
								if($sister1_ORF1_effect eq 'N') {
									if($sister1_ORF2_prev_effect eq 'N') {
										$sister1_num_changes_NN_site2++;
										
										# ACTUAL DIFF
										if($nt eq $nt2_sister2_WT) {
											$NN_diffs++;
											$site_diffs_hh{$codon_num}->{2}->{NN_diffs}++;
										}
										
									} elsif($sister1_ORF2_prev_effect eq 'S') {
										$sister1_num_changes_NS_site2++;
										
										# ACTUAL DIFF
										if($nt eq $nt2_sister2_WT) {
											$NS_diffs++;
											$site_diffs_hh{$codon_num}->{2}->{NS_diffs}++;
										}
									}
								} elsif($sister1_ORF1_effect eq 'S') {
									if($sister1_ORF2_prev_effect eq 'N') {
										$sister1_num_changes_SN_site2++;
										
										# ACTUAL DIFF
										if($nt eq $nt2_sister2_WT) {
											$SN_diffs++;
											$site_diffs_hh{$codon_num}->{2}->{SN_diffs}++;
										}
									} elsif($sister1_ORF2_prev_effect eq 'S') {
										$sister1_num_changes_SS_site2++;
										
										# ACTUAL DIFF
										if($nt eq $nt2_sister2_WT) {
											$SS_diffs++;
											$site_diffs_hh{$codon_num}->{2}->{SS_diffs}++;
										}
									}
								}
							}
						} # end sister 1 site 2
						
						
						# SITE 3
						# What is each change to ORF1 CODON SITE 3 / ORF2 (next) CODON SITE 1?
						if($nt ne $nt3_sister1_WT) { # only one possibility for this site
							
							my $sister1_STOP_caused = 0;
							
							my $codon_sister1_ORF1_MUT = $codon_sister1_ORF1;
							$codon_sister1_ORF1_MUT =~ s/([ACGT])([ACGT])[ACGT]/$1$2$nt/;
							#print "codon_sister1_ORF1_MUT=$codon_sister1_ORF1_MUT\n";
							
							my $codon_sister1_ORF2_next_MUT = $codon_sister1_ORF2_next;
							$codon_sister1_ORF2_next_MUT =~ s/[ACGT]([ACGT])([ACGT])/$nt$1$2/;
							#print "codon_sister1_ORF2_next_MUT=$codon_sister1_ORF2_next_MUT\n";
							
							my $sister1_ORF1_effect = 'S';
							
							#Sister1-ORF1
							my $AA_sister1_ORF1_MUT = &get_amino_acid($codon_sister1_ORF1_MUT);
							
							if($AA_sister1_ORF1_MUT ne $AA_sister1_ORF1) {
								$sister1_ORF1_effect = 'N';
							}
							
							if($AA_sister1_ORF1 eq '*' || $AA_sister1_ORF1_MUT eq '*') {
								$sister1_STOP_caused++;
							}
							
							
							my $sister1_ORF2_next_effect = 'S';
							
							#Sister1-ORF2
							my $AA_sister1_ORF2_next_MUT = &get_amino_acid($codon_sister1_ORF2_next_MUT);
							
							if($AA_sister1_ORF2_next_MUT ne $AA_sister1_ORF2_next) {
								$sister1_ORF2_next_effect = 'N';
							}
							
							if($AA_sister1_ORF2_next eq '*' || $AA_sister1_ORF2_next_MUT eq '*') {
								$sister1_STOP_caused++;
							}
							
							# TALLY VIABLE CHANGES, GET NUMBER OF DIFFS
				
							unless($sister1_STOP_caused > 0) {
								$sister1_num_changes_poss_site3++;
								
								if($sister1_ORF1_effect eq 'N') {
									if($sister1_ORF2_next_effect eq 'N') {
										$sister1_num_changes_NN_site3++;
										
										# ACTUAL DIFF
										if($nt eq $nt3_sister2_WT) {
											$NN_diffs++;
											$site_diffs_hh{$codon_num}->{3}->{NN_diffs}++;
										}
										
									} elsif($sister1_ORF2_next_effect eq 'S') {
										$sister1_num_changes_NS_site3++;
										
										# ACTUAL DIFF
										if($nt eq $nt3_sister2_WT) {
											$NS_diffs++;
											$site_diffs_hh{$codon_num}->{3}->{NS_diffs}++;
										}
									}
								} elsif($sister1_ORF1_effect eq 'S') {
									if($sister1_ORF2_next_effect eq 'N') {
										$sister1_num_changes_SN_site3++;
										
										# ACTUAL DIFF
										if($nt eq $nt3_sister2_WT) {
											$SN_diffs++;
											$site_diffs_hh{$codon_num}->{3}->{SN_diffs}++;
										}
									} elsif($sister1_ORF2_next_effect eq 'S') {
										$sister1_num_changes_SS_site3++;
										
										# ACTUAL DIFF
										if($nt eq $nt3_sister2_WT) {
											$SS_diffs++;
											$site_diffs_hh{$codon_num}->{3}->{SS_diffs}++;
										}
									}
								}
							}
						} # end sister 1 site 3
						
						
						
						##################################################################
						# SISTER2
						
						# SITE 1
						# What is each change to ORF1 CODON SITE 1 / ORF2 CODON SITE 2?
						if($nt ne $nt1_sister2_WT) { # only one possibility for this site
							 # only one possibility for this site
							
							my $sister2_STOP_caused = 0;
							
							my $codon_sister2_ORF1_MUT = $codon_sister2_ORF1;
							$codon_sister2_ORF1_MUT =~ s/[ACGT]([ACGT])([ACGT])/$nt$1$2/;
							#print "codon_sister2_ORF1_MUT=$codon_sister2_ORF1_MUT\n";
							
							my $codon_sister2_ORF2_prev_MUT = $codon_sister2_ORF2_prev;
							$codon_sister2_ORF2_prev_MUT =~ s/([ACGT])[ACGT]([ACGT])/$1$nt$2/;
							#print "codon_sister2_ORF2_prev_MUT=$codon_sister2_ORF2_prev_MUT\n";
							
							my $sister2_ORF1_effect = 'S';
							
							#Sister1-ORF1
							my $AA_sister2_ORF1_MUT = &get_amino_acid($codon_sister2_ORF1_MUT);
							
							if($AA_sister2_ORF1_MUT ne $AA_sister2_ORF1) {
								$sister2_ORF1_effect = 'N';
							}
							
							if($AA_sister2_ORF1 eq '*' || $AA_sister2_ORF1_MUT eq '*') {
								$sister2_STOP_caused++;
							}
							
							
							my $sister2_ORF2_prev_effect = 'S';
							
							#Sister1-ORF2
							my $AA_sister2_ORF2_prev_MUT = &get_amino_acid($codon_sister2_ORF2_prev_MUT);
							
							if($AA_sister2_ORF2_prev_MUT ne $AA_sister2_ORF2_prev) {
								$sister2_ORF2_prev_effect = 'N';
							}
							
							if($AA_sister2_ORF2_prev eq '*' || $AA_sister2_ORF2_prev_MUT eq '*') {
								$sister2_STOP_caused++;
							}
							
							# TALLY VIABLE CHANGES, GET NUMBER OF DIFFS
				
							unless($sister2_STOP_caused > 0) {
								$sister2_num_changes_poss_site1++;
								
								if($sister2_ORF1_effect eq 'N') {
									if($sister2_ORF2_prev_effect eq 'N') {
										$sister2_num_changes_NN_site1++;
										
										
									} elsif($sister2_ORF2_prev_effect eq 'S') {
										$sister2_num_changes_NS_site1++;
										
									}
								} elsif($sister2_ORF1_effect eq 'S') {
									if($sister2_ORF2_prev_effect eq 'N') {
										$sister2_num_changes_SN_site1++;
										
									} elsif($sister2_ORF2_prev_effect eq 'S') {
										$sister2_num_changes_SS_site1++;
										
									}
								}
							}
						} # end sister 2 site 1
						
						
						
						
						
						# SITE 2
						# What is each change to ORF1 CODON SITE 2 / ORF2 CODON SITE 3?
						if($nt ne $nt2_sister2_WT) { # only one possibility for this site
							
							my $sister2_STOP_caused = 0;
							
							my $codon_sister2_ORF1_MUT = $codon_sister2_ORF1;
							$codon_sister2_ORF1_MUT =~ s/([ACGT])[ACGT]([ACGT])/$1$nt$2/;
							#print "codon_sister2_ORF1_MUT=$codon_sister2_ORF1_MUT\n";
							
							my $codon_sister2_ORF2_prev_MUT = $codon_sister2_ORF2_prev;
							$codon_sister2_ORF2_prev_MUT =~ s/([ACGT])([ACGT])[ACGT]/$1$2$nt/;
							#print "codon_sister2_ORF2_prev_MUT=$codon_sister2_ORF2_prev_MUT\n";
							
							my $sister2_ORF1_effect = 'S';
							
							#Sister1-ORF1
							my $AA_sister2_ORF1_MUT = &get_amino_acid($codon_sister2_ORF1_MUT);
							
							if($AA_sister2_ORF1_MUT ne $AA_sister2_ORF1) {
								$sister2_ORF1_effect = 'N';
							}
							
							if($AA_sister2_ORF1 eq '*' || $AA_sister2_ORF1_MUT eq '*') {
								$sister2_STOP_caused++;
							}
							
							
							my $sister2_ORF2_prev_effect = 'S';
							
							#Sister1-ORF2
							my $AA_sister2_ORF2_prev_MUT = &get_amino_acid($codon_sister2_ORF2_prev_MUT);
							
							if($AA_sister2_ORF2_prev_MUT ne $AA_sister2_ORF2_prev) {
								$sister2_ORF2_prev_effect = 'N';
							}
							
							if($AA_sister2_ORF2_prev eq '*' || $AA_sister2_ORF2_prev_MUT eq '*') {
								$sister2_STOP_caused++;
							}
							
							# TALLY VIABLE CHANGES, GET NUMBER OF DIFFS
				
							unless($sister2_STOP_caused > 0) {
								$sister2_num_changes_poss_site2++;
								
								if($sister2_ORF1_effect eq 'N') {
									if($sister2_ORF2_prev_effect eq 'N') {
										$sister2_num_changes_NN_site2++;
										
									} elsif($sister2_ORF2_prev_effect eq 'S') {
										$sister2_num_changes_NS_site2++;
										
									}
								} elsif($sister2_ORF1_effect eq 'S') {
									if($sister2_ORF2_prev_effect eq 'N') {
										$sister2_num_changes_SN_site2++;
										
									} elsif($sister2_ORF2_prev_effect eq 'S') {
										$sister2_num_changes_SS_site2++;
										
									}
								}
							}
						} # end sister 2 site 2
						
						
						# SITE 3
						# What is each change to ORF1 CODON SITE 3 / ORF2 (next) CODON SITE 1?
						if($nt ne $nt3_sister2_WT) { # only one possibility for this site
							
							my $sister2_STOP_caused = 0;
							
							my $codon_sister2_ORF1_MUT = $codon_sister2_ORF1;
							$codon_sister2_ORF1_MUT =~ s/([ACGT])([ACGT])[ACGT]/$1$2$nt/;
							#print "codon_sister2_ORF1_MUT=$codon_sister2_ORF1_MUT\n";
							
							my $codon_sister2_ORF2_next_MUT = $codon_sister2_ORF2_next;
							$codon_sister2_ORF2_next_MUT =~ s/[ACGT]([ACGT])([ACGT])/$nt$1$2/;
							#print "codon_sister2_ORF2_next_MUT=$codon_sister2_ORF2_next_MUT\n";
							
							my $sister2_ORF1_effect = 'S';
							
							#sister2-ORF1
							my $AA_sister2_ORF1_MUT = &get_amino_acid($codon_sister2_ORF1_MUT);
							
							if($AA_sister2_ORF1_MUT ne $AA_sister2_ORF1) {
								$sister2_ORF1_effect = 'N';
							}
							
							if($AA_sister2_ORF1 eq '*' || $AA_sister2_ORF1_MUT eq '*') {
								$sister2_STOP_caused++;
							}
							
							
							my $sister2_ORF2_next_effect = 'S';
							
							#sister2-ORF2
							my $AA_sister2_ORF2_next_MUT = &get_amino_acid($codon_sister2_ORF2_next_MUT);
							
							if($AA_sister2_ORF2_next_MUT ne $AA_sister2_ORF2_next) {
								$sister2_ORF2_next_effect = 'N';
							}
							
							if($AA_sister2_ORF2_next eq '*' || $AA_sister2_ORF2_next_MUT eq '*') {
								$sister2_STOP_caused++;
							}
							
							# TALLY VIABLE CHANGES, GET NUMBER OF DIFFS
				
							unless($sister2_STOP_caused > 0) {
								$sister2_num_changes_poss_site3++;
								
								if($sister2_ORF1_effect eq 'N') {
									if($sister2_ORF2_next_effect eq 'N') {
										$sister2_num_changes_NN_site3++;
										
									} elsif($sister2_ORF2_next_effect eq 'S') {
										$sister2_num_changes_NS_site3++;
										
									}
								} elsif($sister2_ORF1_effect eq 'S') {
									if($sister2_ORF2_next_effect eq 'N') {
										$sister2_num_changes_SN_site3++;
										
									} elsif($sister2_ORF2_next_effect eq 'S') {
										$sister2_num_changes_SS_site3++;
										
									}
								}
							}
						} # end sister 2 site 3
					} # end cycling all 4 nucleotides
					
					# TALLY SITE 1
					my $NN_sites_sister1_site1 = 'NA';
					my $SN_sites_sister1_site1 = 'NA';
					my $NS_sites_sister1_site1 = 'NA';
					my $SS_sites_sister1_site1 = 'NA';
					if($sister1_num_changes_poss_site1 > 0) {
#						print "sister1_num_changes_poss_site1=$sister1_num_changes_poss_site1\n";
						$NN_sites_sister1_site1 = $sister1_num_changes_NN_site1 / $sister1_num_changes_poss_site1;
						$SN_sites_sister1_site1 = $sister1_num_changes_SN_site1 / $sister1_num_changes_poss_site1;
						$NS_sites_sister1_site1 = $sister1_num_changes_NS_site1 / $sister1_num_changes_poss_site1;
						$SS_sites_sister1_site1 = $sister1_num_changes_SS_site1 / $sister1_num_changes_poss_site1;
						
						unless(exists $seq_completed{$sister1}) {
							$seq2sites{$sister1}->{NN_sites} += $NN_sites_sister1_site1;
							$seq2sites{$sister1}->{SN_sites} += $SN_sites_sister1_site1;
							$seq2sites{$sister1}->{NS_sites} += $NS_sites_sister1_site1;
							$seq2sites{$sister1}->{SS_sites} += $SS_sites_sister1_site1;
						}
					}
					
					my $NN_sites_sister2_site1 = 'NA';
					my $SN_sites_sister2_site1 = 'NA';
					my $NS_sites_sister2_site1 = 'NA';
					my $SS_sites_sister2_site1 = 'NA';
					if($sister2_num_changes_poss_site1 > 0) {
						$NN_sites_sister2_site1 = $sister2_num_changes_NN_site1 / $sister2_num_changes_poss_site1;
						$SN_sites_sister2_site1 = $sister2_num_changes_SN_site1 / $sister2_num_changes_poss_site1;
						$NS_sites_sister2_site1 = $sister2_num_changes_NS_site1 / $sister2_num_changes_poss_site1;
						$SS_sites_sister2_site1 = $sister2_num_changes_SS_site1 / $sister2_num_changes_poss_site1;
						
						unless(exists $seq_completed{$sister2}) {
							$seq2sites{$sister2}->{NN_sites} += $NN_sites_sister2_site1;
							$seq2sites{$sister2}->{SN_sites} += $SN_sites_sister2_site1;
							$seq2sites{$sister2}->{NS_sites} += $NS_sites_sister2_site1;
							$seq2sites{$sister2}->{SS_sites} += $SS_sites_sister2_site1;
						}
					}
					
					my $NN_sites_site1 = 'NA';
					my $SN_sites_site1 = 'NA';
					my $NS_sites_site1 = 'NA';
					my $SS_sites_site1 = 'NA';
					if($sister1_num_changes_poss_site1 > 0 && $sister2_num_changes_poss_site1 > 0) {
						$NN_sites_site1 = ($NN_sites_sister1_site1 + $NN_sites_sister2_site1) / 2;
						$SN_sites_site1 = ($SN_sites_sister1_site1 + $SN_sites_sister2_site1) / 2;
						$NS_sites_site1 = ($NS_sites_sister1_site1 + $NS_sites_sister2_site1) / 2;
						$SS_sites_site1 = ($SS_sites_sister1_site1 + $SS_sites_sister2_site1) / 2;
					} elsif($sister1_num_changes_poss_site1 > 0) {
						$NN_sites_site1 = $NN_sites_sister1_site1;
						$SN_sites_site1 = $SN_sites_sister1_site1;
						$NS_sites_site1 = $NS_sites_sister1_site1;
						$SS_sites_site1 = $SS_sites_sister1_site1;
					} elsif($sister2_num_changes_poss_site1 > 0) {
						$NN_sites_site1 = $NN_sites_sister2_site1;
						$SN_sites_site1 = $SN_sites_sister2_site1;
						$NS_sites_site1 = $NS_sites_sister2_site1;
						$SS_sites_site1 = $SS_sites_sister2_site1;
						
					} # else nothing defined, stay NA
					
					# TALLY SITE 2
					my $NN_sites_sister1_site2 = 'NA';
					my $SN_sites_sister1_site2 = 'NA';
					my $NS_sites_sister1_site2 = 'NA';
					my $SS_sites_sister1_site2 = 'NA';
					if($sister1_num_changes_poss_site2 > 0) {
#						print "sister1_num_changes_poss_site2=$sister1_num_changes_poss_site2\n";
						$NN_sites_sister1_site2 = $sister1_num_changes_NN_site2 / $sister1_num_changes_poss_site2;
						$SN_sites_sister1_site2 = $sister1_num_changes_SN_site2 / $sister1_num_changes_poss_site2;
						$NS_sites_sister1_site2 = $sister1_num_changes_NS_site2 / $sister1_num_changes_poss_site2;
						$SS_sites_sister1_site2 = $sister1_num_changes_SS_site2 / $sister1_num_changes_poss_site2;
						
						unless(exists $seq_completed{$sister1}) {
							$seq2sites{$sister1}->{NN_sites} += $NN_sites_sister1_site2;
							$seq2sites{$sister1}->{SN_sites} += $SN_sites_sister1_site2;
							$seq2sites{$sister1}->{NS_sites} += $NS_sites_sister1_site2;
							$seq2sites{$sister1}->{SS_sites} += $SS_sites_sister1_site2;
						}
					}
					
					my $NN_sites_sister2_site2 = 'NA';
					my $SN_sites_sister2_site2 = 'NA';
					my $NS_sites_sister2_site2 = 'NA';
					my $SS_sites_sister2_site2 = 'NA';
					if($sister2_num_changes_poss_site2 > 0) {
						$NN_sites_sister2_site2 = $sister2_num_changes_NN_site2 / $sister2_num_changes_poss_site2;
						$SN_sites_sister2_site2 = $sister2_num_changes_SN_site2 / $sister2_num_changes_poss_site2;
						$NS_sites_sister2_site2 = $sister2_num_changes_NS_site2 / $sister2_num_changes_poss_site2;
						$SS_sites_sister2_site2 = $sister2_num_changes_SS_site2 / $sister2_num_changes_poss_site2;
						
						unless(exists $seq_completed{$sister2}) {
							$seq2sites{$sister2}->{NN_sites} += $NN_sites_sister2_site2;
							$seq2sites{$sister2}->{SN_sites} += $SN_sites_sister2_site2;
							$seq2sites{$sister2}->{NS_sites} += $NS_sites_sister2_site2;
							$seq2sites{$sister2}->{SS_sites} += $SS_sites_sister2_site2;
						}
					}
					
					my $NN_sites_site2 = 'NA';
					my $SN_sites_site2 = 'NA';
					my $NS_sites_site2 = 'NA';
					my $SS_sites_site2 = 'NA';
					if($sister1_num_changes_poss_site2 > 0 && $sister2_num_changes_poss_site2 > 0) {
						$NN_sites_site2 = ($NN_sites_sister1_site2 + $NN_sites_sister2_site2) / 2;
						$SN_sites_site2 = ($SN_sites_sister1_site2 + $SN_sites_sister2_site2) / 2;
						$NS_sites_site2 = ($NS_sites_sister1_site2 + $NS_sites_sister2_site2) / 2;
						$SS_sites_site2 = ($SS_sites_sister1_site2 + $SS_sites_sister2_site2) / 2;
					} elsif($sister1_num_changes_poss_site2 > 0) {
						$NN_sites_site2 = $NN_sites_sister1_site2;
						$SN_sites_site2 = $SN_sites_sister1_site2;
						$NS_sites_site2 = $NS_sites_sister1_site2;
						$SS_sites_site2 = $SS_sites_sister1_site2;
					} elsif($sister2_num_changes_poss_site2 > 0) {
						$NN_sites_site2 = $NN_sites_sister2_site2;
						$SN_sites_site2 = $SN_sites_sister2_site2;
						$NS_sites_site2 = $NS_sites_sister2_site2;
						$SS_sites_site2 = $SS_sites_sister2_site2;
						
					} # else nothing defined, stay NA
					
					# TALLY SITE 3
					my $NN_sites_sister1_site3 = 'NA';
					my $SN_sites_sister1_site3 = 'NA';
					my $NS_sites_sister1_site3 = 'NA';
					my $SS_sites_sister1_site3 = 'NA';
					if($sister1_num_changes_poss_site3 > 0) {
#						print "sister1_num_changes_poss_site3=$sister1_num_changes_poss_site3\n";
						$NN_sites_sister1_site3 = $sister1_num_changes_NN_site3 / $sister1_num_changes_poss_site3;
						$SN_sites_sister1_site3 = $sister1_num_changes_SN_site3 / $sister1_num_changes_poss_site3;
						$NS_sites_sister1_site3 = $sister1_num_changes_NS_site3 / $sister1_num_changes_poss_site3;
						$SS_sites_sister1_site3 = $sister1_num_changes_SS_site3 / $sister1_num_changes_poss_site3;
						
						unless(exists $seq_completed{$sister1}) {
							$seq2sites{$sister1}->{NN_sites} += $NN_sites_sister1_site3;
							$seq2sites{$sister1}->{SN_sites} += $SN_sites_sister1_site3;
							$seq2sites{$sister1}->{NS_sites} += $NS_sites_sister1_site3;
							$seq2sites{$sister1}->{SS_sites} += $SS_sites_sister1_site3;
						}
					}
					
					my $NN_sites_sister2_site3 = 'NA';
					my $SN_sites_sister2_site3 = 'NA';
					my $NS_sites_sister2_site3 = 'NA';
					my $SS_sites_sister2_site3 = 'NA';
					if($sister2_num_changes_poss_site3 > 0) {
						$NN_sites_sister2_site3 = $sister2_num_changes_NN_site3 / $sister2_num_changes_poss_site3;
						$SN_sites_sister2_site3 = $sister2_num_changes_SN_site3 / $sister2_num_changes_poss_site3;
						$NS_sites_sister2_site3 = $sister2_num_changes_NS_site3 / $sister2_num_changes_poss_site3;
						$SS_sites_sister2_site3 = $sister2_num_changes_SS_site3 / $sister2_num_changes_poss_site3;
						
						unless(exists $seq_completed{$sister2}) {
							$seq2sites{$sister2}->{NN_sites} += $NN_sites_sister2_site3;
							$seq2sites{$sister2}->{SN_sites} += $SN_sites_sister2_site3;
							$seq2sites{$sister2}->{NS_sites} += $NS_sites_sister2_site3;
							$seq2sites{$sister2}->{SS_sites} += $SS_sites_sister2_site3;
						}
					}
					
					my $NN_sites_site3 = 'NA';
					my $SN_sites_site3 = 'NA';
					my $NS_sites_site3 = 'NA';
					my $SS_sites_site3 = 'NA';
					if($sister1_num_changes_poss_site3 > 0 && $sister2_num_changes_poss_site3 > 0) {
						$NN_sites_site3 = ($NN_sites_sister1_site3 + $NN_sites_sister2_site3) / 2;
						$SN_sites_site3 = ($SN_sites_sister1_site3 + $SN_sites_sister2_site3) / 2;
						$NS_sites_site3 = ($NS_sites_sister1_site3 + $NS_sites_sister2_site3) / 2;
						$SS_sites_site3 = ($SS_sites_sister1_site3 + $SS_sites_sister2_site3) / 2;
					} elsif($sister1_num_changes_poss_site3 > 0) {
						$NN_sites_site3 = $NN_sites_sister1_site3;
						$SN_sites_site3 = $SN_sites_sister1_site3;
						$NS_sites_site3 = $NS_sites_sister1_site3;
						$SS_sites_site3 = $SS_sites_sister1_site3;
					} elsif($sister2_num_changes_poss_site3 > 0) {
						$NN_sites_site3 = $NN_sites_sister2_site3;
						$SN_sites_site3 = $SN_sites_sister2_site3;
						$NS_sites_site3 = $NS_sites_sister2_site3;
						$SS_sites_site3 = $SS_sites_sister2_site3;
						
					} # else nothing defined, stay NA
					
					# SUM THE TWO SITES
					my $NN_sites = $NN_sites_site1 + $NN_sites_site2 + $NN_sites_site3;
					my $SN_sites = $SN_sites_site1 + $SN_sites_site2 + $SN_sites_site3;
					my $NS_sites = $NS_sites_site1 + $NS_sites_site2 + $NS_sites_site3;
					my $SS_sites = $SS_sites_site1 + $SS_sites_site2 + $SS_sites_site3;
					
					
					# Check if there are multiple variants in these overlapping codons
					my $MNV = 'FALSE';
					if(($NN_diffs + $SN_diffs + $NS_diffs + $SS_diffs) > 1) {
						$MNV = 'TRUE';
					}
					
					print CODON_FILE "$fasta_file_short\t$tree_file_short\t$pair_num\t$sister1\t$sister2\t" .
						"$pair_bootstrap\t$codon_num\t" .
						"$codon_sister1_ORF1\t$codon_sister2_ORF1\t" .
						"$codon_sister1_ORF2_prev$codon_sister1_ORF2_next\t" . 
						"$codon_sister2_ORF2_prev$codon_sister2_ORF2_next\t" .
						"$MNV\t" .
						"$NN_sites\t$SN_sites\t$NS_sites\t$SS_sites\t$NN_diffs\t$SN_diffs\t$NS_diffs\t$SS_diffs\n";
					
					unless($MNV eq 'TRUE') { # exclude data from overlapping codons with multiple variants
						# Store sites
						$sister_data_hh{$pair_num}->{NN_sites} += $NN_sites;
						$sister_data_hh{$pair_num}->{SN_sites} += $SN_sites;
						$sister_data_hh{$pair_num}->{NS_sites} += $NS_sites;
						$sister_data_hh{$pair_num}->{SS_sites} += $SS_sites;
						
						# Store diffs
						$sister_data_hh{$pair_num}->{NN_diffs} += $NN_diffs;
						$sister_data_hh{$pair_num}->{SN_diffs} += $SN_diffs;
						$sister_data_hh{$pair_num}->{NS_diffs} += $NS_diffs;
						$sister_data_hh{$pair_num}->{SS_diffs} += $SS_diffs;
					} else {
						$site_diffs_hh{$codon_num}->{1}->{NN_diffs} = 0;
						$site_diffs_hh{$codon_num}->{1}->{SN_diffs} = 0;
						$site_diffs_hh{$codon_num}->{1}->{NS_diffs} = 0;
						$site_diffs_hh{$codon_num}->{1}->{SS_diffs} = 0;
						
						$site_diffs_hh{$codon_num}->{2}->{NN_diffs} = 0;
						$site_diffs_hh{$codon_num}->{2}->{SN_diffs} = 0;
						$site_diffs_hh{$codon_num}->{2}->{NS_diffs} = 0;
						$site_diffs_hh{$codon_num}->{2}->{SS_diffs} = 0;
						
						$site_diffs_hh{$codon_num}->{3}->{NN_diffs} = 0;
						$site_diffs_hh{$codon_num}->{3}->{SN_diffs} = 0;
						$site_diffs_hh{$codon_num}->{3}->{NS_diffs} = 0;
						$site_diffs_hh{$codon_num}->{3}->{SS_diffs} = 0;
					}
					
				} # MIDDLE codon (not first or last; two ORF2 codons overlap
				
				
##########################################################################################
############# SENSE-SENSE:
#############  ss13:
#############    ORF1: 1-2-3-1-2-3-1
#############    ORF2: 3-1-2-3-1-2-3
##########################################################################################
			} elsif($phase eq 'ss13') {
				# Last 1 nt of prev codon, first 2 nt of next codon (same strand)
				my $codon_sister1_ORF2_prev = substr($product_seq_sister1, ($site_index - 2), 3);
				my $codon_sister1_ORF2_next = substr($product_seq_sister1, ($site_index + 1), 3);
				my $codon_sister2_ORF2_prev = substr($product_seq_sister2, ($site_index - 2), 3);
				my $codon_sister2_ORF2_next = substr($product_seq_sister2, ($site_index + 1), 3);
				
			
##########################################################################################
############# SENSE-ANTISENSE:
#############  sas11:
#############    ORF1: 1-2-3-1-2-3-1
#############    ORF2: 1-3-2-1-3-2-1
##########################################################################################
			} elsif($phase eq 'sas11') {
				# First 1 nt of next codon, last 2 nt of prev codon (opposite strand)
				my $codon_sister1_ORF2_prev = substr($product_seq_sister1, ($site_index + 1), 3); # remember, looking 3'->5'
				$codon_sister1_ORF2_prev = &revcom($codon_sister1_ORF2_prev);
				my $codon_sister1_ORF2_next = substr($product_seq_sister1, ($site_index - 2), 3);
				$codon_sister1_ORF2_next = &revcom($codon_sister1_ORF2_next);
				
				my $codon_sister2_ORF2_prev = substr($product_seq_sister2, ($site_index + 1), 3);
				$codon_sister2_ORF2_prev = &revcom($codon_sister2_ORF2_prev);
				my $codon_sister2_ORF2_next = substr($product_seq_sister2, ($site_index - 2), 3);
				$codon_sister2_ORF2_next = &revcom($codon_sister2_ORF2_next);
				
			
##########################################################################################
############# SENSE-ANTISENSE:
#############  sas12:
#############    ORF1: 1-2-3-1-2-3-1
#############    ORF2: 2-1-3-2-1-3-2
##########################################################################################
			} elsif($phase eq 'sas12') {
				
				# First 2 nt of prev codon, last 1 nt of next codon (opposite strand)
				my $codon_sister1_ORF2_prev = &revcom(substr($product_seq_sister1, ($site_index - 1), 3));
				my $codon_sister1_ORF2_next = &revcom(substr($product_seq_sister1, ($site_index + 2), 3));
				my $codon_sister2_ORF2_prev = &revcom(substr($product_seq_sister2, ($site_index - 1), 3));
				my $codon_sister2_ORF2_next = &revcom(substr($product_seq_sister2, ($site_index + 2), 3));
				
				my $AA_sister1_ORF2_prev = &get_amino_acid($codon_sister1_ORF2_prev);
				my $AA_sister1_ORF2_next = &get_amino_acid($codon_sister1_ORF2_next);
				my $AA_sister2_ORF2_prev = &get_amino_acid($codon_sister2_ORF2_prev);
				my $AA_sister2_ORF2_next = &get_amino_acid($codon_sister2_ORF2_next);
				
				
				#######################
				# GET NUMBER OF SITES
				
				if($codon_num == 1) {
					# ORF1 FIRST CODON: only ORF2's NEXT codon fully defined, its site 3
					my $sister1_num_changes_poss = 0;
					my $sister1_num_changes_NN = 0;
					my $sister1_num_changes_SN = 0;
					my $sister1_num_changes_NS = 0;
					my $sister1_num_changes_SS = 0;
					
					my $sister2_num_changes_poss = 0;
					my $sister2_num_changes_NN = 0;
					my $sister2_num_changes_SN = 0;
					my $sister2_num_changes_NS = 0;
					my $sister2_num_changes_SS = 0;
					
					my $NN_diffs = 0;
					my $SN_diffs = 0;
					my $NS_diffs = 0;
					my $SS_diffs = 0;
					
					my $nt_sister1_WT = substr($codon_sister1_ORF1, 2, 1);
					#print "codon_sister1_ORF1=$codon_sister1_ORF1\n";
					my $nt_sister2_WT = substr($codon_sister2_ORF1, 2, 1);
					#print "codon_sister1_ORF1=$codon_sister2_ORF1\n";
					
					# What is each change to ORF1 CODON SITE 3 and ORF2 CODON SITE 3 (revcom)?
					foreach my $nt (@nucleotides) {
						my $nt_revcom = &revcom($nt);
						
						if($nt ne $nt_sister1_WT) { # only one possibility for this site
							##########
							# SISTER1, SITE 3 only
							my $sister1_STOP_caused = 0;
							
							my $codon_sister1_ORF1_MUT = $codon_sister1_ORF1;
							$codon_sister1_ORF1_MUT =~ s/([ACGT])([ACGT])[ACGT]/$1$2$nt/;
							#print "codon_sister1_ORF1_MUT=$codon_sister1_ORF1_MUT\n";
							
							my $codon_sister1_ORF2_next_MUT = $codon_sister1_ORF2_next;
							$codon_sister1_ORF2_next_MUT =~ s/([ACGT])([ACGT])[ACGT]/$1$2$nt_revcom/;
							#print "codon_sister1_ORF2_next_MUT=$codon_sister1_ORF2_next_MUT\n";
							
							my $sister1_ORF1_effect = 'S';
							if($codon_sister1_ORF1_MUT ne $codon_sister1_ORF1) { # it's a different codon
								#Sister1-ORF1
								my $AA_sister1_ORF1_MUT = &get_amino_acid($codon_sister1_ORF1_MUT);
								
								if($AA_sister1_ORF1_MUT ne $AA_sister1_ORF1) {
									$sister1_ORF1_effect = 'N';
								}
								
								if($AA_sister1_ORF1 eq '*' || $AA_sister1_ORF1_MUT eq '*') {
									$sister1_STOP_caused++;
								}
							}
							
							my $sister1_ORF2_next_effect = 'S';
							if($codon_sister1_ORF2_next_MUT ne $codon_sister1_ORF2_next) { # it's a different codon
								#Sister1-ORF2
								my $AA_sister1_ORF2_next_MUT = &get_amino_acid($codon_sister1_ORF2_next_MUT);
								
								if($AA_sister1_ORF2_next_MUT ne $AA_sister1_ORF2_next) {
									$sister1_ORF2_next_effect = 'N';
								}
								
								if($AA_sister1_ORF2_next eq '*' || $AA_sister1_ORF2_next_MUT eq '*') {
									$sister1_STOP_caused++;
								}
							}
							
							# TALLY VIABLE CHANGES, GET NUMBER OF DIFFS
				
							unless($sister1_STOP_caused > 0) {
								$sister1_num_changes_poss++;
								
								if($sister1_ORF1_effect eq 'N') {
									if($sister1_ORF2_next_effect eq 'N') {
										$sister1_num_changes_NN++;
										
										# ACTUAL DIFF
										if($codon_sister1_ORF1_MUT eq $codon_sister2_ORF1) {
											$NN_diffs++;
											$site_diffs_hh{$codon_num}->{3}->{NN_diffs}++;
										}
										
									} elsif($sister1_ORF2_next_effect eq 'S') {
										$sister1_num_changes_NS++;
										
										# ACTUAL DIFF
										if($codon_sister1_ORF1_MUT eq $codon_sister2_ORF1) {
											$NS_diffs++;
											$site_diffs_hh{$codon_num}->{3}->{NS_diffs}++;
										}
									}
								} elsif($sister1_ORF1_effect eq 'S') {
									if($sister1_ORF2_next_effect eq 'N') {
										$sister1_num_changes_SN++;
										
										# ACTUAL DIFF
										if($codon_sister1_ORF1_MUT eq $codon_sister2_ORF1) {
											$SN_diffs++;
											$site_diffs_hh{$codon_num}->{3}->{SN_diffs}++;
										}
									} elsif($sister1_ORF2_next_effect eq 'S') {
										$sister1_num_changes_SS++;
										
										# ACTUAL DIFF
										if($codon_sister1_ORF1_MUT eq $codon_sister2_ORF1) {
											$SS_diffs++;
											$site_diffs_hh{$codon_num}->{3}->{SS_diffs}++;
										}
									}
								}
							}
						}
						
						if($nt ne $nt_sister2_WT) { # only one possibility for this site
							
							##########
							#SISTER2
							my $sister2_STOP_caused = 0;
							
							my $codon_sister2_ORF1_MUT = $codon_sister2_ORF1;
							$codon_sister2_ORF1_MUT =~ s/([ACGT])([ACGT])[ACGT]/$1$2$nt/;
							
							my $codon_sister2_ORF2_next_MUT = $codon_sister2_ORF2_next;
							$codon_sister2_ORF2_next_MUT =~ s/([ACGT])([ACGT])[ACGT]/$1$2$nt_revcom/;
							
							my $sister2_ORF1_effect = 'S';
							if($codon_sister2_ORF1_MUT ne $codon_sister2_ORF1) { # it's a different codon
								#Sister2-ORF1
								my $AA_sister2_ORF1_MUT = &get_amino_acid($codon_sister2_ORF1_MUT);
								
								if($AA_sister2_ORF1_MUT ne $AA_sister2_ORF1) {
									$sister2_ORF1_effect = 'N';
								}
								
								if($AA_sister2_ORF1 eq '*' || $AA_sister2_ORF1_MUT eq '*') {
									$sister2_STOP_caused++;
								}
							}
							
							my $sister2_ORF2_next_effect = 'S';
							if($codon_sister2_ORF2_next_MUT ne $codon_sister2_ORF2_next) { # it's a different codon
								#Sister2-ORF2
								my $AA_sister2_ORF2_next_MUT = &get_amino_acid($codon_sister2_ORF2_next_MUT);
								
								if($AA_sister2_ORF2_next_MUT ne $AA_sister2_ORF2_next) {
									$sister2_ORF2_next_effect = 'N';
								}
								
								if($AA_sister2_ORF2_next eq '*' || $AA_sister2_ORF2_next_MUT eq '*') {
									$sister2_STOP_caused++;
								}
							}
							
							# TALLY VIABLE CHANGES, DIFFS ALREADY DETERMINED
							unless($sister2_STOP_caused > 0) {
								$sister2_num_changes_poss++;
								
								if($sister2_ORF1_effect eq 'N') {
									if($sister2_ORF2_next_effect eq 'N') {
										$sister2_num_changes_NN++;
									} elsif($sister2_ORF2_next_effect eq 'S') {
										$sister2_num_changes_NS++;
									}
								} elsif($sister2_ORF1_effect eq 'S') {
									if($sister2_ORF2_next_effect eq 'N') {
										$sister2_num_changes_SN++;
									} elsif($sister2_ORF2_next_effect eq 'S') {
										$sister2_num_changes_SS++;
									}
								}
							}
						} # wasn't the WT nucleotide	
					} # finished examining all 3 possible nucleotide changes
					
					
					# TALLY
					my $NN_sites_sister1 = 'NA';
					my $SN_sites_sister1 = 'NA';
					my $NS_sites_sister1 = 'NA';
					my $SS_sites_sister1 = 'NA';
					if($sister1_num_changes_poss > 0) {
						$NN_sites_sister1 = $sister1_num_changes_NN / $sister1_num_changes_poss;
						$SN_sites_sister1 = $sister1_num_changes_SN / $sister1_num_changes_poss;
						$NS_sites_sister1 = $sister1_num_changes_NS / $sister1_num_changes_poss;
						$SS_sites_sister1 = $sister1_num_changes_SS / $sister1_num_changes_poss;
						
						unless(exists $seq_completed{$sister1}) {
							$seq2sites{$sister1}->{NN_sites} += $NN_sites_sister1;
							$seq2sites{$sister1}->{SN_sites} += $SN_sites_sister1;
							$seq2sites{$sister1}->{NS_sites} += $NS_sites_sister1;
							$seq2sites{$sister1}->{SS_sites} += $SS_sites_sister1;
						}
					}
					
					my $NN_sites_sister2 = 'NA';
					my $SN_sites_sister2 = 'NA';
					my $NS_sites_sister2 = 'NA';
					my $SS_sites_sister2 = 'NA';
					if($sister2_num_changes_poss > 0) {
						$NN_sites_sister2 = $sister2_num_changes_NN / $sister2_num_changes_poss;
						$SN_sites_sister2 = $sister2_num_changes_SN / $sister2_num_changes_poss;
						$NS_sites_sister2 = $sister2_num_changes_NS / $sister2_num_changes_poss;
						$SS_sites_sister2 = $sister2_num_changes_SS / $sister2_num_changes_poss;
						
						unless(exists $seq_completed{$sister2}) {
							$seq2sites{$sister2}->{NN_sites} += $NN_sites_sister2;
							$seq2sites{$sister2}->{SN_sites} += $SN_sites_sister2;
							$seq2sites{$sister2}->{NS_sites} += $NS_sites_sister2;
							$seq2sites{$sister2}->{SS_sites} += $SS_sites_sister2;
						}
					}
					
					my $NN_sites = 'NA';
					my $SN_sites = 'NA';
					my $NS_sites = 'NA';
					my $SS_sites = 'NA';
					if($sister1_num_changes_poss > 0 && $sister2_num_changes_poss > 0) {
						$NN_sites = ($NN_sites_sister1 + $NN_sites_sister2) / 2;
						$SN_sites = ($SN_sites_sister1 + $SN_sites_sister2) / 2;
						$NS_sites = ($NS_sites_sister1 + $NS_sites_sister2) / 2;
						$SS_sites = ($SS_sites_sister1 + $SS_sites_sister2) / 2;
					} elsif($sister1_num_changes_poss > 0) {
						$NN_sites = $NN_sites_sister1;
						$SN_sites = $SN_sites_sister1;
						$NS_sites = $NS_sites_sister1;
						$SS_sites = $SS_sites_sister1;
					} elsif($sister2_num_changes_poss > 0) {
						$NN_sites = $NN_sites_sister2;
						$SN_sites = $SN_sites_sister2;
						$NS_sites = $NS_sites_sister2;
						$SS_sites = $SS_sites_sister2;
						
					} # else nothing defined, stay NA
					
					# Check if there are multiple variants in these overlapping codons
					my $MNV = 'FALSE';
					if(($NN_diffs + $SN_diffs + $NS_diffs + $SS_diffs) > 1) {
						$MNV = 'TRUE';
					}
					
					print CODON_FILE "$fasta_file_short\t$tree_file_short\t$pair_num\t$sister1\t$sister2\t" .
						"$pair_bootstrap\t$codon_num\t" .
						"$codon_sister1_ORF1\t$codon_sister2_ORF1\t" .
						"$codon_sister1_ORF2_next\t" . 
						"$codon_sister2_ORF2_next\t" .
						"$MNV\t" .
						"$NN_sites\t$SN_sites\t$NS_sites\t$SS_sites\t$NN_diffs\t$SN_diffs\t$NS_diffs\t$SS_diffs\n"; # either codon might contain N or -
					
					unless($MNV eq 'TRUE') { # exclude data from overlapping codons with multiple variants
						# Store sites
						$sister_data_hh{$pair_num}->{NN_sites} += $NN_sites;
						$sister_data_hh{$pair_num}->{SN_sites} += $SN_sites;
						$sister_data_hh{$pair_num}->{NS_sites} += $NS_sites;
						$sister_data_hh{$pair_num}->{SS_sites} += $SS_sites;
						
						# Store diffs
						$sister_data_hh{$pair_num}->{NN_diffs} += $NN_diffs;
						$sister_data_hh{$pair_num}->{SN_diffs} += $SN_diffs;
						$sister_data_hh{$pair_num}->{NS_diffs} += $NS_diffs;
						$sister_data_hh{$pair_num}->{SS_diffs} += $SS_diffs;
					} else {
						$site_diffs_hh{$codon_num}->{3}->{NN_diffs} = 0;
						$site_diffs_hh{$codon_num}->{3}->{SN_diffs} = 0;
						$site_diffs_hh{$codon_num}->{3}->{NS_diffs} = 0;
						$site_diffs_hh{$codon_num}->{3}->{SS_diffs} = 0;
					}
					
				} elsif($codon_num == $num_codons) { # end FIRST codon
					# ORF1 LAST CODON: only ORF2's PREV codon fully defined, 2 sites to examine
				
					my $sister1_num_changes_poss_site1 = 0;
					my $sister1_num_changes_NN_site1 = 0;
					my $sister1_num_changes_SN_site1 = 0;
					my $sister1_num_changes_NS_site1 = 0;
					my $sister1_num_changes_SS_site1 = 0;
					
					my $sister1_num_changes_poss_site2 = 0;
					my $sister1_num_changes_NN_site2 = 0;
					my $sister1_num_changes_SN_site2 = 0;
					my $sister1_num_changes_NS_site2 = 0;
					my $sister1_num_changes_SS_site2 = 0;
					
					my $sister2_num_changes_poss_site1 = 0;
					my $sister2_num_changes_NN_site1 = 0;
					my $sister2_num_changes_SN_site1 = 0;
					my $sister2_num_changes_NS_site1 = 0;
					my $sister2_num_changes_SS_site1 = 0;
					
					my $sister2_num_changes_poss_site2 = 0;
					my $sister2_num_changes_NN_site2 = 0;
					my $sister2_num_changes_SN_site2 = 0;
					my $sister2_num_changes_NS_site2 = 0;
					my $sister2_num_changes_SS_site2 = 0;
					
					my $NN_diffs = 0;
					my $SN_diffs = 0;
					my $NS_diffs = 0;
					my $SS_diffs = 0;
					
					
					my $nt1_sister1_WT = substr($codon_sister1_ORF1, 0, 1);
					my $nt2_sister1_WT = substr($codon_sister1_ORF1, 1, 1);
#					print "codon_sister1_ORF1=$codon_sister1_ORF1\n";
					my $nt1_sister2_WT = substr($codon_sister2_ORF1, 0, 1);
					my $nt2_sister2_WT = substr($codon_sister2_ORF1, 1, 1);
#					print "codon_sister1_ORF1=$codon_sister2_ORF1\n";
					
					
					
					
					
					
					foreach my $nt (@nucleotides) {
						my $nt_revcom = &revcom($nt);
						
						##################################################################
						# SISTER1
						
						# SITE 1
						# What is each change to ORF1 CODON SITE 1 / ORF2 CODON SITE 2?
						if($nt ne $nt1_sister1_WT) { # only one possibility for this site
							 # only one possibility for this site
							
							my $sister1_STOP_caused = 0;
							
							my $codon_sister1_ORF1_MUT = $codon_sister1_ORF1;
							$codon_sister1_ORF1_MUT =~ s/[ACGT]([ACGT])([ACGT])/$nt$1$2/;
#							print "codon_sister1_ORF1_MUT=$codon_sister1_ORF1_MUT\n";
							
							my $codon_sister1_ORF2_prev_MUT = $codon_sister1_ORF2_prev;
							$codon_sister1_ORF2_prev_MUT =~ s/([ACGT])[ACGT]([ACGT])/$1$nt_revcom$2/;
#							print "codon_sister1_ORF2_prev_MUT=$codon_sister1_ORF2_prev_MUT\n";
							
							my $sister1_ORF1_effect = 'S';
							
							#Sister1-ORF1
							my $AA_sister1_ORF1_MUT = &get_amino_acid($codon_sister1_ORF1_MUT);
#							print "AA_sister1_ORF1_MUT=$AA_sister1_ORF1_MUT\n";
							
							if($AA_sister1_ORF1_MUT ne $AA_sister1_ORF1) {
								$sister1_ORF1_effect = 'N';
							}
							
							if($AA_sister1_ORF1 eq '*' || $AA_sister1_ORF1_MUT eq '*') {
								$sister1_STOP_caused++;
							}
							
							
							my $sister1_ORF2_prev_effect = 'S';
							
							#Sister1-ORF2
							my $AA_sister1_ORF2_prev_MUT = &get_amino_acid($codon_sister1_ORF2_prev_MUT);
#							print "AA_sister1_ORF2_prev_MUT=$AA_sister1_ORF2_prev_MUT\n";
							
							if($AA_sister1_ORF2_prev_MUT ne $AA_sister1_ORF2_prev) {
								$sister1_ORF2_prev_effect = 'N';
							}
							
							if($AA_sister1_ORF2_prev eq '*' || $AA_sister1_ORF2_prev_MUT eq '*') {
								$sister1_STOP_caused++;
							}
							
							# TALLY VIABLE CHANGES, GET NUMBER OF DIFFS
				
							unless($sister1_STOP_caused > 0) {
								$sister1_num_changes_poss_site1++;
								
								if($sister1_ORF1_effect eq 'N') {
									if($sister1_ORF2_prev_effect eq 'N') {
										$sister1_num_changes_NN_site1++;
										
										# ACTUAL DIFF
										if($nt eq $nt1_sister2_WT) {
											$NN_diffs++;
											$site_diffs_hh{$codon_num}->{1}->{NN_diffs}++;
										}
										
									} elsif($sister1_ORF2_prev_effect eq 'S') {
										$sister1_num_changes_NS_site1++;
										
										# ACTUAL DIFF
										if($nt eq $nt1_sister2_WT) {
											$NS_diffs++;
											$site_diffs_hh{$codon_num}->{1}->{NS_diffs}++;
										}
									}
								} elsif($sister1_ORF1_effect eq 'S') {
									if($sister1_ORF2_prev_effect eq 'N') {
										$sister1_num_changes_SN_site1++;
										
										# ACTUAL DIFF
										if($nt eq $nt1_sister2_WT) {
											$SN_diffs++;
											$site_diffs_hh{$codon_num}->{1}->{SN_diffs}++;
										}
									} elsif($sister1_ORF2_prev_effect eq 'S') {
										$sister1_num_changes_SS_site1++;
										
										# ACTUAL DIFF
										if($nt eq $nt1_sister2_WT) {
											$SS_diffs++;
											$site_diffs_hh{$codon_num}->{1}->{SS_diffs}++;
										}
									}
								}
							}
						} # end sister 1 site 1
						
						
						
						
						
						# SITE 2
						# What is each change to ORF1 CODON SITE 2 / ORF2 CODON SITE 3?
						if($nt ne $nt2_sister1_WT) { # only one possibility for this site
							
							my $sister1_STOP_caused = 0;
							
							my $codon_sister1_ORF1_MUT = $codon_sister1_ORF1;
							$codon_sister1_ORF1_MUT =~ s/([ACGT])[ACGT]([ACGT])/$1$nt$2/;
							#print "codon_sister1_ORF1_MUT=$codon_sister1_ORF1_MUT\n";
							
							my $codon_sister1_ORF2_prev_MUT = $codon_sister1_ORF2_prev;
							$codon_sister1_ORF2_prev_MUT =~ s/[ACGT]([ACGT])([ACGT])/$nt_revcom$1$2/;
							#print "codon_sister1_ORF2_prev_MUT=$codon_sister1_ORF2_prev_MUT\n";
							
							my $sister1_ORF1_effect = 'S';
							
							#Sister1-ORF1
							my $AA_sister1_ORF1_MUT = &get_amino_acid($codon_sister1_ORF1_MUT);
							
							if($AA_sister1_ORF1_MUT ne $AA_sister1_ORF1) {
								$sister1_ORF1_effect = 'N';
							}
							
							if($AA_sister1_ORF1 eq '*' || $AA_sister1_ORF1_MUT eq '*') {
								$sister1_STOP_caused++;
							}
							
							
							my $sister1_ORF2_prev_effect = 'S';
							
							#Sister1-ORF2
							my $AA_sister1_ORF2_prev_MUT = &get_amino_acid($codon_sister1_ORF2_prev_MUT);
							
							if($AA_sister1_ORF2_prev_MUT ne $AA_sister1_ORF2_prev) {
								$sister1_ORF2_prev_effect = 'N';
							}
							
							if($AA_sister1_ORF2_prev eq '*' || $AA_sister1_ORF2_prev_MUT eq '*') {
								$sister1_STOP_caused++;
							}
							
							# TALLY VIABLE CHANGES, GET NUMBER OF DIFFS
				
							unless($sister1_STOP_caused > 0) {
								$sister1_num_changes_poss_site2++;
								
								if($sister1_ORF1_effect eq 'N') {
									if($sister1_ORF2_prev_effect eq 'N') {
										$sister1_num_changes_NN_site2++;
										
										# ACTUAL DIFF
										if($nt eq $nt2_sister2_WT) {
											$NN_diffs++;
											$site_diffs_hh{$codon_num}->{2}->{NN_diffs}++;
										}
										
									} elsif($sister1_ORF2_prev_effect eq 'S') {
										$sister1_num_changes_NS_site2++;
										
										# ACTUAL DIFF
										if($nt eq $nt2_sister2_WT) {
											$NS_diffs++;
											$site_diffs_hh{$codon_num}->{2}->{NS_diffs}++;
										}
									}
								} elsif($sister1_ORF1_effect eq 'S') {
									if($sister1_ORF2_prev_effect eq 'N') {
										$sister1_num_changes_SN_site2++;
										
										# ACTUAL DIFF
										if($nt eq $nt2_sister2_WT) {
											$SN_diffs++;
											$site_diffs_hh{$codon_num}->{2}->{SN_diffs}++;
										}
									} elsif($sister1_ORF2_prev_effect eq 'S') {
										$sister1_num_changes_SS_site2++;
										
										# ACTUAL DIFF
										if($nt eq $nt2_sister2_WT) {
											$SS_diffs++;
											$site_diffs_hh{$codon_num}->{2}->{SS_diffs}++;
										}
									}
								}
							}
						} # end sister 1 site 2
						
						
						
						##################################################################
						# SISTER2
						
						# SITE 1
						# What is each change to ORF1 CODON SITE 1 / ORF2 CODON SITE 2?
						if($nt ne $nt1_sister2_WT) { # only one possibility for this site
							 # only one possibility for this site
							
							my $sister2_STOP_caused = 0;
							
							my $codon_sister2_ORF1_MUT = $codon_sister2_ORF1;
							$codon_sister2_ORF1_MUT =~ s/[ACGT]([ACGT])([ACGT])/$nt$1$2/;
							#print "codon_sister2_ORF1_MUT=$codon_sister2_ORF1_MUT\n";
							
							my $codon_sister2_ORF2_prev_MUT = $codon_sister2_ORF2_prev;
							$codon_sister2_ORF2_prev_MUT =~ s/([ACGT])[ACGT]([ACGT])/$1$nt_revcom$2/;
							#print "codon_sister2_ORF2_prev_MUT=$codon_sister2_ORF2_prev_MUT\n";
							
							my $sister2_ORF1_effect = 'S';
							
							#Sister1-ORF1
							my $AA_sister2_ORF1_MUT = &get_amino_acid($codon_sister2_ORF1_MUT);
							
							if($AA_sister2_ORF1_MUT ne $AA_sister2_ORF1) {
								$sister2_ORF1_effect = 'N';
							}
							
							if($AA_sister2_ORF1 eq '*' || $AA_sister2_ORF1_MUT eq '*') {
								$sister2_STOP_caused++;
							}
							
							
							my $sister2_ORF2_prev_effect = 'S';
							
							#Sister1-ORF2
							my $AA_sister2_ORF2_prev_MUT = &get_amino_acid($codon_sister2_ORF2_prev_MUT);
							
							if($AA_sister2_ORF2_prev_MUT ne $AA_sister2_ORF2_prev) {
								$sister2_ORF2_prev_effect = 'N';
							}
							
							if($AA_sister2_ORF2_prev eq '*' || $AA_sister2_ORF2_prev_MUT eq '*') {
								$sister2_STOP_caused++;
							}
							
							# TALLY VIABLE CHANGES, GET NUMBER OF DIFFS
				
							unless($sister2_STOP_caused > 0) {
								$sister2_num_changes_poss_site1++;
								
								if($sister2_ORF1_effect eq 'N') {
									if($sister2_ORF2_prev_effect eq 'N') {
										$sister2_num_changes_NN_site1++;
										
									} elsif($sister2_ORF2_prev_effect eq 'S') {
										$sister2_num_changes_NS_site1++;
										
									}
								} elsif($sister2_ORF1_effect eq 'S') {
									if($sister2_ORF2_prev_effect eq 'N') {
										$sister2_num_changes_SN_site1++;
										
									} elsif($sister2_ORF2_prev_effect eq 'S') {
										$sister2_num_changes_SS_site1++;
										
									}
								}
							}
						} # end sister 2 site 1
						
						
						
						
						
						# SITE 2
						# What is each change to ORF1 CODON SITE 2 / ORF2 CODON SITE 3?
						if($nt ne $nt2_sister2_WT) { # only one possibility for this site
							
							my $sister2_STOP_caused = 0;
							
							my $codon_sister2_ORF1_MUT = $codon_sister2_ORF1;
							$codon_sister2_ORF1_MUT =~ s/([ACGT])[ACGT]([ACGT])/$1$nt$2/;
							#print "codon_sister2_ORF1_MUT=$codon_sister2_ORF1_MUT\n";
							
							my $codon_sister2_ORF2_prev_MUT = $codon_sister2_ORF2_prev;
							$codon_sister2_ORF2_prev_MUT =~ s/[ACGT]([ACGT])([ACGT])/$nt_revcom$1$2/;
							#print "codon_sister2_ORF2_prev_MUT=$codon_sister2_ORF2_prev_MUT\n";
							
							my $sister2_ORF1_effect = 'S';
							
							#Sister1-ORF1
							my $AA_sister2_ORF1_MUT = &get_amino_acid($codon_sister2_ORF1_MUT);
							
							if($AA_sister2_ORF1_MUT ne $AA_sister2_ORF1) {
								$sister2_ORF1_effect = 'N';
							}
							
							if($AA_sister2_ORF1 eq '*' || $AA_sister2_ORF1_MUT eq '*') {
								$sister2_STOP_caused++;
							}
							
							
							my $sister2_ORF2_prev_effect = 'S';
							
							#Sister1-ORF2
							my $AA_sister2_ORF2_prev_MUT = &get_amino_acid($codon_sister2_ORF2_prev_MUT);
							
							if($AA_sister2_ORF2_prev_MUT ne $AA_sister2_ORF2_prev) {
								$sister2_ORF2_prev_effect = 'N';
							}
							
							if($AA_sister2_ORF2_prev eq '*' || $AA_sister2_ORF2_prev_MUT eq '*') {
								$sister2_STOP_caused++;
							}
							
							# TALLY VIABLE CHANGES, GET NUMBER OF DIFFS
				
							unless($sister2_STOP_caused > 0) {
								$sister2_num_changes_poss_site2++;
								
								if($sister2_ORF1_effect eq 'N') {
									if($sister2_ORF2_prev_effect eq 'N') {
										$sister2_num_changes_NN_site2++;
										
										
									} elsif($sister2_ORF2_prev_effect eq 'S') {
										$sister2_num_changes_NS_site2++;
										
									}
								} elsif($sister2_ORF1_effect eq 'S') {
									if($sister2_ORF2_prev_effect eq 'N') {
										$sister2_num_changes_SN_site2++;
										
									} elsif($sister2_ORF2_prev_effect eq 'S') {
										$sister2_num_changes_SS_site2++;
										
									}
								}
							}
						} # end sister 2 site 2
					} # end cycling all 4 nucleotides
					
					# TALLY SITE 1
					my $NN_sites_sister1_site1 = 'NA';
					my $SN_sites_sister1_site1 = 'NA';
					my $NS_sites_sister1_site1 = 'NA';
					my $SS_sites_sister1_site1 = 'NA';
					if($sister1_num_changes_poss_site1 > 0) {
#						print "sister1_num_changes_poss_site1=$sister1_num_changes_poss_site1\n";
						$NN_sites_sister1_site1 = $sister1_num_changes_NN_site1 / $sister1_num_changes_poss_site1;
						$SN_sites_sister1_site1 = $sister1_num_changes_SN_site1 / $sister1_num_changes_poss_site1;
						$NS_sites_sister1_site1 = $sister1_num_changes_NS_site1 / $sister1_num_changes_poss_site1;
						$SS_sites_sister1_site1 = $sister1_num_changes_SS_site1 / $sister1_num_changes_poss_site1;
						
						unless(exists $seq_completed{$sister1}) {
							$seq2sites{$sister1}->{NN_sites} += $NN_sites_sister1_site1;
							$seq2sites{$sister1}->{SN_sites} += $SN_sites_sister1_site1;
							$seq2sites{$sister1}->{NS_sites} += $NS_sites_sister1_site1;
							$seq2sites{$sister1}->{SS_sites} += $SS_sites_sister1_site1;
						}
					}
					
					my $NN_sites_sister2_site1 = 'NA';
					my $SN_sites_sister2_site1 = 'NA';
					my $NS_sites_sister2_site1 = 'NA';
					my $SS_sites_sister2_site1 = 'NA';
					if($sister2_num_changes_poss_site1 > 0) {
						$NN_sites_sister2_site1 = $sister2_num_changes_NN_site1 / $sister2_num_changes_poss_site1;
						$SN_sites_sister2_site1 = $sister2_num_changes_SN_site1 / $sister2_num_changes_poss_site1;
						$NS_sites_sister2_site1 = $sister2_num_changes_NS_site1 / $sister2_num_changes_poss_site1;
						$SS_sites_sister2_site1 = $sister2_num_changes_SS_site1 / $sister2_num_changes_poss_site1;
						
						unless(exists $seq_completed{$sister2}) {
							$seq2sites{$sister2}->{NN_sites} += $NN_sites_sister2_site1;
							$seq2sites{$sister2}->{SN_sites} += $SN_sites_sister2_site1;
							$seq2sites{$sister2}->{NS_sites} += $NS_sites_sister2_site1;
							$seq2sites{$sister2}->{SS_sites} += $SS_sites_sister2_site1;
						}
					}
					
					my $NN_sites_site1 = 'NA';
					my $SN_sites_site1 = 'NA';
					my $NS_sites_site1 = 'NA';
					my $SS_sites_site1 = 'NA';
					if($sister1_num_changes_poss_site1 > 0 && $sister2_num_changes_poss_site1 > 0) {
						$NN_sites_site1 = ($NN_sites_sister1_site1 + $NN_sites_sister2_site1) / 2;
						$SN_sites_site1 = ($SN_sites_sister1_site1 + $SN_sites_sister2_site1) / 2;
						$NS_sites_site1 = ($NS_sites_sister1_site1 + $NS_sites_sister2_site1) / 2;
						$SS_sites_site1 = ($SS_sites_sister1_site1 + $SS_sites_sister2_site1) / 2;
					} elsif($sister1_num_changes_poss_site1 > 0) {
						$NN_sites_site1 = $NN_sites_sister1_site1;
						$SN_sites_site1 = $SN_sites_sister1_site1;
						$NS_sites_site1 = $NS_sites_sister1_site1;
						$SS_sites_site1 = $SS_sites_sister1_site1;
					} elsif($sister2_num_changes_poss_site1 > 0) {
						$NN_sites_site1 = $NN_sites_sister2_site1;
						$SN_sites_site1 = $SN_sites_sister2_site1;
						$NS_sites_site1 = $NS_sites_sister2_site1;
						$SS_sites_site1 = $SS_sites_sister2_site1;
						
					} # else nothing defined, stay NA
					
					# TALLY SITE 2
					my $NN_sites_sister1_site2 = 'NA';
					my $SN_sites_sister1_site2 = 'NA';
					my $NS_sites_sister1_site2 = 'NA';
					my $SS_sites_sister1_site2 = 'NA';
					if($sister1_num_changes_poss_site2 > 0) {
#						print "sister1_num_changes_poss_site2=$sister1_num_changes_poss_site2\n";
						$NN_sites_sister1_site2 = $sister1_num_changes_NN_site2 / $sister1_num_changes_poss_site2;
						$SN_sites_sister1_site2 = $sister1_num_changes_SN_site2 / $sister1_num_changes_poss_site2;
						$NS_sites_sister1_site2 = $sister1_num_changes_NS_site2 / $sister1_num_changes_poss_site2;
						$SS_sites_sister1_site2 = $sister1_num_changes_SS_site2 / $sister1_num_changes_poss_site2;
						
						unless(exists $seq_completed{$sister1}) {
							$seq2sites{$sister1}->{NN_sites} += $NN_sites_sister1_site2;
							$seq2sites{$sister1}->{SN_sites} += $SN_sites_sister1_site2;
							$seq2sites{$sister1}->{NS_sites} += $NS_sites_sister1_site2;
							$seq2sites{$sister1}->{SS_sites} += $SS_sites_sister1_site2;
						}
					}
					
					my $NN_sites_sister2_site2 = 'NA';
					my $SN_sites_sister2_site2 = 'NA';
					my $NS_sites_sister2_site2 = 'NA';
					my $SS_sites_sister2_site2 = 'NA';
					if($sister2_num_changes_poss_site2 > 0) {
						$NN_sites_sister2_site2 = $sister2_num_changes_NN_site2 / $sister2_num_changes_poss_site2;
						$SN_sites_sister2_site2 = $sister2_num_changes_SN_site2 / $sister2_num_changes_poss_site2;
						$NS_sites_sister2_site2 = $sister2_num_changes_NS_site2 / $sister2_num_changes_poss_site2;
						$SS_sites_sister2_site2 = $sister2_num_changes_SS_site2 / $sister2_num_changes_poss_site2;
						
						unless(exists $seq_completed{$sister2}) {
							$seq2sites{$sister2}->{NN_sites} += $NN_sites_sister2_site2;
							$seq2sites{$sister2}->{SN_sites} += $SN_sites_sister2_site2;
							$seq2sites{$sister2}->{NS_sites} += $NS_sites_sister2_site2;
							$seq2sites{$sister2}->{SS_sites} += $SS_sites_sister2_site2;
						}
					}
					
					my $NN_sites_site2 = 'NA';
					my $SN_sites_site2 = 'NA';
					my $NS_sites_site2 = 'NA';
					my $SS_sites_site2 = 'NA';
					if($sister1_num_changes_poss_site2 > 0 && $sister2_num_changes_poss_site2 > 0) {
						$NN_sites_site2 = ($NN_sites_sister1_site2 + $NN_sites_sister2_site2) / 2;
						$SN_sites_site2 = ($SN_sites_sister1_site2 + $SN_sites_sister2_site2) / 2;
						$NS_sites_site2 = ($NS_sites_sister1_site2 + $NS_sites_sister2_site2) / 2;
						$SS_sites_site2 = ($SS_sites_sister1_site2 + $SS_sites_sister2_site2) / 2;
					} elsif($sister1_num_changes_poss_site2 > 0) {
						$NN_sites_site2 = $NN_sites_sister1_site2;
						$SN_sites_site2 = $SN_sites_sister1_site2;
						$NS_sites_site2 = $NS_sites_sister1_site2;
						$SS_sites_site2 = $SS_sites_sister1_site2;
					} elsif($sister2_num_changes_poss_site2 > 0) {
						$NN_sites_site2 = $NN_sites_sister2_site2;
						$SN_sites_site2 = $SN_sites_sister2_site2;
						$NS_sites_site2 = $NS_sites_sister2_site2;
						$SS_sites_site2 = $SS_sites_sister2_site2;
						
					} # else nothing defined, stay NA
					
					# SUM THE TWO SITES
					my $NN_sites = $NN_sites_site1 + $NN_sites_site2;
					my $SN_sites = $SN_sites_site1 + $SN_sites_site2;
					my $NS_sites = $NS_sites_site1 + $NS_sites_site2;
					my $SS_sites = $SS_sites_site1 + $SS_sites_site2;
					
					# Check if there are multiple variants in these overlapping codons
					my $MNV = 'FALSE';
					if(($NN_diffs + $SN_diffs + $NS_diffs + $SS_diffs) > 1) {
						$MNV = 'TRUE';
					}
					
					print CODON_FILE "$fasta_file_short\t$tree_file_short\t$pair_num\t$sister1\t$sister2\t" .
						"$pair_bootstrap\t$codon_num\t" .
						"$codon_sister1_ORF1\t$codon_sister2_ORF1\t" .
						"$codon_sister1_ORF2_prev\t" . 
						"$codon_sister2_ORF2_prev\t" .
						"$MNV\t" .
						"$NN_sites\t$SN_sites\t$NS_sites\t$SS_sites\t$NN_diffs\t$SN_diffs\t$NS_diffs\t$SS_diffs\n"; # either codon might contain N or -
					
					unless($MNV eq 'TRUE') { # exclude data from overlapping codons with multiple variants
						# Store sites
						$sister_data_hh{$pair_num}->{NN_sites} += $NN_sites;
						$sister_data_hh{$pair_num}->{SN_sites} += $SN_sites;
						$sister_data_hh{$pair_num}->{NS_sites} += $NS_sites;
						$sister_data_hh{$pair_num}->{SS_sites} += $SS_sites;
						
						# Store diffs
						$sister_data_hh{$pair_num}->{NN_diffs} += $NN_diffs;
						$sister_data_hh{$pair_num}->{SN_diffs} += $SN_diffs;
						$sister_data_hh{$pair_num}->{NS_diffs} += $NS_diffs;
						$sister_data_hh{$pair_num}->{SS_diffs} += $SS_diffs;
					} else {
						$site_diffs_hh{$codon_num}->{1}->{NN_diffs} = 0;
						$site_diffs_hh{$codon_num}->{1}->{SN_diffs} = 0;
						$site_diffs_hh{$codon_num}->{1}->{NS_diffs} = 0;
						$site_diffs_hh{$codon_num}->{1}->{SS_diffs} = 0;
						
						$site_diffs_hh{$codon_num}->{2}->{NN_diffs} = 0;
						$site_diffs_hh{$codon_num}->{2}->{SN_diffs} = 0;
						$site_diffs_hh{$codon_num}->{2}->{NS_diffs} = 0;
						$site_diffs_hh{$codon_num}->{2}->{SS_diffs} = 0;
					}
					
				} else { # end LAST codon
					# both ORF2's PREV and NEXT codons fully defined, 3 sites to examine
					
					my $sister1_num_changes_poss_site1 = 0;
					my $sister1_num_changes_NN_site1 = 0;
					my $sister1_num_changes_SN_site1 = 0;
					my $sister1_num_changes_NS_site1 = 0;
					my $sister1_num_changes_SS_site1 = 0;
					
					my $sister1_num_changes_poss_site2 = 0;
					my $sister1_num_changes_NN_site2 = 0;
					my $sister1_num_changes_SN_site2 = 0;
					my $sister1_num_changes_NS_site2 = 0;
					my $sister1_num_changes_SS_site2 = 0;
					
					my $sister1_num_changes_poss_site3 = 0;
					my $sister1_num_changes_NN_site3 = 0;
					my $sister1_num_changes_SN_site3 = 0;
					my $sister1_num_changes_NS_site3 = 0;
					my $sister1_num_changes_SS_site3 = 0;
					
					my $sister2_num_changes_poss_site1 = 0;
					my $sister2_num_changes_NN_site1 = 0;
					my $sister2_num_changes_SN_site1 = 0;
					my $sister2_num_changes_NS_site1 = 0;
					my $sister2_num_changes_SS_site1 = 0;
					
					my $sister2_num_changes_poss_site2 = 0;
					my $sister2_num_changes_NN_site2 = 0;
					my $sister2_num_changes_SN_site2 = 0;
					my $sister2_num_changes_NS_site2 = 0;
					my $sister2_num_changes_SS_site2 = 0;
					
					my $sister2_num_changes_poss_site3 = 0;
					my $sister2_num_changes_NN_site3 = 0;
					my $sister2_num_changes_SN_site3 = 0;
					my $sister2_num_changes_NS_site3 = 0;
					my $sister2_num_changes_SS_site3 = 0;
					
					my $NN_diffs = 0;
					my $SN_diffs = 0;
					my $NS_diffs = 0;
					my $SS_diffs = 0;
					
					# Just ORF1 (reference)
					my $nt1_sister1_WT = substr($codon_sister1_ORF1, 0, 1);
					my $nt2_sister1_WT = substr($codon_sister1_ORF1, 1, 1);
					my $nt3_sister1_WT = substr($codon_sister1_ORF1, 2, 1);
#					print "codon_sister1_ORF1=$codon_sister1_ORF1\n";
					my $nt1_sister2_WT = substr($codon_sister2_ORF1, 0, 1);
					my $nt2_sister2_WT = substr($codon_sister2_ORF1, 1, 1);
					my $nt3_sister2_WT = substr($codon_sister2_ORF1, 2, 1);
#					print "codon_sister1_ORF1=$codon_sister2_ORF1\n";
					
					foreach my $nt (@nucleotides) {
						my $nt_revcom = &revcom($nt);
						
						##################################################################
						# SISTER1
						
						# SITE 1
						# What is each change to ORF1 CODON SITE 1 / ORF2 CODON SITE 2?
						if($nt ne $nt1_sister1_WT) { # only one possibility for this site
							 # only one possibility for this site
							
							my $sister1_STOP_caused = 0;
							
							my $codon_sister1_ORF1_MUT = $codon_sister1_ORF1;
							$codon_sister1_ORF1_MUT =~ s/[ACGT]([ACGT])([ACGT])/$nt$1$2/;
#							print "codon_sister1_ORF1_MUT=$codon_sister1_ORF1_MUT\n";
							
							my $codon_sister1_ORF2_prev_MUT = $codon_sister1_ORF2_prev;
							$codon_sister1_ORF2_prev_MUT =~ s/([ACGT])[ACGT]([ACGT])/$1$nt_revcom$2/;
#							print "codon_sister1_ORF2_prev_MUT=$codon_sister1_ORF2_prev_MUT\n";
							
							my $sister1_ORF1_effect = 'S';
							
							#Sister1-ORF1
							my $AA_sister1_ORF1_MUT = &get_amino_acid($codon_sister1_ORF1_MUT);
#							print "AA_sister1_ORF1_MUT=$AA_sister1_ORF1_MUT\n";
							
							if($AA_sister1_ORF1_MUT ne $AA_sister1_ORF1) {
								$sister1_ORF1_effect = 'N';
							}
							
							if($AA_sister1_ORF1 eq '*' || $AA_sister1_ORF1_MUT eq '*') {
								$sister1_STOP_caused++;
							}
							
							
							my $sister1_ORF2_prev_effect = 'S';
							
							#Sister1-ORF2
							my $AA_sister1_ORF2_prev_MUT = &get_amino_acid($codon_sister1_ORF2_prev_MUT);
#							print "AA_sister1_ORF2_prev_MUT=$AA_sister1_ORF2_prev_MUT\n";
							
							if($AA_sister1_ORF2_prev_MUT ne $AA_sister1_ORF2_prev) {
								$sister1_ORF2_prev_effect = 'N';
							}
							
							if($AA_sister1_ORF2_prev eq '*' || $AA_sister1_ORF2_prev_MUT eq '*') {
								$sister1_STOP_caused++;
							}
							
							# TALLY VIABLE CHANGES, GET NUMBER OF DIFFS
				
							unless($sister1_STOP_caused > 0) {
								$sister1_num_changes_poss_site1++;
								
								if($sister1_ORF1_effect eq 'N') {
									if($sister1_ORF2_prev_effect eq 'N') {
										$sister1_num_changes_NN_site1++;
										
										# ACTUAL DIFF
										if($nt eq $nt1_sister2_WT) {
											$NN_diffs++;
											$site_diffs_hh{$codon_num}->{1}->{NN_diffs}++;
										}
										
									} elsif($sister1_ORF2_prev_effect eq 'S') {
										$sister1_num_changes_NS_site1++;
										
										# ACTUAL DIFF
										if($nt eq $nt1_sister2_WT) {
											$NS_diffs++;
											$site_diffs_hh{$codon_num}->{1}->{NS_diffs}++;
										}
									}
								} elsif($sister1_ORF1_effect eq 'S') {
									if($sister1_ORF2_prev_effect eq 'N') {
										$sister1_num_changes_SN_site1++;
										
										# ACTUAL DIFF
										if($nt eq $nt1_sister2_WT) {
											$SN_diffs++;
											$site_diffs_hh{$codon_num}->{1}->{SN_diffs}++;
										}
									} elsif($sister1_ORF2_prev_effect eq 'S') {
										$sister1_num_changes_SS_site1++;
										
										# ACTUAL DIFF
										if($nt eq $nt1_sister2_WT) {
											$SS_diffs++;
											$site_diffs_hh{$codon_num}->{1}->{SS_diffs}++;
										}
									}
								}
							}
						} # end sister 1 site 1
						
						
						# SITE 2
						# What is each change to ORF1 CODON SITE 2 / ORF2 CODON SITE 3?
						if($nt ne $nt2_sister1_WT) { # only one possibility for this site
							
							my $sister1_STOP_caused = 0;
							
							my $codon_sister1_ORF1_MUT = $codon_sister1_ORF1;
							$codon_sister1_ORF1_MUT =~ s/([ACGT])[ACGT]([ACGT])/$1$nt$2/;
							#print "codon_sister1_ORF1_MUT=$codon_sister1_ORF1_MUT\n";
							
							my $codon_sister1_ORF2_prev_MUT = $codon_sister1_ORF2_prev;
							$codon_sister1_ORF2_prev_MUT =~ s/[ACGT]([ACGT])([ACGT])/$nt_revcom$1$2/;
							#print "codon_sister1_ORF2_prev_MUT=$codon_sister1_ORF2_prev_MUT\n";
							
							my $sister1_ORF1_effect = 'S';
							
							#Sister1-ORF1
							my $AA_sister1_ORF1_MUT = &get_amino_acid($codon_sister1_ORF1_MUT);
							
							if($AA_sister1_ORF1_MUT ne $AA_sister1_ORF1) {
								$sister1_ORF1_effect = 'N';
							}
							
							if($AA_sister1_ORF1 eq '*' || $AA_sister1_ORF1_MUT eq '*') {
								$sister1_STOP_caused++;
							}
							
							
							my $sister1_ORF2_prev_effect = 'S';
							
							#Sister1-ORF2
							my $AA_sister1_ORF2_prev_MUT = &get_amino_acid($codon_sister1_ORF2_prev_MUT);
							
							if($AA_sister1_ORF2_prev_MUT ne $AA_sister1_ORF2_prev) {
								$sister1_ORF2_prev_effect = 'N';
							}
							
							if($AA_sister1_ORF2_prev eq '*' || $AA_sister1_ORF2_prev_MUT eq '*') {
								$sister1_STOP_caused++;
							}
							
							# TALLY VIABLE CHANGES, GET NUMBER OF DIFFS
				
							unless($sister1_STOP_caused > 0) {
								$sister1_num_changes_poss_site2++;
								
								if($sister1_ORF1_effect eq 'N') {
									if($sister1_ORF2_prev_effect eq 'N') {
										$sister1_num_changes_NN_site2++;
										
										# ACTUAL DIFF
										if($nt eq $nt2_sister2_WT) {
											$NN_diffs++;
											$site_diffs_hh{$codon_num}->{2}->{NN_diffs}++;
										}
										
									} elsif($sister1_ORF2_prev_effect eq 'S') {
										$sister1_num_changes_NS_site2++;
										
										# ACTUAL DIFF
										if($nt eq $nt2_sister2_WT) {
											$NS_diffs++;
											$site_diffs_hh{$codon_num}->{2}->{NS_diffs}++;
										}
									}
								} elsif($sister1_ORF1_effect eq 'S') {
									if($sister1_ORF2_prev_effect eq 'N') {
										$sister1_num_changes_SN_site2++;
										
										# ACTUAL DIFF
										if($nt eq $nt2_sister2_WT) {
											$SN_diffs++;
											$site_diffs_hh{$codon_num}->{2}->{SN_diffs}++;
										}
									} elsif($sister1_ORF2_prev_effect eq 'S') {
										$sister1_num_changes_SS_site2++;
										
										# ACTUAL DIFF
										if($nt eq $nt2_sister2_WT) {
											$SS_diffs++;
											$site_diffs_hh{$codon_num}->{2}->{SS_diffs}++;
										}
									}
								}
							}
						} # end sister 1 site 2
						
						
						# SITE 3
						# What is each change to ORF1 CODON SITE 3 / ORF2 (next) CODON SITE 1?
						if($nt ne $nt3_sister1_WT) { # only one possibility for this site
							
							my $sister1_STOP_caused = 0;
							
							my $codon_sister1_ORF1_MUT = $codon_sister1_ORF1;
							$codon_sister1_ORF1_MUT =~ s/([ACGT])([ACGT])[ACGT]/$1$2$nt/;
							#print "codon_sister1_ORF1_MUT=$codon_sister1_ORF1_MUT\n";
							
							my $codon_sister1_ORF2_next_MUT = $codon_sister1_ORF2_next;
							$codon_sister1_ORF2_next_MUT =~ s/([ACGT])([ACGT])[ACGT]/$1$2$nt_revcom/;
							#print "codon_sister1_ORF2_next_MUT=$codon_sister1_ORF2_next_MUT\n";
							
							my $sister1_ORF1_effect = 'S';
							
							#Sister1-ORF1
							my $AA_sister1_ORF1_MUT = &get_amino_acid($codon_sister1_ORF1_MUT);
							
							if($AA_sister1_ORF1_MUT ne $AA_sister1_ORF1) {
								$sister1_ORF1_effect = 'N';
							}
							
							if($AA_sister1_ORF1 eq '*' || $AA_sister1_ORF1_MUT eq '*') {
								$sister1_STOP_caused++;
							}
							
							
							my $sister1_ORF2_next_effect = 'S';
							
							#Sister1-ORF2
							my $AA_sister1_ORF2_next_MUT = &get_amino_acid($codon_sister1_ORF2_next_MUT);
							
							if($AA_sister1_ORF2_next_MUT ne $AA_sister1_ORF2_next) {
								$sister1_ORF2_next_effect = 'N';
							}
							
							if($AA_sister1_ORF2_next eq '*' || $AA_sister1_ORF2_next_MUT eq '*') {
								$sister1_STOP_caused++;
							}
							
							# TALLY VIABLE CHANGES, GET NUMBER OF DIFFS
				
							unless($sister1_STOP_caused > 0) {
								$sister1_num_changes_poss_site3++;
								
								if($sister1_ORF1_effect eq 'N') {
									if($sister1_ORF2_next_effect eq 'N') {
										$sister1_num_changes_NN_site3++;
										
										# ACTUAL DIFF
										if($nt eq $nt3_sister2_WT) {
											$NN_diffs++;
											$site_diffs_hh{$codon_num}->{3}->{NN_diffs}++;
										}
										
									} elsif($sister1_ORF2_next_effect eq 'S') {
										$sister1_num_changes_NS_site3++;
										
										# ACTUAL DIFF
										if($nt eq $nt3_sister2_WT) {
											$NS_diffs++;
											$site_diffs_hh{$codon_num}->{3}->{NS_diffs}++;
										}
									}
								} elsif($sister1_ORF1_effect eq 'S') {
									if($sister1_ORF2_next_effect eq 'N') {
										$sister1_num_changes_SN_site3++;
										
										# ACTUAL DIFF
										if($nt eq $nt3_sister2_WT) {
											$SN_diffs++;
											$site_diffs_hh{$codon_num}->{3}->{SN_diffs}++;
										}
									} elsif($sister1_ORF2_next_effect eq 'S') {
										$sister1_num_changes_SS_site3++;
										
										# ACTUAL DIFF
										if($nt eq $nt3_sister2_WT) {
											$SS_diffs++;
											$site_diffs_hh{$codon_num}->{3}->{SS_diffs}++;
										}
									}
								}
							}
						} # end sister 1 site 3
						
						
						
						##################################################################
						# SISTER2
						
						# SITE 1
						# What is each change to ORF1 CODON SITE 1 / ORF2 CODON SITE 2?
						if($nt ne $nt1_sister2_WT) { # only one possibility for this site
							 # only one possibility for this site
							
							my $sister2_STOP_caused = 0;
							
							my $codon_sister2_ORF1_MUT = $codon_sister2_ORF1;
							$codon_sister2_ORF1_MUT =~ s/[ACGT]([ACGT])([ACGT])/$nt$1$2/;
							#print "codon_sister2_ORF1_MUT=$codon_sister2_ORF1_MUT\n";
							
							my $codon_sister2_ORF2_prev_MUT = $codon_sister2_ORF2_prev;
							$codon_sister2_ORF2_prev_MUT =~ s/([ACGT])[ACGT]([ACGT])/$1$nt_revcom$2/;
							#print "codon_sister2_ORF2_prev_MUT=$codon_sister2_ORF2_prev_MUT\n";
							
							my $sister2_ORF1_effect = 'S';
							
							#Sister1-ORF1
							my $AA_sister2_ORF1_MUT = &get_amino_acid($codon_sister2_ORF1_MUT);
							
							if($AA_sister2_ORF1_MUT ne $AA_sister2_ORF1) {
								$sister2_ORF1_effect = 'N';
							}
							
							if($AA_sister2_ORF1 eq '*' || $AA_sister2_ORF1_MUT eq '*') {
								$sister2_STOP_caused++;
							}
							
							
							my $sister2_ORF2_prev_effect = 'S';
							
							#Sister1-ORF2
							my $AA_sister2_ORF2_prev_MUT = &get_amino_acid($codon_sister2_ORF2_prev_MUT);
							
							if($AA_sister2_ORF2_prev_MUT ne $AA_sister2_ORF2_prev) {
								$sister2_ORF2_prev_effect = 'N';
							}
							
							if($AA_sister2_ORF2_prev eq '*' || $AA_sister2_ORF2_prev_MUT eq '*') {
								$sister2_STOP_caused++;
							}
							
							# TALLY VIABLE CHANGES, GET NUMBER OF DIFFS
				
							unless($sister2_STOP_caused > 0) {
								$sister2_num_changes_poss_site1++;
								
								if($sister2_ORF1_effect eq 'N') {
									if($sister2_ORF2_prev_effect eq 'N') {
										$sister2_num_changes_NN_site1++;
										
										
									} elsif($sister2_ORF2_prev_effect eq 'S') {
										$sister2_num_changes_NS_site1++;
										
									}
								} elsif($sister2_ORF1_effect eq 'S') {
									if($sister2_ORF2_prev_effect eq 'N') {
										$sister2_num_changes_SN_site1++;
										
									} elsif($sister2_ORF2_prev_effect eq 'S') {
										$sister2_num_changes_SS_site1++;
										
									}
								}
							}
						} # end sister 2 site 1
						
						
						
						
						
						# SITE 2
						# What is each change to ORF1 CODON SITE 2 / ORF2 CODON SITE 3?
						if($nt ne $nt2_sister2_WT) { # only one possibility for this site
							
							my $sister2_STOP_caused = 0;
							
							my $codon_sister2_ORF1_MUT = $codon_sister2_ORF1;
							$codon_sister2_ORF1_MUT =~ s/([ACGT])[ACGT]([ACGT])/$1$nt$2/;
							#print "codon_sister2_ORF1_MUT=$codon_sister2_ORF1_MUT\n";
							
							my $codon_sister2_ORF2_prev_MUT = $codon_sister2_ORF2_prev;
							$codon_sister2_ORF2_prev_MUT =~ s/[ACGT]([ACGT])([ACGT])/$nt_revcom$1$2/;
							#print "codon_sister2_ORF2_prev_MUT=$codon_sister2_ORF2_prev_MUT\n";
							
							my $sister2_ORF1_effect = 'S';
							
							#Sister1-ORF1
							my $AA_sister2_ORF1_MUT = &get_amino_acid($codon_sister2_ORF1_MUT);
							
							if($AA_sister2_ORF1_MUT ne $AA_sister2_ORF1) {
								$sister2_ORF1_effect = 'N';
							}
							
							if($AA_sister2_ORF1 eq '*' || $AA_sister2_ORF1_MUT eq '*') {
								$sister2_STOP_caused++;
							}
							
							
							my $sister2_ORF2_prev_effect = 'S';
							
							#Sister1-ORF2
							my $AA_sister2_ORF2_prev_MUT = &get_amino_acid($codon_sister2_ORF2_prev_MUT);
							
							if($AA_sister2_ORF2_prev_MUT ne $AA_sister2_ORF2_prev) {
								$sister2_ORF2_prev_effect = 'N';
							}
							
							if($AA_sister2_ORF2_prev eq '*' || $AA_sister2_ORF2_prev_MUT eq '*') {
								$sister2_STOP_caused++;
							}
							
							# TALLY VIABLE CHANGES, GET NUMBER OF DIFFS
				
							unless($sister2_STOP_caused > 0) {
								$sister2_num_changes_poss_site2++;
								
								if($sister2_ORF1_effect eq 'N') {
									if($sister2_ORF2_prev_effect eq 'N') {
										$sister2_num_changes_NN_site2++;
										
									} elsif($sister2_ORF2_prev_effect eq 'S') {
										$sister2_num_changes_NS_site2++;
										
									}
								} elsif($sister2_ORF1_effect eq 'S') {
									if($sister2_ORF2_prev_effect eq 'N') {
										$sister2_num_changes_SN_site2++;
										
									} elsif($sister2_ORF2_prev_effect eq 'S') {
										$sister2_num_changes_SS_site2++;
										
									}
								}
							}
						} # end sister 2 site 2
						
						
						# SITE 3
						# What is each change to ORF1 CODON SITE 3 / ORF2 (next) CODON SITE 1?
						if($nt ne $nt3_sister2_WT) { # only one possibility for this site
							
							my $sister2_STOP_caused = 0;
							
							my $codon_sister2_ORF1_MUT = $codon_sister2_ORF1;
							$codon_sister2_ORF1_MUT =~ s/([ACGT])([ACGT])[ACGT]/$1$2$nt/;
							#print "codon_sister2_ORF1_MUT=$codon_sister2_ORF1_MUT\n";
							
							my $codon_sister2_ORF2_next_MUT = $codon_sister2_ORF2_next;
							$codon_sister2_ORF2_next_MUT =~ s/([ACGT])([ACGT])[ACGT]/$1$2$nt_revcom/;
							#print "codon_sister2_ORF2_next_MUT=$codon_sister2_ORF2_next_MUT\n";
							
							my $sister2_ORF1_effect = 'S';
							
							#sister2-ORF1
							my $AA_sister2_ORF1_MUT = &get_amino_acid($codon_sister2_ORF1_MUT);
							
							if($AA_sister2_ORF1_MUT ne $AA_sister2_ORF1) {
								$sister2_ORF1_effect = 'N';
							}
							
							if($AA_sister2_ORF1 eq '*' || $AA_sister2_ORF1_MUT eq '*') {
								$sister2_STOP_caused++;
							}
							
							
							my $sister2_ORF2_next_effect = 'S';
							
							#sister2-ORF2
							my $AA_sister2_ORF2_next_MUT = &get_amino_acid($codon_sister2_ORF2_next_MUT);
							
							if($AA_sister2_ORF2_next_MUT ne $AA_sister2_ORF2_next) {
								$sister2_ORF2_next_effect = 'N';
							}
							
							if($AA_sister2_ORF2_next eq '*' || $AA_sister2_ORF2_next_MUT eq '*') {
								$sister2_STOP_caused++;
							}
							
							# TALLY VIABLE CHANGES, GET NUMBER OF DIFFS
				
							unless($sister2_STOP_caused > 0) {
								$sister2_num_changes_poss_site3++;
								
								if($sister2_ORF1_effect eq 'N') {
									if($sister2_ORF2_next_effect eq 'N') {
										$sister2_num_changes_NN_site3++;
										
									} elsif($sister2_ORF2_next_effect eq 'S') {
										$sister2_num_changes_NS_site3++;
										
									}
								} elsif($sister2_ORF1_effect eq 'S') {
									if($sister2_ORF2_next_effect eq 'N') {
										$sister2_num_changes_SN_site3++;
										
									} elsif($sister2_ORF2_next_effect eq 'S') {
										$sister2_num_changes_SS_site3++;
										
									}
								}
							}
						} # end sister 2 site 3
					} # end cycling all 4 nucleotides
					
					# TALLY SITE 1
					my $NN_sites_sister1_site1 = 'NA';
					my $SN_sites_sister1_site1 = 'NA';
					my $NS_sites_sister1_site1 = 'NA';
					my $SS_sites_sister1_site1 = 'NA';
					if($sister1_num_changes_poss_site1 > 0) {
#						print "sister1_num_changes_poss_site1=$sister1_num_changes_poss_site1\n";
						$NN_sites_sister1_site1 = $sister1_num_changes_NN_site1 / $sister1_num_changes_poss_site1;
						$SN_sites_sister1_site1 = $sister1_num_changes_SN_site1 / $sister1_num_changes_poss_site1;
						$NS_sites_sister1_site1 = $sister1_num_changes_NS_site1 / $sister1_num_changes_poss_site1;
						$SS_sites_sister1_site1 = $sister1_num_changes_SS_site1 / $sister1_num_changes_poss_site1;
						
						unless(exists $seq_completed{$sister1}) {
							$seq2sites{$sister1}->{NN_sites} += $NN_sites_sister1_site1;
							$seq2sites{$sister1}->{SN_sites} += $SN_sites_sister1_site1;
							$seq2sites{$sister1}->{NS_sites} += $NS_sites_sister1_site1;
							$seq2sites{$sister1}->{SS_sites} += $SS_sites_sister1_site1;
						}
					}
					
					my $NN_sites_sister2_site1 = 'NA';
					my $SN_sites_sister2_site1 = 'NA';
					my $NS_sites_sister2_site1 = 'NA';
					my $SS_sites_sister2_site1 = 'NA';
					if($sister2_num_changes_poss_site1 > 0) {
						$NN_sites_sister2_site1 = $sister2_num_changes_NN_site1 / $sister2_num_changes_poss_site1;
						$SN_sites_sister2_site1 = $sister2_num_changes_SN_site1 / $sister2_num_changes_poss_site1;
						$NS_sites_sister2_site1 = $sister2_num_changes_NS_site1 / $sister2_num_changes_poss_site1;
						$SS_sites_sister2_site1 = $sister2_num_changes_SS_site1 / $sister2_num_changes_poss_site1;
						
						unless(exists $seq_completed{$sister2}) {
							$seq2sites{$sister2}->{NN_sites} += $NN_sites_sister2_site1;
							$seq2sites{$sister2}->{SN_sites} += $SN_sites_sister2_site1;
							$seq2sites{$sister2}->{NS_sites} += $NS_sites_sister2_site1;
							$seq2sites{$sister2}->{SS_sites} += $SS_sites_sister2_site1;
						}
					}
					
					my $NN_sites_site1 = 'NA';
					my $SN_sites_site1 = 'NA';
					my $NS_sites_site1 = 'NA';
					my $SS_sites_site1 = 'NA';
					if($sister1_num_changes_poss_site1 > 0 && $sister2_num_changes_poss_site1 > 0) {
						$NN_sites_site1 = ($NN_sites_sister1_site1 + $NN_sites_sister2_site1) / 2;
						$SN_sites_site1 = ($SN_sites_sister1_site1 + $SN_sites_sister2_site1) / 2;
						$NS_sites_site1 = ($NS_sites_sister1_site1 + $NS_sites_sister2_site1) / 2;
						$SS_sites_site1 = ($SS_sites_sister1_site1 + $SS_sites_sister2_site1) / 2;
					} elsif($sister1_num_changes_poss_site1 > 0) {
						$NN_sites_site1 = $NN_sites_sister1_site1;
						$SN_sites_site1 = $SN_sites_sister1_site1;
						$NS_sites_site1 = $NS_sites_sister1_site1;
						$SS_sites_site1 = $SS_sites_sister1_site1;
					} elsif($sister2_num_changes_poss_site1 > 0) {
						$NN_sites_site1 = $NN_sites_sister2_site1;
						$SN_sites_site1 = $SN_sites_sister2_site1;
						$NS_sites_site1 = $NS_sites_sister2_site1;
						$SS_sites_site1 = $SS_sites_sister2_site1;
						
					} # else nothing defined, stay NA
					
					# TALLY SITE 2
					my $NN_sites_sister1_site2 = 'NA';
					my $SN_sites_sister1_site2 = 'NA';
					my $NS_sites_sister1_site2 = 'NA';
					my $SS_sites_sister1_site2 = 'NA';
					if($sister1_num_changes_poss_site2 > 0) {
#						print "sister1_num_changes_poss_site2=$sister1_num_changes_poss_site2\n";
						$NN_sites_sister1_site2 = $sister1_num_changes_NN_site2 / $sister1_num_changes_poss_site2;
						$SN_sites_sister1_site2 = $sister1_num_changes_SN_site2 / $sister1_num_changes_poss_site2;
						$NS_sites_sister1_site2 = $sister1_num_changes_NS_site2 / $sister1_num_changes_poss_site2;
						$SS_sites_sister1_site2 = $sister1_num_changes_SS_site2 / $sister1_num_changes_poss_site2;
						
						unless(exists $seq_completed{$sister1}) {
							$seq2sites{$sister1}->{NN_sites} += $NN_sites_sister1_site2;
							$seq2sites{$sister1}->{SN_sites} += $SN_sites_sister1_site2;
							$seq2sites{$sister1}->{NS_sites} += $NS_sites_sister1_site2;
							$seq2sites{$sister1}->{SS_sites} += $SS_sites_sister1_site2;
						}
					}
					
					my $NN_sites_sister2_site2 = 'NA';
					my $SN_sites_sister2_site2 = 'NA';
					my $NS_sites_sister2_site2 = 'NA';
					my $SS_sites_sister2_site2 = 'NA';
					if($sister2_num_changes_poss_site2 > 0) {
						$NN_sites_sister2_site2 = $sister2_num_changes_NN_site2 / $sister2_num_changes_poss_site2;
						$SN_sites_sister2_site2 = $sister2_num_changes_SN_site2 / $sister2_num_changes_poss_site2;
						$NS_sites_sister2_site2 = $sister2_num_changes_NS_site2 / $sister2_num_changes_poss_site2;
						$SS_sites_sister2_site2 = $sister2_num_changes_SS_site2 / $sister2_num_changes_poss_site2;
						
						unless(exists $seq_completed{$sister2}) {
							$seq2sites{$sister2}->{NN_sites} += $NN_sites_sister2_site2;
							$seq2sites{$sister2}->{SN_sites} += $SN_sites_sister2_site2;
							$seq2sites{$sister2}->{NS_sites} += $NS_sites_sister2_site2;
							$seq2sites{$sister2}->{SS_sites} += $SS_sites_sister2_site2;
						}
					}
					
					my $NN_sites_site2 = 'NA';
					my $SN_sites_site2 = 'NA';
					my $NS_sites_site2 = 'NA';
					my $SS_sites_site2 = 'NA';
					if($sister1_num_changes_poss_site2 > 0 && $sister2_num_changes_poss_site2 > 0) {
						$NN_sites_site2 = ($NN_sites_sister1_site2 + $NN_sites_sister2_site2) / 2;
						$SN_sites_site2 = ($SN_sites_sister1_site2 + $SN_sites_sister2_site2) / 2;
						$NS_sites_site2 = ($NS_sites_sister1_site2 + $NS_sites_sister2_site2) / 2;
						$SS_sites_site2 = ($SS_sites_sister1_site2 + $SS_sites_sister2_site2) / 2;
					} elsif($sister1_num_changes_poss_site2 > 0) {
						$NN_sites_site2 = $NN_sites_sister1_site2;
						$SN_sites_site2 = $SN_sites_sister1_site2;
						$NS_sites_site2 = $NS_sites_sister1_site2;
						$SS_sites_site2 = $SS_sites_sister1_site2;
					} elsif($sister2_num_changes_poss_site2 > 0) {
						$NN_sites_site2 = $NN_sites_sister2_site2;
						$SN_sites_site2 = $SN_sites_sister2_site2;
						$NS_sites_site2 = $NS_sites_sister2_site2;
						$SS_sites_site2 = $SS_sites_sister2_site2;
						
					} # else nothing defined, stay NA
					
					# TALLY SITE 3
					my $NN_sites_sister1_site3 = 'NA';
					my $SN_sites_sister1_site3 = 'NA';
					my $NS_sites_sister1_site3 = 'NA';
					my $SS_sites_sister1_site3 = 'NA';
					if($sister1_num_changes_poss_site3 > 0) {
#						print "sister1_num_changes_poss_site3=$sister1_num_changes_poss_site3\n";
						$NN_sites_sister1_site3 = $sister1_num_changes_NN_site3 / $sister1_num_changes_poss_site3;
						$SN_sites_sister1_site3 = $sister1_num_changes_SN_site3 / $sister1_num_changes_poss_site3;
						$NS_sites_sister1_site3 = $sister1_num_changes_NS_site3 / $sister1_num_changes_poss_site3;
						$SS_sites_sister1_site3 = $sister1_num_changes_SS_site3 / $sister1_num_changes_poss_site3;
						
						unless(exists $seq_completed{$sister1}) {
							$seq2sites{$sister1}->{NN_sites} += $NN_sites_sister1_site3;
							$seq2sites{$sister1}->{SN_sites} += $SN_sites_sister1_site3;
							$seq2sites{$sister1}->{NS_sites} += $NS_sites_sister1_site3;
							$seq2sites{$sister1}->{SS_sites} += $SS_sites_sister1_site3;
						}
					}
					
					my $NN_sites_sister2_site3 = 'NA';
					my $SN_sites_sister2_site3 = 'NA';
					my $NS_sites_sister2_site3 = 'NA';
					my $SS_sites_sister2_site3 = 'NA';
					if($sister2_num_changes_poss_site3 > 0) {
						$NN_sites_sister2_site3 = $sister2_num_changes_NN_site3 / $sister2_num_changes_poss_site3;
						$SN_sites_sister2_site3 = $sister2_num_changes_SN_site3 / $sister2_num_changes_poss_site3;
						$NS_sites_sister2_site3 = $sister2_num_changes_NS_site3 / $sister2_num_changes_poss_site3;
						$SS_sites_sister2_site3 = $sister2_num_changes_SS_site3 / $sister2_num_changes_poss_site3;
						
						unless(exists $seq_completed{$sister2}) {
							$seq2sites{$sister2}->{NN_sites} += $NN_sites_sister2_site3;
							$seq2sites{$sister2}->{SN_sites} += $SN_sites_sister2_site3;
							$seq2sites{$sister2}->{NS_sites} += $NS_sites_sister2_site3;
							$seq2sites{$sister2}->{SS_sites} += $SS_sites_sister2_site3;
						}
					}
					
					my $NN_sites_site3 = 'NA';
					my $SN_sites_site3 = 'NA';
					my $NS_sites_site3 = 'NA';
					my $SS_sites_site3 = 'NA';
					if($sister1_num_changes_poss_site3 > 0 && $sister2_num_changes_poss_site3 > 0) {
						$NN_sites_site3 = ($NN_sites_sister1_site3 + $NN_sites_sister2_site3) / 2;
						$SN_sites_site3 = ($SN_sites_sister1_site3 + $SN_sites_sister2_site3) / 2;
						$NS_sites_site3 = ($NS_sites_sister1_site3 + $NS_sites_sister2_site3) / 2;
						$SS_sites_site3 = ($SS_sites_sister1_site3 + $SS_sites_sister2_site3) / 2;
					} elsif($sister1_num_changes_poss_site3 > 0) {
						$NN_sites_site3 = $NN_sites_sister1_site3;
						$SN_sites_site3 = $SN_sites_sister1_site3;
						$NS_sites_site3 = $NS_sites_sister1_site3;
						$SS_sites_site3 = $SS_sites_sister1_site3;
					} elsif($sister2_num_changes_poss_site3 > 0) {
						$NN_sites_site3 = $NN_sites_sister2_site3;
						$SN_sites_site3 = $SN_sites_sister2_site3;
						$NS_sites_site3 = $NS_sites_sister2_site3;
						$SS_sites_site3 = $SS_sites_sister2_site3;
						
					} # else nothing defined, stay NA
					
					# SUM THE THREE SITES
					my $NN_sites = $NN_sites_site1 + $NN_sites_site2 + $NN_sites_site3;
					my $SN_sites = $SN_sites_site1 + $SN_sites_site2 + $SN_sites_site3;
					my $NS_sites = $NS_sites_site1 + $NS_sites_site2 + $NS_sites_site3;
					my $SS_sites = $SS_sites_site1 + $SS_sites_site2 + $SS_sites_site3;
					
					
					# Check if there are multiple variants in these overlapping codons
					my $MNV = 'FALSE';
					if(($NN_diffs + $SN_diffs + $NS_diffs + $SS_diffs) > 1) {
						$MNV = 'TRUE';
					}
					
					print CODON_FILE "$fasta_file_short\t$tree_file_short\t$pair_num\t$sister1\t$sister2\t" .
						"$pair_bootstrap\t$codon_num\t" .
						"$codon_sister1_ORF1\t$codon_sister2_ORF1\t" .
						"$codon_sister1_ORF2_next$codon_sister1_ORF2_prev\t" . 
						"$codon_sister2_ORF2_next$codon_sister2_ORF2_prev\t" .
						"$MNV\t" .
						"$NN_sites\t$SN_sites\t$NS_sites\t$SS_sites\t$NN_diffs\t$SN_diffs\t$NS_diffs\t$SS_diffs\n";
					
					unless($MNV eq 'TRUE') { # exclude data from overlapping codons with multiple variants
						# Store sites
						$sister_data_hh{$pair_num}->{NN_sites} += $NN_sites;
						$sister_data_hh{$pair_num}->{SN_sites} += $SN_sites;
						$sister_data_hh{$pair_num}->{NS_sites} += $NS_sites;
						$sister_data_hh{$pair_num}->{SS_sites} += $SS_sites;
						
						# Store diffs
						$sister_data_hh{$pair_num}->{NN_diffs} += $NN_diffs;
						$sister_data_hh{$pair_num}->{SN_diffs} += $SN_diffs;
						$sister_data_hh{$pair_num}->{NS_diffs} += $NS_diffs;
						$sister_data_hh{$pair_num}->{SS_diffs} += $SS_diffs;
						
					} else {
						$site_diffs_hh{$codon_num}->{1}->{NN_diffs} = 0;
						$site_diffs_hh{$codon_num}->{1}->{SN_diffs} = 0;
						$site_diffs_hh{$codon_num}->{1}->{NS_diffs} = 0;
						$site_diffs_hh{$codon_num}->{1}->{SS_diffs} = 0;
						
						$site_diffs_hh{$codon_num}->{2}->{NN_diffs} = 0;
						$site_diffs_hh{$codon_num}->{2}->{SN_diffs} = 0;
						$site_diffs_hh{$codon_num}->{2}->{NS_diffs} = 0;
						$site_diffs_hh{$codon_num}->{2}->{SS_diffs} = 0;
						
						$site_diffs_hh{$codon_num}->{3}->{NN_diffs} = 0;
						$site_diffs_hh{$codon_num}->{3}->{SN_diffs} = 0;
						$site_diffs_hh{$codon_num}->{3}->{NS_diffs} = 0;
						$site_diffs_hh{$codon_num}->{3}->{SS_diffs} = 0;
					}
					
				} # MIDDLE (internal) codon (not first or last; two ORF2 codons overlap)
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
			
##########################################################################################
############# SENSE-ANTISENSE:
#############  sas13:
#############    ORF1: 1-2-3-1-2-3-1
#############    ORF2: 3-2-1-3-2-1-3
##########################################################################################
			} elsif($phase eq 'sas13') {
				# EXACT OVERLAP (opposite strand)
				my $codon_sister1_ORF2 = substr($product_seq_sister1, $site_index, 3);
				$codon_sister1_ORF2 = &revcom($codon_sister1_ORF2);
				my $codon_sister2_ORF2 = substr($product_seq_sister2, $site_index, 3);
				$codon_sister2_ORF2 = &revcom($codon_sister2_ORF2);
				
				
			} 
		} # end case in which each sister's ORF1 codon is FULLY DEFINED
		
		
		
		
		
#	my $pair_diffs = $pair_N_diffs + $pair_S_diffs;
#	
#	print " $pair_diffs coding diffs ($pair_N_diffs N, $pair_S_diffs S)\n";
	} # last codon?
	
	# Note that the sister members have been completed in at least one comparison
	$seq_completed{$sister1} = 1;
	$seq_completed{$sister2} = 1;
	
	print "\n";
} # last pair (sister1)

close CODON_FILE;

#my $pair_diffs_sum = $pair_N_diffs_sum + $pair_S_diffs_sum;
#
#print "\n\n################################################################################".
#	"\nSISTER PAIR TOTALS\n";
#print "### SUM: $pair_diffs_sum coding diffs ($pair_N_diffs_sum N, $pair_S_diffs_sum S)\n";

print "\n";


#########################################################################################
# TABULATE SISTER PAIR MEANS AND TOTALS

open(SISTER_FILE, ">>OLGenie\_pair\_results\.txt");

print SISTER_FILE "pair_num\tsister1\tsister2\t" . 
	"NN_sites\tSN_sites\tNS_sites\tSS_sites\t" .
	"NN_diffs\tSN_diffs\tNS_diffs\tSS_diffs\t" .
	"pNN\tpSN\tpNS\tpSS\n";
		
foreach my $pair_num (sort {$a <=> $b} keys %sister_data_hh) {
	# Retrieve sequence IDs
	my $sister1 = $pair2members{$pair_num}->{sister1};
	my $sister2 = $pair2members{$pair_num}->{sister2};
	
	# Retrieve site and diff data
	my $NN_sites = $sister_data_hh{$pair_num}->{NN_sites};
	my $SN_sites = $sister_data_hh{$pair_num}->{SN_sites};
	my $NS_sites = $sister_data_hh{$pair_num}->{NS_sites};
	my $SS_sites = $sister_data_hh{$pair_num}->{SS_sites};
	
	my $NN_diffs = $sister_data_hh{$pair_num}->{NN_diffs};
	my $SN_diffs = $sister_data_hh{$pair_num}->{SN_diffs};
	my $NS_diffs = $sister_data_hh{$pair_num}->{NS_diffs};
	my $SS_diffs = $sister_data_hh{$pair_num}->{SS_diffs};
	
	# Calculate ratios
	my $pNN = 'NA';
	if($NN_sites > 0) {
		$pNN = $NN_diffs / $NN_sites;
	}
	
	my $pSN = 'NA';
	if($SN_sites > 0) {
		$pSN = $SN_diffs / $SN_sites;
	}
	
	my $pNS = 'NA';
	if($NS_sites > 0) {
		$pNS = $NS_diffs / $NS_sites;
	}
	
	my $pSS = 'NA';
	if($SS_sites > 0) {
		$pSS = $SS_diffs / $SS_sites;
	}
	
	print SISTER_FILE "$pair_num\t$sister1\t$sister2\t" . 
		"$NN_sites\t$SN_sites\t$NS_sites\t$SS_sites\t" .
		"$NN_diffs\t$SN_diffs\t$NS_diffs\t$SS_diffs\t" .
		"$pNN\t$pSN\t$pNS\t$pSS\n";
	
}

print "\n";

close SISTER_FILE;

##########################################################################################
# AVERAGE NUMBER OF SITES BETWEEN ALL SEQUENCES
# SITES ARE HERE:
#$seq2sites{$sister2}->{NN_sites} += $NN_sites_sister2_site3;
#$seq2sites{$sister2}->{SN_sites} += $SN_sites_sister2_site3;
#$seq2sites{$sister2}->{NS_sites} += $NS_sites_sister2_site3;
#$seq2sites{$sister2}->{SS_sites} += $SS_sites_sister2_site3;

my @NN_sites;
my @SN_sites;
my @NS_sites;
my @SS_sites;

foreach my $seq_name (%seq2sites) {
#	print "### seq_name=$seq_name\n"; 
	if(exists $seq2sites{$seq_name}->{NN_sites}) {
		push(@NN_sites, $seq2sites{$seq_name}->{NN_sites});
	}
	
	if(exists $seq2sites{$seq_name}->{SN_sites}) {
		push(@SN_sites, $seq2sites{$seq_name}->{SN_sites});
	}
	
	if(exists $seq2sites{$seq_name}->{NS_sites}) {
		push(@NS_sites, $seq2sites{$seq_name}->{NS_sites});
	}
	
	if(exists $seq2sites{$seq_name}->{SS_sites}) {
		push(@SS_sites, $seq2sites{$seq_name}->{SS_sites});
	}
}

my $NN_sites_mean = &mean(@NN_sites);
my $SN_sites_mean = &mean(@SN_sites);
my $NS_sites_mean = &mean(@NS_sites);
my $SS_sites_mean = &mean(@SS_sites);


##########################################################################################
# NORMALIZE DIFFERENCES, SUCH THAT EACH SITE IS A MAXIMUM OF 1 DIFFERENCE
my $NN_diffs_sum = 0;
my $SN_diffs_sum = 0;
my $NS_diffs_sum = 0;
my $SS_diffs_sum = 0;

my $NN_diffs_normalized = 0;
my $SN_diffs_normalized = 0;
my $NS_diffs_normalized = 0;
my $SS_diffs_normalized = 0;

foreach my $codon_num (sort {$a <=> $b} keys %site_diffs_hh) {
	
	my $NN_diffs_total = 0;
	my $SN_diffs_total = 0;
	my $NS_diffs_total = 0;
	my $SS_diffs_total = 0;
	
	foreach my $codon_site (sort {$a <=> $b} keys %{$site_diffs_hh{$codon_num}}) {
		my $NN_diffs = $site_diffs_hh{$codon_num}->{$codon_site}->{NN_diffs};
		my $SN_diffs = $site_diffs_hh{$codon_num}->{$codon_site}->{SN_diffs};
		my $NS_diffs = $site_diffs_hh{$codon_num}->{$codon_site}->{NS_diffs};
		my $SS_diffs = $site_diffs_hh{$codon_num}->{$codon_site}->{SS_diffs};
		
		# Add up raw totals
		$NN_diffs_sum += $NN_diffs;
		$SN_diffs_sum += $SN_diffs;
		$NS_diffs_sum += $NS_diffs;
		$SS_diffs_sum += $SS_diffs;
		
		# Now, for normalization
		my $total_diffs = $NN_diffs + $SN_diffs + $NS_diffs + $SS_diffs;
		
		if($total_diffs > 1) {
			my $NN_diffs_corrected = $NN_diffs / $total_diffs;
			my $SN_diffs_corrected = $SN_diffs / $total_diffs;
			my $NS_diffs_corrected = $NS_diffs / $total_diffs;
			my $SS_diffs_corrected = $SS_diffs / $total_diffs;
			
			$NN_diffs_total += $NN_diffs_corrected;
			$SN_diffs_total += $SN_diffs_corrected;
			$NS_diffs_total += $NS_diffs_corrected;
			$SS_diffs_total += $SS_diffs_corrected;
		} else {
			$NN_diffs_total += $NN_diffs;
			$SN_diffs_total += $SN_diffs;
			$NS_diffs_total += $NS_diffs;
			$SS_diffs_total += $SS_diffs;
		}
	}
	
	$NN_diffs_normalized += $NN_diffs_total;
	$SN_diffs_normalized += $SN_diffs_total;
	$NS_diffs_normalized += $NS_diffs_total;
	$SS_diffs_normalized += $SS_diffs_total;
}


#########################################################################################
# PRINT TOTALS TO SCREEN
# LATER, make this output LOOK PRETTY
print "\n#########################################################################################\n";
print "### DATA FOR HYPOTHESIS TESTING:\n\n";

# Note these differences may differ from simple sums of pairs IF THERE ARE MULTIPLE VARIANTS IN A CODON
print "#########################################################################################\n";
print "# RAW NUMBER OF DIFFERENCES:\n# (Recommended for maximum power if alignment is certain.)\n\n";
print "\tNN\tSN\tNS\tSS\n";
print "Diffs\t$NN_diffs_sum\t$SN_diffs_sum\t$NS_diffs_sum\t$SS_diffs_sum\n";
print "Sites-Diffs\t" . ($NN_sites_mean - $NN_diffs_sum) . "\t" .
	($SN_sites_mean - $SN_diffs_sum) . "\t" . 
	($NS_sites_mean - $NS_diffs_sum) . "\t" .
	($SS_sites_mean - $SS_diffs_sum) . "\n";
print "SITES\t$NN_sites_mean\t$SN_sites_mean\t$NS_sites_mean\t$SS_sites_mean\n";

print "\n#########################################################################################\n";
print "# NORMALIZED NUMBER OF DIFFERENCES (MAX 1 PER SITE):\n# (Recommended if alignment may contain errors or large numbers of differences are observed.)\n\n";
print "\tNN\tSN\tNS\tSS\n";
print "Diffs\t$NN_diffs_normalized\t$SN_diffs_normalized\t$NS_diffs_normalized\t$SS_diffs_normalized\n";
print "Sites-Diffs\t" . ($NN_sites_mean - $NN_diffs_normalized) . "\t" .
	($SN_sites_mean - $SN_diffs_normalized) . "\t" . 
	($NS_sites_mean - $NS_diffs_normalized) . "\t" .
	($SS_sites_mean - $SS_diffs_normalized) . "\n";
print "SITES\t$NN_sites_mean\t$SN_sites_mean\t$NS_sites_mean\t$SS_sites_mean\n";

print "\n#########################################################################################\n";


#########################################################################################
# Print the above to file for easy reading into R
open(OLGENIE_FILE, ">>OLGenie\_results\.txt");

print OLGENIE_FILE "measure\t" .
	"NN\tSN\tNS\tSS\n";

print OLGENIE_FILE "diffs_raw\t$NN_diffs_sum\t$SN_diffs_sum\t$NS_diffs_sum\t$SS_diffs_sum\n" .
	"diffs_normalized\t$NN_diffs_normalized\t$SN_diffs_normalized\t$NS_diffs_normalized\t$SS_diffs_normalized\n" .
	"sites\t$NN_sites_mean\t$SN_sites_mean\t$NS_sites_mean\t$SS_sites_mean\n";

close OLGENIE_FILE;


#########################################################################################
# Print a completion message to screen
&end_the_program;
exit;


#########################################################################################
#########################################################################################
####################################                 ####################################
####################################   SUBROUTINES   ####################################
####################################                 ####################################
#########################################################################################
#########################################################################################

#########################################################################################
sub median {
    my @values = sort {$a <=> $b} @_;
    my $length = @values;
    if($length%2) { # odd number of elements: return middle
        return $values[int($length/2)];
    } else { # even number of elements: return mean of middle two
        return ($values[int($length/2)-1] + $values[int($length/2)])/2;
    }
}

#########################################################################################
sub mean {
    my @values = @_;
    my $length = @values;
    my $sum;
    
    foreach (@values) {
    	$sum += $_;
    }
    
    if($length > 0) {
 	   return($sum / $length);
    } else {
    	return('NA');
    }
}

#########################################################################################
sub standard_deviation {
    my @values = @_;
    my $length = @values;
	my $mean_of_values = &mean(@values);
	my $sum_squared_deviations;
	
	foreach (@values) {
		$sum_squared_deviations += ($_ - $mean_of_values)**2;
	}
	
	my $variance = ($sum_squared_deviations) / ($length - 1);
	
	return(sqrt($variance));
	
}

#########################################################################################
sub revcom {
    my ($seq) = @_;
	chomp($seq);
	$seq = uc($seq); # uc returns uppercase
	$seq =~ tr/U/T/; # no RNA
	
	my $rev_seq = reverse($seq);
	my $rev_com_seq = $rev_seq;
	$rev_com_seq =~ tr/ACGT/TGCA/;
	
	return($rev_com_seq);
}


#########################################################################################
# Get the amino acid (single-letter code) encoded by a given DNA or RNA codon
# Returns an array with:
#	returned[0] = number of nonsynonymous sites
#	returned[1] = number of synonymous sites
sub get_amino_acid {
	my ($codon) = @_;
	my $amino_acid;
	
	# Establish genetic code for use with synonymous sites; DNA or RNA
	my %code = (
		"AAA" => "K", "AAC" => "N", "AAG" => "K", "AAT" => "N", "AAU" => "N", 
		"ACA" => "T", "ACC" => "T", "ACG" => "T", "ACT" => "T", "ACU" => "T", 
		"AGA" => "R", "AGC" => "S", "AGG" => "R", "AGT" => "S", "AGU" => "S", 
		"ATA" => "I", "ATC" => "I", "ATG" => "M", "ATT" => "I", "AUA" => "I", 
		"AUC" => "I", "AUG" => "M", "AUU" => "I", "CAA" => "Q", "CAC" => "H", 
		"CAG" => "Q", "CAT" => "H", "CAU" => "H", "CCA" => "P", "CCC" => "P", 
		"CCG" => "P", "CCT" => "P", "CCU" => "P", "CGA" => "R", "CGC" => "R", 
		"CGG" => "R", "CGT" => "R", "CGU" => "R", "CTA" => "L", "CTC" => "L", 
		"CTG" => "L", "CTT" => "L", "CUA" => "L", "CUC" => "L", "CUG" => "L", 
		"CUU" => "L", "GAA" => "E", "GAC" => "D", "GAG" => "E", "GAT" => "D", 
		"GAU" => "D", "GCA" => "A", "GCC" => "A", "GCG" => "A", "GCT" => "A", 
		"GCU" => "A", "GGA" => "G", "GGC" => "G", "GGG" => "G", "GGT" => "G", 
		"GGU" => "G", "GTA" => "V", "GTC" => "V", "GTG" => "V", "GTT" => "V", 
		"GUA" => "V", "GUC" => "V", "GUG" => "V", "GUU" => "V", "TAA" => "*", 
		"TAC" => "Y", "TAG" => "*", "TAT" => "Y", "UAA" => "*", "UAC" => "Y", 
		"UAG" => "*", "UAU" => "Y", "TCA" => "S", "TCC" => "S", "TCG" => "S", 
		"TCT" => "S", "UCA" => "S", "UCC" => "S", "UCG" => "S", "UCU" => "S", 
		"TGA" => "*", "TGC" => "C", "TGG" => "W", "TGT" => "C", "UGA" => "*", 
		"UGC" => "C", "UGG" => "W", "UGU" => "C", "TTA" => "L", "TTC" => "F", 
		"TTG" => "L", "TTT" => "F", "UUA" => "L", "UUC" => "F", "UUG" => "L", 
		"UUU" => "F"
	);
	
	$amino_acid = $code{$codon};
	
	if($amino_acid eq '') {
		$amino_acid = '?';
	}
	
	return $amino_acid;
}


#########################################################################################
# End the program by notifying the screen at command line
sub end_the_program {
	my $time2 = time;
	my $local_time2 = localtime;
	
	my $time_diff = ($time2 - $time1);
	my $time_diff_rounded = sprintf("%.2f",$time_diff);
	my $mins_elapsed = ($time_diff / 60);
	my $whole_mins_elapsed = int($mins_elapsed);
	my $whole_mins_in_secs = ($whole_mins_elapsed * 60);
	my $secs_remaining = ($time_diff - $whole_mins_in_secs);
	my $secs_remaining_rounded = sprintf("%.2f",$secs_remaining);
	
	print "OLGenie completed at local time $local_time2. The process took $time_diff_rounded secs, i.e., ".
			"$whole_mins_elapsed mins and $secs_remaining_rounded secs\n";

	print "\n################################################################################".
		"\n##                      OLGenie completed successfully.                       ##".
		"\n##                Please find results in the working directory.               ##\n".
		"################################################################################".
		"\n\n\n"; 
}
